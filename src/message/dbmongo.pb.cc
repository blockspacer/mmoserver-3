// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmongo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbmongo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FindDocRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindDocRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountDocRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountDocRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDocRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDocRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertDocRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertDocRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDocRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDocRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindAndModifyDocRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindAndModifyDocRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunProcedureRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunProcedureRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperIndexRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperIndexRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OperIndexRequest_OperType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CreateCollectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCollectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbStatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbStatusMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DbStatusMessage_DbStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FindDocReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindDocReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountDocReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountDocReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDocReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDocReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertDocReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertDocReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDocReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDocReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindAndModifyDocReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindAndModifyDocReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunProcedureReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunProcedureReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperIndexReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperIndexReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateCollectionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCollectionReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CreateCollectionReply_CrateCollectionStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CallDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallDBResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbmongo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_dbmongo_2eproto() {
  protobuf_AddDesc_dbmongo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbmongo.proto");
  GOOGLE_CHECK(file != NULL);
  FindDocRequest_descriptor_ = file->message_type(0);
  static const int FindDocRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, seqflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, seq_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, read_pref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, hint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, skip_),
  };
  FindDocRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FindDocRequest_descriptor_,
      FindDocRequest::internal_default_instance(),
      FindDocRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, _has_bits_),
      -1,
      -1,
      sizeof(FindDocRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocRequest, _internal_metadata_));
  CountDocRequest_descriptor_ = file->message_type(1);
  static const int CountDocRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocRequest, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocRequest, query_),
  };
  CountDocRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CountDocRequest_descriptor_,
      CountDocRequest::internal_default_instance(),
      CountDocRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocRequest, _has_bits_),
      -1,
      -1,
      sizeof(CountDocRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocRequest, _internal_metadata_));
  UpdateDocRequest_descriptor_ = file->message_type(2);
  static const int UpdateDocRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, upsert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, seqflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, seq_key_),
  };
  UpdateDocRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateDocRequest_descriptor_,
      UpdateDocRequest::internal_default_instance(),
      UpdateDocRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, _has_bits_),
      -1,
      -1,
      sizeof(UpdateDocRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocRequest, _internal_metadata_));
  InsertDocRequest_descriptor_ = file->message_type(3);
  static const int InsertDocRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocRequest, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocRequest, doc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocRequest, seqflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocRequest, seq_key_),
  };
  InsertDocRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InsertDocRequest_descriptor_,
      InsertDocRequest::internal_default_instance(),
      InsertDocRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocRequest, _has_bits_),
      -1,
      -1,
      sizeof(InsertDocRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocRequest, _internal_metadata_));
  DeleteDocRequest_descriptor_ = file->message_type(4);
  static const int DeleteDocRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocRequest, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocRequest, seqflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocRequest, seq_key_),
  };
  DeleteDocRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteDocRequest_descriptor_,
      DeleteDocRequest::internal_default_instance(),
      DeleteDocRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocRequest, _has_bits_),
      -1,
      -1,
      sizeof(DeleteDocRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocRequest, _internal_metadata_));
  FindAndModifyDocRequest_descriptor_ = file->message_type(5);
  static const int FindAndModifyDocRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, upsert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, new__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, seqflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, seq_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, sort_),
  };
  FindAndModifyDocRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FindAndModifyDocRequest_descriptor_,
      FindAndModifyDocRequest::internal_default_instance(),
      FindAndModifyDocRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, _has_bits_),
      -1,
      -1,
      sizeof(FindAndModifyDocRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocRequest, _internal_metadata_));
  RunProcedureRequest_descriptor_ = file->message_type(6);
  static const int RunProcedureRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureRequest, proc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureRequest, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureRequest, kwargs_),
  };
  RunProcedureRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunProcedureRequest_descriptor_,
      RunProcedureRequest::internal_default_instance(),
      RunProcedureRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureRequest, _has_bits_),
      -1,
      -1,
      sizeof(RunProcedureRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureRequest, _internal_metadata_));
  OperIndexRequest_descriptor_ = file->message_type(7);
  static const int OperIndexRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexRequest, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexRequest, desc_),
  };
  OperIndexRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OperIndexRequest_descriptor_,
      OperIndexRequest::internal_default_instance(),
      OperIndexRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexRequest, _has_bits_),
      -1,
      -1,
      sizeof(OperIndexRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexRequest, _internal_metadata_));
  OperIndexRequest_OperType_descriptor_ = OperIndexRequest_descriptor_->enum_type(0);
  CreateCollectionRequest_descriptor_ = file->message_type(8);
  static const int CreateCollectionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionRequest, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionRequest, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionRequest, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionRequest, operations_),
  };
  CreateCollectionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateCollectionRequest_descriptor_,
      CreateCollectionRequest::internal_default_instance(),
      CreateCollectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionRequest, _has_bits_),
      -1,
      -1,
      sizeof(CreateCollectionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionRequest, _internal_metadata_));
  DbStatusMessage_descriptor_ = file->message_type(9);
  static const int DbStatusMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbStatusMessage, status_),
  };
  DbStatusMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DbStatusMessage_descriptor_,
      DbStatusMessage::internal_default_instance(),
      DbStatusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbStatusMessage, _has_bits_),
      -1,
      -1,
      sizeof(DbStatusMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbStatusMessage, _internal_metadata_));
  DbStatusMessage_DbStatus_descriptor_ = DbStatusMessage_descriptor_->enum_type(0);
  FindDocReply_descriptor_ = file->message_type(10);
  static const int FindDocReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocReply, docs_),
  };
  FindDocReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FindDocReply_descriptor_,
      FindDocReply::internal_default_instance(),
      FindDocReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocReply, _has_bits_),
      -1,
      -1,
      sizeof(FindDocReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindDocReply, _internal_metadata_));
  CountDocReply_descriptor_ = file->message_type(11);
  static const int CountDocReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocReply, count_),
  };
  CountDocReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CountDocReply_descriptor_,
      CountDocReply::internal_default_instance(),
      CountDocReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocReply, _has_bits_),
      -1,
      -1,
      sizeof(CountDocReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDocReply, _internal_metadata_));
  UpdateDocReply_descriptor_ = file->message_type(12);
  static const int UpdateDocReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocReply, status_),
  };
  UpdateDocReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateDocReply_descriptor_,
      UpdateDocReply::internal_default_instance(),
      UpdateDocReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocReply, _has_bits_),
      -1,
      -1,
      sizeof(UpdateDocReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDocReply, _internal_metadata_));
  InsertDocReply_descriptor_ = file->message_type(13);
  static const int InsertDocReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocReply, insert_id_),
  };
  InsertDocReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InsertDocReply_descriptor_,
      InsertDocReply::internal_default_instance(),
      InsertDocReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocReply, _has_bits_),
      -1,
      -1,
      sizeof(InsertDocReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertDocReply, _internal_metadata_));
  DeleteDocReply_descriptor_ = file->message_type(14);
  static const int DeleteDocReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocReply, status_),
  };
  DeleteDocReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteDocReply_descriptor_,
      DeleteDocReply::internal_default_instance(),
      DeleteDocReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocReply, _has_bits_),
      -1,
      -1,
      sizeof(DeleteDocReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDocReply, _internal_metadata_));
  FindAndModifyDocReply_descriptor_ = file->message_type(15);
  static const int FindAndModifyDocReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocReply, doc_),
  };
  FindAndModifyDocReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FindAndModifyDocReply_descriptor_,
      FindAndModifyDocReply::internal_default_instance(),
      FindAndModifyDocReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocReply, _has_bits_),
      -1,
      -1,
      sizeof(FindAndModifyDocReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindAndModifyDocReply, _internal_metadata_));
  RunProcedureReply_descriptor_ = file->message_type(16);
  static const int RunProcedureReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureReply, doc_),
  };
  RunProcedureReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunProcedureReply_descriptor_,
      RunProcedureReply::internal_default_instance(),
      RunProcedureReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureReply, _has_bits_),
      -1,
      -1,
      sizeof(RunProcedureReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunProcedureReply, _internal_metadata_));
  OperIndexReply_descriptor_ = file->message_type(17);
  static const int OperIndexReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexReply, status_),
  };
  OperIndexReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OperIndexReply_descriptor_,
      OperIndexReply::internal_default_instance(),
      OperIndexReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexReply, _has_bits_),
      -1,
      -1,
      sizeof(OperIndexReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperIndexReply, _internal_metadata_));
  CreateCollectionReply_descriptor_ = file->message_type(18);
  static const int CreateCollectionReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionReply, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionReply, status_),
  };
  CreateCollectionReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateCollectionReply_descriptor_,
      CreateCollectionReply::internal_default_instance(),
      CreateCollectionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionReply, _has_bits_),
      -1,
      -1,
      sizeof(CreateCollectionReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCollectionReply, _internal_metadata_));
  CreateCollectionReply_CrateCollectionStatus_descriptor_ = CreateCollectionReply_descriptor_->enum_type(0);
  CallDBRequest_descriptor_ = file->message_type(19);
  static const int CallDBRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBRequest, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBRequest, callback_id_),
  };
  CallDBRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallDBRequest_descriptor_,
      CallDBRequest::internal_default_instance(),
      CallDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBRequest, _has_bits_),
      -1,
      -1,
      sizeof(CallDBRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBRequest, _internal_metadata_));
  CallDBResponse_descriptor_ = file->message_type(20);
  static const int CallDBResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBResponse, callback_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBResponse, args_),
  };
  CallDBResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallDBResponse_descriptor_,
      CallDBResponse::internal_default_instance(),
      CallDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBResponse, _has_bits_),
      -1,
      -1,
      sizeof(CallDBResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDBResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbmongo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FindDocRequest_descriptor_, FindDocRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CountDocRequest_descriptor_, CountDocRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateDocRequest_descriptor_, UpdateDocRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InsertDocRequest_descriptor_, InsertDocRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteDocRequest_descriptor_, DeleteDocRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FindAndModifyDocRequest_descriptor_, FindAndModifyDocRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunProcedureRequest_descriptor_, RunProcedureRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OperIndexRequest_descriptor_, OperIndexRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateCollectionRequest_descriptor_, CreateCollectionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DbStatusMessage_descriptor_, DbStatusMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FindDocReply_descriptor_, FindDocReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CountDocReply_descriptor_, CountDocReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateDocReply_descriptor_, UpdateDocReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InsertDocReply_descriptor_, InsertDocReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteDocReply_descriptor_, DeleteDocReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FindAndModifyDocReply_descriptor_, FindAndModifyDocReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunProcedureReply_descriptor_, RunProcedureReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OperIndexReply_descriptor_, OperIndexReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateCollectionReply_descriptor_, CreateCollectionReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallDBRequest_descriptor_, CallDBRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallDBResponse_descriptor_, CallDBResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbmongo_2eproto() {
  FindDocRequest_default_instance_.Shutdown();
  delete FindDocRequest_reflection_;
  CountDocRequest_default_instance_.Shutdown();
  delete CountDocRequest_reflection_;
  UpdateDocRequest_default_instance_.Shutdown();
  delete UpdateDocRequest_reflection_;
  InsertDocRequest_default_instance_.Shutdown();
  delete InsertDocRequest_reflection_;
  DeleteDocRequest_default_instance_.Shutdown();
  delete DeleteDocRequest_reflection_;
  FindAndModifyDocRequest_default_instance_.Shutdown();
  delete FindAndModifyDocRequest_reflection_;
  RunProcedureRequest_default_instance_.Shutdown();
  delete RunProcedureRequest_reflection_;
  OperIndexRequest_default_instance_.Shutdown();
  delete OperIndexRequest_reflection_;
  CreateCollectionRequest_default_instance_.Shutdown();
  delete CreateCollectionRequest_reflection_;
  DbStatusMessage_default_instance_.Shutdown();
  delete DbStatusMessage_reflection_;
  FindDocReply_default_instance_.Shutdown();
  delete FindDocReply_reflection_;
  CountDocReply_default_instance_.Shutdown();
  delete CountDocReply_reflection_;
  UpdateDocReply_default_instance_.Shutdown();
  delete UpdateDocReply_reflection_;
  InsertDocReply_default_instance_.Shutdown();
  delete InsertDocReply_reflection_;
  DeleteDocReply_default_instance_.Shutdown();
  delete DeleteDocReply_reflection_;
  FindAndModifyDocReply_default_instance_.Shutdown();
  delete FindAndModifyDocReply_reflection_;
  RunProcedureReply_default_instance_.Shutdown();
  delete RunProcedureReply_reflection_;
  OperIndexReply_default_instance_.Shutdown();
  delete OperIndexReply_reflection_;
  CreateCollectionReply_default_instance_.Shutdown();
  delete CreateCollectionReply_reflection_;
  CallDBRequest_default_instance_.Shutdown();
  delete CallDBRequest_reflection_;
  CallDBResponse_default_instance_.Shutdown();
  delete CallDBResponse_reflection_;
}

void protobuf_InitDefaults_dbmongo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  FindDocRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CountDocRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UpdateDocRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  InsertDocRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteDocRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FindAndModifyDocRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RunProcedureRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OperIndexRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CreateCollectionRequest_default_instance_.DefaultConstruct();
  DbStatusMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FindDocReply_default_instance_.DefaultConstruct();
  CountDocReply_default_instance_.DefaultConstruct();
  UpdateDocReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  InsertDocReply_default_instance_.DefaultConstruct();
  DeleteDocReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FindAndModifyDocReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RunProcedureReply_default_instance_.DefaultConstruct();
  OperIndexReply_default_instance_.DefaultConstruct();
  CreateCollectionReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CallDBRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CallDBResponse_default_instance_.DefaultConstruct();
  FindDocRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CountDocRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateDocRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  InsertDocRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteDocRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  FindAndModifyDocRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RunProcedureRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  OperIndexRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateCollectionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DbStatusMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  FindDocReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  CountDocReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateDocReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  InsertDocReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteDocReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  FindAndModifyDocReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  RunProcedureReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  OperIndexReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateCollectionReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  CallDBRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CallDBResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_dbmongo_2eproto_once_);
void protobuf_InitDefaults_dbmongo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_dbmongo_2eproto_once_,
                 &protobuf_InitDefaults_dbmongo_2eproto_impl);
}
void protobuf_AddDesc_dbmongo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_dbmongo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdbmongo.proto\"\340\001\n\016FindDocRequest\022\027\n\013ca"
    "llback_id\030\001 \001(\005:\002-1\022\n\n\002db\030\002 \002(\014\022\022\n\ncolle"
    "ction\030\003 \002(\014\022\r\n\005query\030\004 \002(\014\022\016\n\006fields\030\005 \001"
    "(\014\022\020\n\005limit\030\006 \001(\005:\0011\022\026\n\007seqflag\030\007 \001(\010:\005f"
    "alse\022\017\n\007seq_key\030\010 \001(\014\022\014\n\004sort\030\t \001(\014\022\021\n\tr"
    "ead_pref\030\n \001(\005\022\014\n\004hint\030\013 \001(\014\022\014\n\004skip\030\014 \001"
    "(\014\"Y\n\017CountDocRequest\022\027\n\013callback_id\030\001 \001"
    "(\005:\002-1\022\n\n\002db\030\002 \002(\014\022\022\n\ncollection\030\003 \002(\014\022\r"
    "\n\005query\030\004 \001(\014\"\300\001\n\020UpdateDocRequest\022\027\n\013ca"
    "llback_id\030\001 \001(\005:\002-1\022\n\n\002db\030\002 \002(\014\022\022\n\ncolle"
    "ction\030\003 \002(\014\022\r\n\005query\030\004 \002(\014\022\016\n\006fields\030\005 \002"
    "(\014\022\025\n\006upsert\030\006 \001(\010:\005false\022\024\n\005multi\030\007 \001(\010"
    ":\005false\022\026\n\007seqflag\030\010 \001(\010:\005false\022\017\n\007seq_k"
    "ey\030\t \001(\014\"\201\001\n\020InsertDocRequest\022\027\n\013callbac"
    "k_id\030\001 \001(\005:\002-1\022\n\n\002db\030\002 \002(\014\022\022\n\ncollection"
    "\030\003 \002(\014\022\013\n\003doc\030\004 \002(\014\022\026\n\007seqflag\030\005 \001(\010:\005fa"
    "lse\022\017\n\007seq_key\030\006 \001(\014\"\203\001\n\020DeleteDocReques"
    "t\022\027\n\013callback_id\030\001 \001(\005:\002-1\022\n\n\002db\030\002 \002(\014\022\022"
    "\n\ncollection\030\003 \002(\014\022\r\n\005query\030\004 \002(\014\022\026\n\007seq"
    "flag\030\005 \001(\010:\005false\022\017\n\007seq_key\030\006 \001(\014\"\372\001\n\027F"
    "indAndModifyDocRequest\022\027\n\013callback_id\030\001 "
    "\001(\005:\002-1\022\n\n\002db\030\002 \002(\014\022\022\n\ncollection\030\003 \002(\014\022"
    "\r\n\005query\030\004 \002(\014\022\016\n\006fields\030\005 \001(\014\022\016\n\006update"
    "\030\006 \001(\014\022\025\n\006upsert\030\007 \001(\010:\005false\022\022\n\003new\030\010 \001"
    "(\010:\005false\022\026\n\007seqflag\030\t \001(\010:\005false\022\017\n\007seq"
    "_key\030\n \001(\014\022\025\n\006remove\030\013 \001(\010:\005false\022\014\n\004sor"
    "t\030\014 \001(\014\"f\n\023RunProcedureRequest\022\027\n\013callba"
    "ck_id\030\001 \001(\005:\002-1\022\n\n\002db\030\002 \002(\014\022\014\n\004proc\030\004 \002("
    "\014\022\014\n\004args\030\005 \001(\014\022\016\n\006kwargs\030\006 \001(\014\"\277\001\n\020Oper"
    "IndexRequest\022\027\n\013callback_id\030\001 \001(\005:\002-1\022\n\n"
    "\002db\030\002 \002(\014\022\022\n\ncollection\030\003 \002(\014\022(\n\004type\030\004 "
    "\002(\0162\032.OperIndexRequest.OperType\022\r\n\005query"
    "\030\005 \001(\014\022\014\n\004desc\030\006 \001(\014\"+\n\010OperType\022\n\n\006ENSU"
    "RE\020\000\022\010\n\004DROP\020\001\022\t\n\005RESET\020\002\"f\n\027CreateColle"
    "ctionRequest\022\027\n\013callback_id\030\001 \001(\005:\002-1\022\n\n"
    "\002db\030\002 \002(\014\022\022\n\ncollection\030\004 \002(\014\022\022\n\noperati"
    "ons\030\005 \001(\014\"x\n\017DbStatusMessage\022)\n\006status\030\001"
    " \002(\0162\031.DbStatusMessage.DbStatus\":\n\010DbSta"
    "tus\022\r\n\tCONNECTED\020\000\022\025\n\021CONNECTION_FAILED\020"
    "\001\022\010\n\004BUSY\020\002\"E\n\014FindDocReply\022\027\n\013callback_"
    "id\030\001 \002(\005:\002-1\022\016\n\006status\030\002 \002(\010\022\014\n\004docs\030\003 \003"
    "(\014\"G\n\rCountDocReply\022\027\n\013callback_id\030\001 \002(\005"
    ":\002-1\022\016\n\006status\030\002 \002(\010\022\r\n\005count\030\003 \002(\005\"9\n\016U"
    "pdateDocReply\022\027\n\013callback_id\030\001 \001(\005:\002-1\022\016"
    "\n\006status\030\002 \002(\010\"L\n\016InsertDocReply\022\027\n\013call"
    "back_id\030\001 \001(\005:\002-1\022\016\n\006status\030\002 \002(\010\022\021\n\tins"
    "ert_id\030\003 \001(\014\"9\n\016DeleteDocReply\022\027\n\013callba"
    "ck_id\030\001 \001(\005:\002-1\022\016\n\006status\030\002 \002(\010\"M\n\025FindA"
    "ndModifyDocReply\022\027\n\013callback_id\030\001 \001(\005:\002-"
    "1\022\016\n\006status\030\002 \002(\010\022\013\n\003doc\030\003 \001(\014\"I\n\021RunPro"
    "cedureReply\022\027\n\013callback_id\030\001 \001(\005:\002-1\022\016\n\006"
    "status\030\002 \002(\010\022\013\n\003doc\030\003 \001(\014\"9\n\016OperIndexRe"
    "ply\022\027\n\013callback_id\030\001 \001(\005:\002-1\022\016\n\006status\030\002"
    " \002(\010\"\300\001\n\025CreateCollectionReply\022\027\n\013callba"
    "ck_id\030\001 \001(\005:\002-1\022<\n\006status\030\002 \002(\0162,.Create"
    "CollectionReply.CrateCollectionStatus\"P\n"
    "\025CrateCollectionStatus\022\017\n\013CREATE_SUCC\020\000\022"
    "\023\n\017ALREADY_EXISTED\020\001\022\021\n\rCREATE_FAILED\020\002\""
    "F\n\rCallDBRequest\022\016\n\006method\030\001 \002(\014\022\014\n\004args"
    "\030\002 \002(\014\022\027\n\013callback_id\030\003 \001(\005:\002-1\"3\n\016CallD"
    "BResponse\022\023\n\013callback_id\030\001 \002(\005\022\014\n\004args\030\002"
    " \002(\014", 2444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbmongo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbmongo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_dbmongo_2eproto_once_);
void protobuf_AddDesc_dbmongo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_dbmongo_2eproto_once_,
                 &protobuf_AddDesc_dbmongo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbmongo_2eproto {
  StaticDescriptorInitializer_dbmongo_2eproto() {
    protobuf_AddDesc_dbmongo_2eproto();
  }
} static_descriptor_initializer_dbmongo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindDocRequest::kCallbackIdFieldNumber;
const int FindDocRequest::kDbFieldNumber;
const int FindDocRequest::kCollectionFieldNumber;
const int FindDocRequest::kQueryFieldNumber;
const int FindDocRequest::kFieldsFieldNumber;
const int FindDocRequest::kLimitFieldNumber;
const int FindDocRequest::kSeqflagFieldNumber;
const int FindDocRequest::kSeqKeyFieldNumber;
const int FindDocRequest::kSortFieldNumber;
const int FindDocRequest::kReadPrefFieldNumber;
const int FindDocRequest::kHintFieldNumber;
const int FindDocRequest::kSkipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindDocRequest::FindDocRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FindDocRequest)
}

void FindDocRequest::InitAsDefaultInstance() {
}

FindDocRequest::FindDocRequest(const FindDocRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FindDocRequest)
}

void FindDocRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seqflag_, 0, reinterpret_cast<char*>(&read_pref_) -
    reinterpret_cast<char*>(&seqflag_) + sizeof(read_pref_));
  callback_id_ = -1;
  limit_ = 1;
}

FindDocRequest::~FindDocRequest() {
  // @@protoc_insertion_point(destructor:FindDocRequest)
  SharedDtor();
}

void FindDocRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FindDocRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindDocRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindDocRequest_descriptor_;
}

const FindDocRequest& FindDocRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FindDocRequest> FindDocRequest_default_instance_;

FindDocRequest* FindDocRequest::New(::google::protobuf::Arena* arena) const {
  FindDocRequest* n = new FindDocRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindDocRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FindDocRequest)
  if (_has_bits_[0 / 32] & 255u) {
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collection()) {
      collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fields()) {
      fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    limit_ = 1;
    seqflag_ = false;
    if (has_seq_key()) {
      seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_sort()) {
      sort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    read_pref_ = 0;
    if (has_hint()) {
      hint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_skip()) {
      skip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FindDocRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FindDocRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collection;
        break;
      }

      // required bytes collection = 3;
      case 3: {
        if (tag == 26) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }

      // required bytes query = 4;
      case 4: {
        if (tag == 34) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fields;
        break;
      }

      // optional bytes fields = 5;
      case 5: {
        if (tag == 42) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }

      // optional int32 limit = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_limit:
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_seqflag;
        break;
      }

      // optional bool seqflag = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_seqflag:
          set_has_seqflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seqflag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_seq_key;
        break;
      }

      // optional bytes seq_key = 8;
      case 8: {
        if (tag == 66) {
         parse_seq_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seq_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sort;
        break;
      }

      // optional bytes sort = 9;
      case 9: {
        if (tag == 74) {
         parse_sort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sort()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_read_pref;
        break;
      }

      // optional int32 read_pref = 10;
      case 10: {
        if (tag == 80) {
         parse_read_pref:
          set_has_read_pref();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_pref_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_hint;
        break;
      }

      // optional bytes hint = 11;
      case 11: {
        if (tag == 90) {
         parse_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_skip;
        break;
      }

      // optional bytes skip = 12;
      case 12: {
        if (tag == 98) {
         parse_skip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FindDocRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FindDocRequest)
  return false;
#undef DO_
}

void FindDocRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FindDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->collection(), output);
  }

  // required bytes query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->query(), output);
  }

  // optional bytes fields = 5;
  if (has_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->fields(), output);
  }

  // optional int32 limit = 6 [default = 1];
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit(), output);
  }

  // optional bool seqflag = 7 [default = false];
  if (has_seqflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->seqflag(), output);
  }

  // optional bytes seq_key = 8;
  if (has_seq_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->seq_key(), output);
  }

  // optional bytes sort = 9;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->sort(), output);
  }

  // optional int32 read_pref = 10;
  if (has_read_pref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->read_pref(), output);
  }

  // optional bytes hint = 11;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->hint(), output);
  }

  // optional bytes skip = 12;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->skip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FindDocRequest)
}

::google::protobuf::uint8* FindDocRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FindDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->collection(), target);
  }

  // required bytes query = 4;
  if (has_query()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->query(), target);
  }

  // optional bytes fields = 5;
  if (has_fields()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->fields(), target);
  }

  // optional int32 limit = 6 [default = 1];
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit(), target);
  }

  // optional bool seqflag = 7 [default = false];
  if (has_seqflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->seqflag(), target);
  }

  // optional bytes seq_key = 8;
  if (has_seq_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->seq_key(), target);
  }

  // optional bytes sort = 9;
  if (has_sort()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->sort(), target);
  }

  // optional int32 read_pref = 10;
  if (has_read_pref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->read_pref(), target);
  }

  // optional bytes hint = 11;
  if (has_hint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->hint(), target);
  }

  // optional bytes skip = 12;
  if (has_skip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->skip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FindDocRequest)
  return target;
}

size_t FindDocRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FindDocRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_collection()) {
    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());
  }

  if (has_query()) {
    // required bytes query = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->query());
  }

  return total_size;
}
size_t FindDocRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FindDocRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());

    // required bytes query = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->query());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 241u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes fields = 5;
    if (has_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fields());
    }

    // optional int32 limit = 6 [default = 1];
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional bool seqflag = 7 [default = false];
    if (has_seqflag()) {
      total_size += 1 + 1;
    }

    // optional bytes seq_key = 8;
    if (has_seq_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seq_key());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bytes sort = 9;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sort());
    }

    // optional int32 read_pref = 10;
    if (has_read_pref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read_pref());
    }

    // optional bytes hint = 11;
    if (has_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hint());
    }

    // optional bytes skip = 12;
    if (has_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skip());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindDocRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FindDocRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FindDocRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindDocRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FindDocRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FindDocRequest)
    UnsafeMergeFrom(*source);
  }
}

void FindDocRequest::MergeFrom(const FindDocRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FindDocRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FindDocRequest::UnsafeMergeFrom(const FindDocRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_collection()) {
      set_has_collection();
      collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
    }
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (from.has_fields()) {
      set_has_fields();
      fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_seqflag()) {
      set_seqflag(from.seqflag());
    }
    if (from.has_seq_key()) {
      set_has_seq_key();
      seq_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_key_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sort()) {
      set_has_sort();
      sort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_);
    }
    if (from.has_read_pref()) {
      set_read_pref(from.read_pref());
    }
    if (from.has_hint()) {
      set_has_hint();
      hint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hint_);
    }
    if (from.has_skip()) {
      set_has_skip();
      skip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FindDocRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FindDocRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindDocRequest::CopyFrom(const FindDocRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FindDocRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FindDocRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void FindDocRequest::Swap(FindDocRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindDocRequest::InternalSwap(FindDocRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  collection_.Swap(&other->collection_);
  query_.Swap(&other->query_);
  fields_.Swap(&other->fields_);
  std::swap(limit_, other->limit_);
  std::swap(seqflag_, other->seqflag_);
  seq_key_.Swap(&other->seq_key_);
  sort_.Swap(&other->sort_);
  std::swap(read_pref_, other->read_pref_);
  hint_.Swap(&other->hint_);
  skip_.Swap(&other->skip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindDocRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindDocRequest_descriptor_;
  metadata.reflection = FindDocRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindDocRequest

// optional int32 callback_id = 1 [default = -1];
bool FindDocRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FindDocRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FindDocRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FindDocRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 FindDocRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.callback_id)
  return callback_id_;
}
void FindDocRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:FindDocRequest.callback_id)
}

// required bytes db = 2;
bool FindDocRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FindDocRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void FindDocRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void FindDocRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& FindDocRequest::db() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindDocRequest.db)
}
void FindDocRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindDocRequest.db)
}
void FindDocRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindDocRequest.db)
}
::std::string* FindDocRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:FindDocRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindDocRequest::release_db() {
  // @@protoc_insertion_point(field_release:FindDocRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:FindDocRequest.db)
}

// required bytes collection = 3;
bool FindDocRequest::has_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FindDocRequest::set_has_collection() {
  _has_bits_[0] |= 0x00000004u;
}
void FindDocRequest::clear_has_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
void FindDocRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection();
}
const ::std::string& FindDocRequest::collection() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_collection(const ::std::string& value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindDocRequest.collection)
}
void FindDocRequest::set_collection(const char* value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindDocRequest.collection)
}
void FindDocRequest::set_collection(const void* value, size_t size) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindDocRequest.collection)
}
::std::string* FindDocRequest::mutable_collection() {
  set_has_collection();
  // @@protoc_insertion_point(field_mutable:FindDocRequest.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindDocRequest::release_collection() {
  // @@protoc_insertion_point(field_release:FindDocRequest.collection)
  clear_has_collection();
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    set_has_collection();
  } else {
    clear_has_collection();
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:FindDocRequest.collection)
}

// required bytes query = 4;
bool FindDocRequest::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FindDocRequest::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
void FindDocRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
void FindDocRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& FindDocRequest::query() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindDocRequest.query)
}
void FindDocRequest::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindDocRequest.query)
}
void FindDocRequest::set_query(const void* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindDocRequest.query)
}
::std::string* FindDocRequest::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:FindDocRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindDocRequest::release_query() {
  // @@protoc_insertion_point(field_release:FindDocRequest.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:FindDocRequest.query)
}

// optional bytes fields = 5;
bool FindDocRequest::has_fields() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FindDocRequest::set_has_fields() {
  _has_bits_[0] |= 0x00000010u;
}
void FindDocRequest::clear_has_fields() {
  _has_bits_[0] &= ~0x00000010u;
}
void FindDocRequest::clear_fields() {
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fields();
}
const ::std::string& FindDocRequest::fields() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.fields)
  return fields_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_fields(const ::std::string& value) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindDocRequest.fields)
}
void FindDocRequest::set_fields(const char* value) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindDocRequest.fields)
}
void FindDocRequest::set_fields(const void* value, size_t size) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindDocRequest.fields)
}
::std::string* FindDocRequest::mutable_fields() {
  set_has_fields();
  // @@protoc_insertion_point(field_mutable:FindDocRequest.fields)
  return fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindDocRequest::release_fields() {
  // @@protoc_insertion_point(field_release:FindDocRequest.fields)
  clear_has_fields();
  return fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_allocated_fields(::std::string* fields) {
  if (fields != NULL) {
    set_has_fields();
  } else {
    clear_has_fields();
  }
  fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fields);
  // @@protoc_insertion_point(field_set_allocated:FindDocRequest.fields)
}

// optional int32 limit = 6 [default = 1];
bool FindDocRequest::has_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FindDocRequest::set_has_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void FindDocRequest::clear_has_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void FindDocRequest::clear_limit() {
  limit_ = 1;
  clear_has_limit();
}
::google::protobuf::int32 FindDocRequest::limit() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.limit)
  return limit_;
}
void FindDocRequest::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:FindDocRequest.limit)
}

// optional bool seqflag = 7 [default = false];
bool FindDocRequest::has_seqflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FindDocRequest::set_has_seqflag() {
  _has_bits_[0] |= 0x00000040u;
}
void FindDocRequest::clear_has_seqflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void FindDocRequest::clear_seqflag() {
  seqflag_ = false;
  clear_has_seqflag();
}
bool FindDocRequest::seqflag() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.seqflag)
  return seqflag_;
}
void FindDocRequest::set_seqflag(bool value) {
  set_has_seqflag();
  seqflag_ = value;
  // @@protoc_insertion_point(field_set:FindDocRequest.seqflag)
}

// optional bytes seq_key = 8;
bool FindDocRequest::has_seq_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FindDocRequest::set_has_seq_key() {
  _has_bits_[0] |= 0x00000080u;
}
void FindDocRequest::clear_has_seq_key() {
  _has_bits_[0] &= ~0x00000080u;
}
void FindDocRequest::clear_seq_key() {
  seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seq_key();
}
const ::std::string& FindDocRequest::seq_key() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.seq_key)
  return seq_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_seq_key(const ::std::string& value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindDocRequest.seq_key)
}
void FindDocRequest::set_seq_key(const char* value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindDocRequest.seq_key)
}
void FindDocRequest::set_seq_key(const void* value, size_t size) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindDocRequest.seq_key)
}
::std::string* FindDocRequest::mutable_seq_key() {
  set_has_seq_key();
  // @@protoc_insertion_point(field_mutable:FindDocRequest.seq_key)
  return seq_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindDocRequest::release_seq_key() {
  // @@protoc_insertion_point(field_release:FindDocRequest.seq_key)
  clear_has_seq_key();
  return seq_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_allocated_seq_key(::std::string* seq_key) {
  if (seq_key != NULL) {
    set_has_seq_key();
  } else {
    clear_has_seq_key();
  }
  seq_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq_key);
  // @@protoc_insertion_point(field_set_allocated:FindDocRequest.seq_key)
}

// optional bytes sort = 9;
bool FindDocRequest::has_sort() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FindDocRequest::set_has_sort() {
  _has_bits_[0] |= 0x00000100u;
}
void FindDocRequest::clear_has_sort() {
  _has_bits_[0] &= ~0x00000100u;
}
void FindDocRequest::clear_sort() {
  sort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sort();
}
const ::std::string& FindDocRequest::sort() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.sort)
  return sort_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_sort(const ::std::string& value) {
  set_has_sort();
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindDocRequest.sort)
}
void FindDocRequest::set_sort(const char* value) {
  set_has_sort();
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindDocRequest.sort)
}
void FindDocRequest::set_sort(const void* value, size_t size) {
  set_has_sort();
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindDocRequest.sort)
}
::std::string* FindDocRequest::mutable_sort() {
  set_has_sort();
  // @@protoc_insertion_point(field_mutable:FindDocRequest.sort)
  return sort_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindDocRequest::release_sort() {
  // @@protoc_insertion_point(field_release:FindDocRequest.sort)
  clear_has_sort();
  return sort_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_allocated_sort(::std::string* sort) {
  if (sort != NULL) {
    set_has_sort();
  } else {
    clear_has_sort();
  }
  sort_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sort);
  // @@protoc_insertion_point(field_set_allocated:FindDocRequest.sort)
}

// optional int32 read_pref = 10;
bool FindDocRequest::has_read_pref() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FindDocRequest::set_has_read_pref() {
  _has_bits_[0] |= 0x00000200u;
}
void FindDocRequest::clear_has_read_pref() {
  _has_bits_[0] &= ~0x00000200u;
}
void FindDocRequest::clear_read_pref() {
  read_pref_ = 0;
  clear_has_read_pref();
}
::google::protobuf::int32 FindDocRequest::read_pref() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.read_pref)
  return read_pref_;
}
void FindDocRequest::set_read_pref(::google::protobuf::int32 value) {
  set_has_read_pref();
  read_pref_ = value;
  // @@protoc_insertion_point(field_set:FindDocRequest.read_pref)
}

// optional bytes hint = 11;
bool FindDocRequest::has_hint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FindDocRequest::set_has_hint() {
  _has_bits_[0] |= 0x00000400u;
}
void FindDocRequest::clear_has_hint() {
  _has_bits_[0] &= ~0x00000400u;
}
void FindDocRequest::clear_hint() {
  hint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hint();
}
const ::std::string& FindDocRequest::hint() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.hint)
  return hint_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_hint(const ::std::string& value) {
  set_has_hint();
  hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindDocRequest.hint)
}
void FindDocRequest::set_hint(const char* value) {
  set_has_hint();
  hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindDocRequest.hint)
}
void FindDocRequest::set_hint(const void* value, size_t size) {
  set_has_hint();
  hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindDocRequest.hint)
}
::std::string* FindDocRequest::mutable_hint() {
  set_has_hint();
  // @@protoc_insertion_point(field_mutable:FindDocRequest.hint)
  return hint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindDocRequest::release_hint() {
  // @@protoc_insertion_point(field_release:FindDocRequest.hint)
  clear_has_hint();
  return hint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_allocated_hint(::std::string* hint) {
  if (hint != NULL) {
    set_has_hint();
  } else {
    clear_has_hint();
  }
  hint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hint);
  // @@protoc_insertion_point(field_set_allocated:FindDocRequest.hint)
}

// optional bytes skip = 12;
bool FindDocRequest::has_skip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FindDocRequest::set_has_skip() {
  _has_bits_[0] |= 0x00000800u;
}
void FindDocRequest::clear_has_skip() {
  _has_bits_[0] &= ~0x00000800u;
}
void FindDocRequest::clear_skip() {
  skip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_skip();
}
const ::std::string& FindDocRequest::skip() const {
  // @@protoc_insertion_point(field_get:FindDocRequest.skip)
  return skip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_skip(const ::std::string& value) {
  set_has_skip();
  skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindDocRequest.skip)
}
void FindDocRequest::set_skip(const char* value) {
  set_has_skip();
  skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindDocRequest.skip)
}
void FindDocRequest::set_skip(const void* value, size_t size) {
  set_has_skip();
  skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindDocRequest.skip)
}
::std::string* FindDocRequest::mutable_skip() {
  set_has_skip();
  // @@protoc_insertion_point(field_mutable:FindDocRequest.skip)
  return skip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindDocRequest::release_skip() {
  // @@protoc_insertion_point(field_release:FindDocRequest.skip)
  clear_has_skip();
  return skip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindDocRequest::set_allocated_skip(::std::string* skip) {
  if (skip != NULL) {
    set_has_skip();
  } else {
    clear_has_skip();
  }
  skip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skip);
  // @@protoc_insertion_point(field_set_allocated:FindDocRequest.skip)
}

inline const FindDocRequest* FindDocRequest::internal_default_instance() {
  return &FindDocRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountDocRequest::kCallbackIdFieldNumber;
const int CountDocRequest::kDbFieldNumber;
const int CountDocRequest::kCollectionFieldNumber;
const int CountDocRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountDocRequest::CountDocRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CountDocRequest)
}

void CountDocRequest::InitAsDefaultInstance() {
}

CountDocRequest::CountDocRequest(const CountDocRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CountDocRequest)
}

void CountDocRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_id_ = -1;
}

CountDocRequest::~CountDocRequest() {
  // @@protoc_insertion_point(destructor:CountDocRequest)
  SharedDtor();
}

void CountDocRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CountDocRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountDocRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountDocRequest_descriptor_;
}

const CountDocRequest& CountDocRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CountDocRequest> CountDocRequest_default_instance_;

CountDocRequest* CountDocRequest::New(::google::protobuf::Arena* arena) const {
  CountDocRequest* n = new CountDocRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CountDocRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CountDocRequest)
  if (_has_bits_[0 / 32] & 15u) {
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collection()) {
      collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CountDocRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CountDocRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collection;
        break;
      }

      // required bytes collection = 3;
      case 3: {
        if (tag == 26) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }

      // optional bytes query = 4;
      case 4: {
        if (tag == 34) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CountDocRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CountDocRequest)
  return false;
#undef DO_
}

void CountDocRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CountDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->collection(), output);
  }

  // optional bytes query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CountDocRequest)
}

::google::protobuf::uint8* CountDocRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CountDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->collection(), target);
  }

  // optional bytes query = 4;
  if (has_query()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CountDocRequest)
  return target;
}

size_t CountDocRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CountDocRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_collection()) {
    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());
  }

  return total_size;
}
size_t CountDocRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CountDocRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 9u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->query());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountDocRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CountDocRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CountDocRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CountDocRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CountDocRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CountDocRequest)
    UnsafeMergeFrom(*source);
  }
}

void CountDocRequest::MergeFrom(const CountDocRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CountDocRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CountDocRequest::UnsafeMergeFrom(const CountDocRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_collection()) {
      set_has_collection();
      collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
    }
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CountDocRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CountDocRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountDocRequest::CopyFrom(const CountDocRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CountDocRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CountDocRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void CountDocRequest::Swap(CountDocRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountDocRequest::InternalSwap(CountDocRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  collection_.Swap(&other->collection_);
  query_.Swap(&other->query_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CountDocRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountDocRequest_descriptor_;
  metadata.reflection = CountDocRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CountDocRequest

// optional int32 callback_id = 1 [default = -1];
bool CountDocRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CountDocRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CountDocRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CountDocRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 CountDocRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:CountDocRequest.callback_id)
  return callback_id_;
}
void CountDocRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:CountDocRequest.callback_id)
}

// required bytes db = 2;
bool CountDocRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CountDocRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void CountDocRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void CountDocRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& CountDocRequest::db() const {
  // @@protoc_insertion_point(field_get:CountDocRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CountDocRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CountDocRequest.db)
}
void CountDocRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CountDocRequest.db)
}
void CountDocRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CountDocRequest.db)
}
::std::string* CountDocRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:CountDocRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CountDocRequest::release_db() {
  // @@protoc_insertion_point(field_release:CountDocRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CountDocRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:CountDocRequest.db)
}

// required bytes collection = 3;
bool CountDocRequest::has_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CountDocRequest::set_has_collection() {
  _has_bits_[0] |= 0x00000004u;
}
void CountDocRequest::clear_has_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
void CountDocRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection();
}
const ::std::string& CountDocRequest::collection() const {
  // @@protoc_insertion_point(field_get:CountDocRequest.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CountDocRequest::set_collection(const ::std::string& value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CountDocRequest.collection)
}
void CountDocRequest::set_collection(const char* value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CountDocRequest.collection)
}
void CountDocRequest::set_collection(const void* value, size_t size) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CountDocRequest.collection)
}
::std::string* CountDocRequest::mutable_collection() {
  set_has_collection();
  // @@protoc_insertion_point(field_mutable:CountDocRequest.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CountDocRequest::release_collection() {
  // @@protoc_insertion_point(field_release:CountDocRequest.collection)
  clear_has_collection();
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CountDocRequest::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    set_has_collection();
  } else {
    clear_has_collection();
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:CountDocRequest.collection)
}

// optional bytes query = 4;
bool CountDocRequest::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CountDocRequest::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
void CountDocRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
void CountDocRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& CountDocRequest::query() const {
  // @@protoc_insertion_point(field_get:CountDocRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CountDocRequest::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CountDocRequest.query)
}
void CountDocRequest::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CountDocRequest.query)
}
void CountDocRequest::set_query(const void* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CountDocRequest.query)
}
::std::string* CountDocRequest::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:CountDocRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CountDocRequest::release_query() {
  // @@protoc_insertion_point(field_release:CountDocRequest.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CountDocRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:CountDocRequest.query)
}

inline const CountDocRequest* CountDocRequest::internal_default_instance() {
  return &CountDocRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDocRequest::kCallbackIdFieldNumber;
const int UpdateDocRequest::kDbFieldNumber;
const int UpdateDocRequest::kCollectionFieldNumber;
const int UpdateDocRequest::kQueryFieldNumber;
const int UpdateDocRequest::kFieldsFieldNumber;
const int UpdateDocRequest::kUpsertFieldNumber;
const int UpdateDocRequest::kMultiFieldNumber;
const int UpdateDocRequest::kSeqflagFieldNumber;
const int UpdateDocRequest::kSeqKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDocRequest::UpdateDocRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpdateDocRequest)
}

void UpdateDocRequest::InitAsDefaultInstance() {
}

UpdateDocRequest::UpdateDocRequest(const UpdateDocRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UpdateDocRequest)
}

void UpdateDocRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upsert_, 0, reinterpret_cast<char*>(&seqflag_) -
    reinterpret_cast<char*>(&upsert_) + sizeof(seqflag_));
  callback_id_ = -1;
}

UpdateDocRequest::~UpdateDocRequest() {
  // @@protoc_insertion_point(destructor:UpdateDocRequest)
  SharedDtor();
}

void UpdateDocRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateDocRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDocRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDocRequest_descriptor_;
}

const UpdateDocRequest& UpdateDocRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateDocRequest> UpdateDocRequest_default_instance_;

UpdateDocRequest* UpdateDocRequest::New(::google::protobuf::Arena* arena) const {
  UpdateDocRequest* n = new UpdateDocRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDocRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateDocRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpdateDocRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdateDocRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(upsert_, seqflag_);
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collection()) {
      collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fields()) {
      fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_seq_key()) {
    seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpdateDocRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpdateDocRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collection;
        break;
      }

      // required bytes collection = 3;
      case 3: {
        if (tag == 26) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }

      // required bytes query = 4;
      case 4: {
        if (tag == 34) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fields;
        break;
      }

      // required bytes fields = 5;
      case 5: {
        if (tag == 42) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_upsert;
        break;
      }

      // optional bool upsert = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_upsert:
          set_has_upsert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upsert_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multi;
        break;
      }

      // optional bool multi = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_multi:
          set_has_multi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multi_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_seqflag;
        break;
      }

      // optional bool seqflag = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_seqflag:
          set_has_seqflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seqflag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_seq_key;
        break;
      }

      // optional bytes seq_key = 9;
      case 9: {
        if (tag == 74) {
         parse_seq_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seq_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpdateDocRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpdateDocRequest)
  return false;
#undef DO_
}

void UpdateDocRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpdateDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->collection(), output);
  }

  // required bytes query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->query(), output);
  }

  // required bytes fields = 5;
  if (has_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->fields(), output);
  }

  // optional bool upsert = 6 [default = false];
  if (has_upsert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->upsert(), output);
  }

  // optional bool multi = 7 [default = false];
  if (has_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->multi(), output);
  }

  // optional bool seqflag = 8 [default = false];
  if (has_seqflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->seqflag(), output);
  }

  // optional bytes seq_key = 9;
  if (has_seq_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->seq_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpdateDocRequest)
}

::google::protobuf::uint8* UpdateDocRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UpdateDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->collection(), target);
  }

  // required bytes query = 4;
  if (has_query()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->query(), target);
  }

  // required bytes fields = 5;
  if (has_fields()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->fields(), target);
  }

  // optional bool upsert = 6 [default = false];
  if (has_upsert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->upsert(), target);
  }

  // optional bool multi = 7 [default = false];
  if (has_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->multi(), target);
  }

  // optional bool seqflag = 8 [default = false];
  if (has_seqflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->seqflag(), target);
  }

  // optional bytes seq_key = 9;
  if (has_seq_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->seq_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateDocRequest)
  return target;
}

size_t UpdateDocRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UpdateDocRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_collection()) {
    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());
  }

  if (has_query()) {
    // required bytes query = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->query());
  }

  if (has_fields()) {
    // required bytes fields = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fields());
  }

  return total_size;
}
size_t UpdateDocRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateDocRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());

    // required bytes query = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->query());

    // required bytes fields = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fields());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 225u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bool upsert = 6 [default = false];
    if (has_upsert()) {
      total_size += 1 + 1;
    }

    // optional bool multi = 7 [default = false];
    if (has_multi()) {
      total_size += 1 + 1;
    }

    // optional bool seqflag = 8 [default = false];
    if (has_seqflag()) {
      total_size += 1 + 1;
    }

  }
  // optional bytes seq_key = 9;
  if (has_seq_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->seq_key());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDocRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateDocRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateDocRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDocRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateDocRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateDocRequest)
    UnsafeMergeFrom(*source);
  }
}

void UpdateDocRequest::MergeFrom(const UpdateDocRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateDocRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateDocRequest::UnsafeMergeFrom(const UpdateDocRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_collection()) {
      set_has_collection();
      collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
    }
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (from.has_fields()) {
      set_has_fields();
      fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
    }
    if (from.has_upsert()) {
      set_upsert(from.upsert());
    }
    if (from.has_multi()) {
      set_multi(from.multi());
    }
    if (from.has_seqflag()) {
      set_seqflag(from.seqflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seq_key()) {
      set_has_seq_key();
      seq_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UpdateDocRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateDocRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDocRequest::CopyFrom(const UpdateDocRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateDocRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateDocRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void UpdateDocRequest::Swap(UpdateDocRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDocRequest::InternalSwap(UpdateDocRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  collection_.Swap(&other->collection_);
  query_.Swap(&other->query_);
  fields_.Swap(&other->fields_);
  std::swap(upsert_, other->upsert_);
  std::swap(multi_, other->multi_);
  std::swap(seqflag_, other->seqflag_);
  seq_key_.Swap(&other->seq_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDocRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDocRequest_descriptor_;
  metadata.reflection = UpdateDocRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDocRequest

// optional int32 callback_id = 1 [default = -1];
bool UpdateDocRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateDocRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateDocRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateDocRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 UpdateDocRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.callback_id)
  return callback_id_;
}
void UpdateDocRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:UpdateDocRequest.callback_id)
}

// required bytes db = 2;
bool UpdateDocRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateDocRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateDocRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateDocRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& UpdateDocRequest::db() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateDocRequest.db)
}
void UpdateDocRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateDocRequest.db)
}
void UpdateDocRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateDocRequest.db)
}
::std::string* UpdateDocRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:UpdateDocRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDocRequest::release_db() {
  // @@protoc_insertion_point(field_release:UpdateDocRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:UpdateDocRequest.db)
}

// required bytes collection = 3;
bool UpdateDocRequest::has_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpdateDocRequest::set_has_collection() {
  _has_bits_[0] |= 0x00000004u;
}
void UpdateDocRequest::clear_has_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpdateDocRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection();
}
const ::std::string& UpdateDocRequest::collection() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_collection(const ::std::string& value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateDocRequest.collection)
}
void UpdateDocRequest::set_collection(const char* value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateDocRequest.collection)
}
void UpdateDocRequest::set_collection(const void* value, size_t size) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateDocRequest.collection)
}
::std::string* UpdateDocRequest::mutable_collection() {
  set_has_collection();
  // @@protoc_insertion_point(field_mutable:UpdateDocRequest.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDocRequest::release_collection() {
  // @@protoc_insertion_point(field_release:UpdateDocRequest.collection)
  clear_has_collection();
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    set_has_collection();
  } else {
    clear_has_collection();
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:UpdateDocRequest.collection)
}

// required bytes query = 4;
bool UpdateDocRequest::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UpdateDocRequest::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
void UpdateDocRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
void UpdateDocRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& UpdateDocRequest::query() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateDocRequest.query)
}
void UpdateDocRequest::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateDocRequest.query)
}
void UpdateDocRequest::set_query(const void* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateDocRequest.query)
}
::std::string* UpdateDocRequest::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:UpdateDocRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDocRequest::release_query() {
  // @@protoc_insertion_point(field_release:UpdateDocRequest.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:UpdateDocRequest.query)
}

// required bytes fields = 5;
bool UpdateDocRequest::has_fields() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UpdateDocRequest::set_has_fields() {
  _has_bits_[0] |= 0x00000010u;
}
void UpdateDocRequest::clear_has_fields() {
  _has_bits_[0] &= ~0x00000010u;
}
void UpdateDocRequest::clear_fields() {
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fields();
}
const ::std::string& UpdateDocRequest::fields() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.fields)
  return fields_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_fields(const ::std::string& value) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateDocRequest.fields)
}
void UpdateDocRequest::set_fields(const char* value) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateDocRequest.fields)
}
void UpdateDocRequest::set_fields(const void* value, size_t size) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateDocRequest.fields)
}
::std::string* UpdateDocRequest::mutable_fields() {
  set_has_fields();
  // @@protoc_insertion_point(field_mutable:UpdateDocRequest.fields)
  return fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDocRequest::release_fields() {
  // @@protoc_insertion_point(field_release:UpdateDocRequest.fields)
  clear_has_fields();
  return fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_allocated_fields(::std::string* fields) {
  if (fields != NULL) {
    set_has_fields();
  } else {
    clear_has_fields();
  }
  fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fields);
  // @@protoc_insertion_point(field_set_allocated:UpdateDocRequest.fields)
}

// optional bool upsert = 6 [default = false];
bool UpdateDocRequest::has_upsert() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UpdateDocRequest::set_has_upsert() {
  _has_bits_[0] |= 0x00000020u;
}
void UpdateDocRequest::clear_has_upsert() {
  _has_bits_[0] &= ~0x00000020u;
}
void UpdateDocRequest::clear_upsert() {
  upsert_ = false;
  clear_has_upsert();
}
bool UpdateDocRequest::upsert() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.upsert)
  return upsert_;
}
void UpdateDocRequest::set_upsert(bool value) {
  set_has_upsert();
  upsert_ = value;
  // @@protoc_insertion_point(field_set:UpdateDocRequest.upsert)
}

// optional bool multi = 7 [default = false];
bool UpdateDocRequest::has_multi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UpdateDocRequest::set_has_multi() {
  _has_bits_[0] |= 0x00000040u;
}
void UpdateDocRequest::clear_has_multi() {
  _has_bits_[0] &= ~0x00000040u;
}
void UpdateDocRequest::clear_multi() {
  multi_ = false;
  clear_has_multi();
}
bool UpdateDocRequest::multi() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.multi)
  return multi_;
}
void UpdateDocRequest::set_multi(bool value) {
  set_has_multi();
  multi_ = value;
  // @@protoc_insertion_point(field_set:UpdateDocRequest.multi)
}

// optional bool seqflag = 8 [default = false];
bool UpdateDocRequest::has_seqflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UpdateDocRequest::set_has_seqflag() {
  _has_bits_[0] |= 0x00000080u;
}
void UpdateDocRequest::clear_has_seqflag() {
  _has_bits_[0] &= ~0x00000080u;
}
void UpdateDocRequest::clear_seqflag() {
  seqflag_ = false;
  clear_has_seqflag();
}
bool UpdateDocRequest::seqflag() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.seqflag)
  return seqflag_;
}
void UpdateDocRequest::set_seqflag(bool value) {
  set_has_seqflag();
  seqflag_ = value;
  // @@protoc_insertion_point(field_set:UpdateDocRequest.seqflag)
}

// optional bytes seq_key = 9;
bool UpdateDocRequest::has_seq_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UpdateDocRequest::set_has_seq_key() {
  _has_bits_[0] |= 0x00000100u;
}
void UpdateDocRequest::clear_has_seq_key() {
  _has_bits_[0] &= ~0x00000100u;
}
void UpdateDocRequest::clear_seq_key() {
  seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seq_key();
}
const ::std::string& UpdateDocRequest::seq_key() const {
  // @@protoc_insertion_point(field_get:UpdateDocRequest.seq_key)
  return seq_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_seq_key(const ::std::string& value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UpdateDocRequest.seq_key)
}
void UpdateDocRequest::set_seq_key(const char* value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateDocRequest.seq_key)
}
void UpdateDocRequest::set_seq_key(const void* value, size_t size) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateDocRequest.seq_key)
}
::std::string* UpdateDocRequest::mutable_seq_key() {
  set_has_seq_key();
  // @@protoc_insertion_point(field_mutable:UpdateDocRequest.seq_key)
  return seq_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDocRequest::release_seq_key() {
  // @@protoc_insertion_point(field_release:UpdateDocRequest.seq_key)
  clear_has_seq_key();
  return seq_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDocRequest::set_allocated_seq_key(::std::string* seq_key) {
  if (seq_key != NULL) {
    set_has_seq_key();
  } else {
    clear_has_seq_key();
  }
  seq_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq_key);
  // @@protoc_insertion_point(field_set_allocated:UpdateDocRequest.seq_key)
}

inline const UpdateDocRequest* UpdateDocRequest::internal_default_instance() {
  return &UpdateDocRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsertDocRequest::kCallbackIdFieldNumber;
const int InsertDocRequest::kDbFieldNumber;
const int InsertDocRequest::kCollectionFieldNumber;
const int InsertDocRequest::kDocFieldNumber;
const int InsertDocRequest::kSeqflagFieldNumber;
const int InsertDocRequest::kSeqKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsertDocRequest::InsertDocRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:InsertDocRequest)
}

void InsertDocRequest::InitAsDefaultInstance() {
}

InsertDocRequest::InsertDocRequest(const InsertDocRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InsertDocRequest)
}

void InsertDocRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqflag_ = false;
  callback_id_ = -1;
}

InsertDocRequest::~InsertDocRequest() {
  // @@protoc_insertion_point(destructor:InsertDocRequest)
  SharedDtor();
}

void InsertDocRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InsertDocRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertDocRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertDocRequest_descriptor_;
}

const InsertDocRequest& InsertDocRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<InsertDocRequest> InsertDocRequest_default_instance_;

InsertDocRequest* InsertDocRequest::New(::google::protobuf::Arena* arena) const {
  InsertDocRequest* n = new InsertDocRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsertDocRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InsertDocRequest)
  if (_has_bits_[0 / 32] & 63u) {
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collection()) {
      collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_doc()) {
      doc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    seqflag_ = false;
    if (has_seq_key()) {
      seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InsertDocRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InsertDocRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collection;
        break;
      }

      // required bytes collection = 3;
      case 3: {
        if (tag == 26) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_doc;
        break;
      }

      // required bytes doc = 4;
      case 4: {
        if (tag == 34) {
         parse_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_doc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seqflag;
        break;
      }

      // optional bool seqflag = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_seqflag:
          set_has_seqflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seqflag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_seq_key;
        break;
      }

      // optional bytes seq_key = 6;
      case 6: {
        if (tag == 50) {
         parse_seq_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seq_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InsertDocRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InsertDocRequest)
  return false;
#undef DO_
}

void InsertDocRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InsertDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->collection(), output);
  }

  // required bytes doc = 4;
  if (has_doc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->doc(), output);
  }

  // optional bool seqflag = 5 [default = false];
  if (has_seqflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->seqflag(), output);
  }

  // optional bytes seq_key = 6;
  if (has_seq_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->seq_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InsertDocRequest)
}

::google::protobuf::uint8* InsertDocRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InsertDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->collection(), target);
  }

  // required bytes doc = 4;
  if (has_doc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->doc(), target);
  }

  // optional bool seqflag = 5 [default = false];
  if (has_seqflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->seqflag(), target);
  }

  // optional bytes seq_key = 6;
  if (has_seq_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->seq_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InsertDocRequest)
  return target;
}

size_t InsertDocRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InsertDocRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_collection()) {
    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());
  }

  if (has_doc()) {
    // required bytes doc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->doc());
  }

  return total_size;
}
size_t InsertDocRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InsertDocRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());

    // required bytes doc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->doc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 49u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bool seqflag = 5 [default = false];
    if (has_seqflag()) {
      total_size += 1 + 1;
    }

    // optional bytes seq_key = 6;
    if (has_seq_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seq_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertDocRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InsertDocRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InsertDocRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsertDocRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InsertDocRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InsertDocRequest)
    UnsafeMergeFrom(*source);
  }
}

void InsertDocRequest::MergeFrom(const InsertDocRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InsertDocRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void InsertDocRequest::UnsafeMergeFrom(const InsertDocRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_collection()) {
      set_has_collection();
      collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
    }
    if (from.has_doc()) {
      set_has_doc();
      doc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_);
    }
    if (from.has_seqflag()) {
      set_seqflag(from.seqflag());
    }
    if (from.has_seq_key()) {
      set_has_seq_key();
      seq_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void InsertDocRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InsertDocRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertDocRequest::CopyFrom(const InsertDocRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InsertDocRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool InsertDocRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void InsertDocRequest::Swap(InsertDocRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsertDocRequest::InternalSwap(InsertDocRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  collection_.Swap(&other->collection_);
  doc_.Swap(&other->doc_);
  std::swap(seqflag_, other->seqflag_);
  seq_key_.Swap(&other->seq_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsertDocRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertDocRequest_descriptor_;
  metadata.reflection = InsertDocRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsertDocRequest

// optional int32 callback_id = 1 [default = -1];
bool InsertDocRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InsertDocRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InsertDocRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InsertDocRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 InsertDocRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:InsertDocRequest.callback_id)
  return callback_id_;
}
void InsertDocRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:InsertDocRequest.callback_id)
}

// required bytes db = 2;
bool InsertDocRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InsertDocRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void InsertDocRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void InsertDocRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& InsertDocRequest::db() const {
  // @@protoc_insertion_point(field_get:InsertDocRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InsertDocRequest.db)
}
void InsertDocRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InsertDocRequest.db)
}
void InsertDocRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InsertDocRequest.db)
}
::std::string* InsertDocRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:InsertDocRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InsertDocRequest::release_db() {
  // @@protoc_insertion_point(field_release:InsertDocRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:InsertDocRequest.db)
}

// required bytes collection = 3;
bool InsertDocRequest::has_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InsertDocRequest::set_has_collection() {
  _has_bits_[0] |= 0x00000004u;
}
void InsertDocRequest::clear_has_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
void InsertDocRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection();
}
const ::std::string& InsertDocRequest::collection() const {
  // @@protoc_insertion_point(field_get:InsertDocRequest.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocRequest::set_collection(const ::std::string& value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InsertDocRequest.collection)
}
void InsertDocRequest::set_collection(const char* value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InsertDocRequest.collection)
}
void InsertDocRequest::set_collection(const void* value, size_t size) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InsertDocRequest.collection)
}
::std::string* InsertDocRequest::mutable_collection() {
  set_has_collection();
  // @@protoc_insertion_point(field_mutable:InsertDocRequest.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InsertDocRequest::release_collection() {
  // @@protoc_insertion_point(field_release:InsertDocRequest.collection)
  clear_has_collection();
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocRequest::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    set_has_collection();
  } else {
    clear_has_collection();
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:InsertDocRequest.collection)
}

// required bytes doc = 4;
bool InsertDocRequest::has_doc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InsertDocRequest::set_has_doc() {
  _has_bits_[0] |= 0x00000008u;
}
void InsertDocRequest::clear_has_doc() {
  _has_bits_[0] &= ~0x00000008u;
}
void InsertDocRequest::clear_doc() {
  doc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc();
}
const ::std::string& InsertDocRequest::doc() const {
  // @@protoc_insertion_point(field_get:InsertDocRequest.doc)
  return doc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocRequest::set_doc(const ::std::string& value) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InsertDocRequest.doc)
}
void InsertDocRequest::set_doc(const char* value) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InsertDocRequest.doc)
}
void InsertDocRequest::set_doc(const void* value, size_t size) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InsertDocRequest.doc)
}
::std::string* InsertDocRequest::mutable_doc() {
  set_has_doc();
  // @@protoc_insertion_point(field_mutable:InsertDocRequest.doc)
  return doc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InsertDocRequest::release_doc() {
  // @@protoc_insertion_point(field_release:InsertDocRequest.doc)
  clear_has_doc();
  return doc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocRequest::set_allocated_doc(::std::string* doc) {
  if (doc != NULL) {
    set_has_doc();
  } else {
    clear_has_doc();
  }
  doc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc);
  // @@protoc_insertion_point(field_set_allocated:InsertDocRequest.doc)
}

// optional bool seqflag = 5 [default = false];
bool InsertDocRequest::has_seqflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InsertDocRequest::set_has_seqflag() {
  _has_bits_[0] |= 0x00000010u;
}
void InsertDocRequest::clear_has_seqflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void InsertDocRequest::clear_seqflag() {
  seqflag_ = false;
  clear_has_seqflag();
}
bool InsertDocRequest::seqflag() const {
  // @@protoc_insertion_point(field_get:InsertDocRequest.seqflag)
  return seqflag_;
}
void InsertDocRequest::set_seqflag(bool value) {
  set_has_seqflag();
  seqflag_ = value;
  // @@protoc_insertion_point(field_set:InsertDocRequest.seqflag)
}

// optional bytes seq_key = 6;
bool InsertDocRequest::has_seq_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InsertDocRequest::set_has_seq_key() {
  _has_bits_[0] |= 0x00000020u;
}
void InsertDocRequest::clear_has_seq_key() {
  _has_bits_[0] &= ~0x00000020u;
}
void InsertDocRequest::clear_seq_key() {
  seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seq_key();
}
const ::std::string& InsertDocRequest::seq_key() const {
  // @@protoc_insertion_point(field_get:InsertDocRequest.seq_key)
  return seq_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocRequest::set_seq_key(const ::std::string& value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InsertDocRequest.seq_key)
}
void InsertDocRequest::set_seq_key(const char* value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InsertDocRequest.seq_key)
}
void InsertDocRequest::set_seq_key(const void* value, size_t size) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InsertDocRequest.seq_key)
}
::std::string* InsertDocRequest::mutable_seq_key() {
  set_has_seq_key();
  // @@protoc_insertion_point(field_mutable:InsertDocRequest.seq_key)
  return seq_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InsertDocRequest::release_seq_key() {
  // @@protoc_insertion_point(field_release:InsertDocRequest.seq_key)
  clear_has_seq_key();
  return seq_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocRequest::set_allocated_seq_key(::std::string* seq_key) {
  if (seq_key != NULL) {
    set_has_seq_key();
  } else {
    clear_has_seq_key();
  }
  seq_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq_key);
  // @@protoc_insertion_point(field_set_allocated:InsertDocRequest.seq_key)
}

inline const InsertDocRequest* InsertDocRequest::internal_default_instance() {
  return &InsertDocRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDocRequest::kCallbackIdFieldNumber;
const int DeleteDocRequest::kDbFieldNumber;
const int DeleteDocRequest::kCollectionFieldNumber;
const int DeleteDocRequest::kQueryFieldNumber;
const int DeleteDocRequest::kSeqflagFieldNumber;
const int DeleteDocRequest::kSeqKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDocRequest::DeleteDocRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteDocRequest)
}

void DeleteDocRequest::InitAsDefaultInstance() {
}

DeleteDocRequest::DeleteDocRequest(const DeleteDocRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeleteDocRequest)
}

void DeleteDocRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqflag_ = false;
  callback_id_ = -1;
}

DeleteDocRequest::~DeleteDocRequest() {
  // @@protoc_insertion_point(destructor:DeleteDocRequest)
  SharedDtor();
}

void DeleteDocRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteDocRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDocRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDocRequest_descriptor_;
}

const DeleteDocRequest& DeleteDocRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteDocRequest> DeleteDocRequest_default_instance_;

DeleteDocRequest* DeleteDocRequest::New(::google::protobuf::Arena* arena) const {
  DeleteDocRequest* n = new DeleteDocRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteDocRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteDocRequest)
  if (_has_bits_[0 / 32] & 63u) {
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collection()) {
      collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    seqflag_ = false;
    if (has_seq_key()) {
      seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteDocRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeleteDocRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collection;
        break;
      }

      // required bytes collection = 3;
      case 3: {
        if (tag == 26) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }

      // required bytes query = 4;
      case 4: {
        if (tag == 34) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seqflag;
        break;
      }

      // optional bool seqflag = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_seqflag:
          set_has_seqflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seqflag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_seq_key;
        break;
      }

      // optional bytes seq_key = 6;
      case 6: {
        if (tag == 50) {
         parse_seq_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seq_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeleteDocRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeleteDocRequest)
  return false;
#undef DO_
}

void DeleteDocRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeleteDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->collection(), output);
  }

  // required bytes query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->query(), output);
  }

  // optional bool seqflag = 5 [default = false];
  if (has_seqflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->seqflag(), output);
  }

  // optional bytes seq_key = 6;
  if (has_seq_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->seq_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeleteDocRequest)
}

::google::protobuf::uint8* DeleteDocRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeleteDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->collection(), target);
  }

  // required bytes query = 4;
  if (has_query()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->query(), target);
  }

  // optional bool seqflag = 5 [default = false];
  if (has_seqflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->seqflag(), target);
  }

  // optional bytes seq_key = 6;
  if (has_seq_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->seq_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteDocRequest)
  return target;
}

size_t DeleteDocRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeleteDocRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_collection()) {
    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());
  }

  if (has_query()) {
    // required bytes query = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->query());
  }

  return total_size;
}
size_t DeleteDocRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteDocRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());

    // required bytes query = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->query());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 49u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bool seqflag = 5 [default = false];
    if (has_seqflag()) {
      total_size += 1 + 1;
    }

    // optional bytes seq_key = 6;
    if (has_seq_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seq_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDocRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteDocRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteDocRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteDocRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteDocRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteDocRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteDocRequest::MergeFrom(const DeleteDocRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteDocRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteDocRequest::UnsafeMergeFrom(const DeleteDocRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_collection()) {
      set_has_collection();
      collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
    }
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (from.has_seqflag()) {
      set_seqflag(from.seqflag());
    }
    if (from.has_seq_key()) {
      set_has_seq_key();
      seq_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DeleteDocRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteDocRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDocRequest::CopyFrom(const DeleteDocRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteDocRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteDocRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void DeleteDocRequest::Swap(DeleteDocRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDocRequest::InternalSwap(DeleteDocRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  collection_.Swap(&other->collection_);
  query_.Swap(&other->query_);
  std::swap(seqflag_, other->seqflag_);
  seq_key_.Swap(&other->seq_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteDocRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDocRequest_descriptor_;
  metadata.reflection = DeleteDocRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteDocRequest

// optional int32 callback_id = 1 [default = -1];
bool DeleteDocRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteDocRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteDocRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteDocRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 DeleteDocRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:DeleteDocRequest.callback_id)
  return callback_id_;
}
void DeleteDocRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:DeleteDocRequest.callback_id)
}

// required bytes db = 2;
bool DeleteDocRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeleteDocRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void DeleteDocRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeleteDocRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& DeleteDocRequest::db() const {
  // @@protoc_insertion_point(field_get:DeleteDocRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDocRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteDocRequest.db)
}
void DeleteDocRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteDocRequest.db)
}
void DeleteDocRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteDocRequest.db)
}
::std::string* DeleteDocRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:DeleteDocRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteDocRequest::release_db() {
  // @@protoc_insertion_point(field_release:DeleteDocRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDocRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:DeleteDocRequest.db)
}

// required bytes collection = 3;
bool DeleteDocRequest::has_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeleteDocRequest::set_has_collection() {
  _has_bits_[0] |= 0x00000004u;
}
void DeleteDocRequest::clear_has_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeleteDocRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection();
}
const ::std::string& DeleteDocRequest::collection() const {
  // @@protoc_insertion_point(field_get:DeleteDocRequest.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDocRequest::set_collection(const ::std::string& value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteDocRequest.collection)
}
void DeleteDocRequest::set_collection(const char* value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteDocRequest.collection)
}
void DeleteDocRequest::set_collection(const void* value, size_t size) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteDocRequest.collection)
}
::std::string* DeleteDocRequest::mutable_collection() {
  set_has_collection();
  // @@protoc_insertion_point(field_mutable:DeleteDocRequest.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteDocRequest::release_collection() {
  // @@protoc_insertion_point(field_release:DeleteDocRequest.collection)
  clear_has_collection();
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDocRequest::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    set_has_collection();
  } else {
    clear_has_collection();
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:DeleteDocRequest.collection)
}

// required bytes query = 4;
bool DeleteDocRequest::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeleteDocRequest::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
void DeleteDocRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeleteDocRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& DeleteDocRequest::query() const {
  // @@protoc_insertion_point(field_get:DeleteDocRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDocRequest::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteDocRequest.query)
}
void DeleteDocRequest::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteDocRequest.query)
}
void DeleteDocRequest::set_query(const void* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteDocRequest.query)
}
::std::string* DeleteDocRequest::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:DeleteDocRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteDocRequest::release_query() {
  // @@protoc_insertion_point(field_release:DeleteDocRequest.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDocRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:DeleteDocRequest.query)
}

// optional bool seqflag = 5 [default = false];
bool DeleteDocRequest::has_seqflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeleteDocRequest::set_has_seqflag() {
  _has_bits_[0] |= 0x00000010u;
}
void DeleteDocRequest::clear_has_seqflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeleteDocRequest::clear_seqflag() {
  seqflag_ = false;
  clear_has_seqflag();
}
bool DeleteDocRequest::seqflag() const {
  // @@protoc_insertion_point(field_get:DeleteDocRequest.seqflag)
  return seqflag_;
}
void DeleteDocRequest::set_seqflag(bool value) {
  set_has_seqflag();
  seqflag_ = value;
  // @@protoc_insertion_point(field_set:DeleteDocRequest.seqflag)
}

// optional bytes seq_key = 6;
bool DeleteDocRequest::has_seq_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeleteDocRequest::set_has_seq_key() {
  _has_bits_[0] |= 0x00000020u;
}
void DeleteDocRequest::clear_has_seq_key() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeleteDocRequest::clear_seq_key() {
  seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seq_key();
}
const ::std::string& DeleteDocRequest::seq_key() const {
  // @@protoc_insertion_point(field_get:DeleteDocRequest.seq_key)
  return seq_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDocRequest::set_seq_key(const ::std::string& value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteDocRequest.seq_key)
}
void DeleteDocRequest::set_seq_key(const char* value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteDocRequest.seq_key)
}
void DeleteDocRequest::set_seq_key(const void* value, size_t size) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteDocRequest.seq_key)
}
::std::string* DeleteDocRequest::mutable_seq_key() {
  set_has_seq_key();
  // @@protoc_insertion_point(field_mutable:DeleteDocRequest.seq_key)
  return seq_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteDocRequest::release_seq_key() {
  // @@protoc_insertion_point(field_release:DeleteDocRequest.seq_key)
  clear_has_seq_key();
  return seq_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteDocRequest::set_allocated_seq_key(::std::string* seq_key) {
  if (seq_key != NULL) {
    set_has_seq_key();
  } else {
    clear_has_seq_key();
  }
  seq_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq_key);
  // @@protoc_insertion_point(field_set_allocated:DeleteDocRequest.seq_key)
}

inline const DeleteDocRequest* DeleteDocRequest::internal_default_instance() {
  return &DeleteDocRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindAndModifyDocRequest::kCallbackIdFieldNumber;
const int FindAndModifyDocRequest::kDbFieldNumber;
const int FindAndModifyDocRequest::kCollectionFieldNumber;
const int FindAndModifyDocRequest::kQueryFieldNumber;
const int FindAndModifyDocRequest::kFieldsFieldNumber;
const int FindAndModifyDocRequest::kUpdateFieldNumber;
const int FindAndModifyDocRequest::kUpsertFieldNumber;
const int FindAndModifyDocRequest::kNewFieldNumber;
const int FindAndModifyDocRequest::kSeqflagFieldNumber;
const int FindAndModifyDocRequest::kSeqKeyFieldNumber;
const int FindAndModifyDocRequest::kRemoveFieldNumber;
const int FindAndModifyDocRequest::kSortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindAndModifyDocRequest::FindAndModifyDocRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FindAndModifyDocRequest)
}

void FindAndModifyDocRequest::InitAsDefaultInstance() {
}

FindAndModifyDocRequest::FindAndModifyDocRequest(const FindAndModifyDocRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FindAndModifyDocRequest)
}

void FindAndModifyDocRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upsert_, 0, reinterpret_cast<char*>(&remove_) -
    reinterpret_cast<char*>(&upsert_) + sizeof(remove_));
  callback_id_ = -1;
}

FindAndModifyDocRequest::~FindAndModifyDocRequest() {
  // @@protoc_insertion_point(destructor:FindAndModifyDocRequest)
  SharedDtor();
}

void FindAndModifyDocRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FindAndModifyDocRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindAndModifyDocRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindAndModifyDocRequest_descriptor_;
}

const FindAndModifyDocRequest& FindAndModifyDocRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FindAndModifyDocRequest> FindAndModifyDocRequest_default_instance_;

FindAndModifyDocRequest* FindAndModifyDocRequest::New(::google::protobuf::Arena* arena) const {
  FindAndModifyDocRequest* n = new FindAndModifyDocRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindAndModifyDocRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FindAndModifyDocRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FindAndModifyDocRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FindAndModifyDocRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(upsert_, new__);
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collection()) {
      collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fields()) {
      fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_update()) {
      update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(seqflag_, remove_);
    if (has_seq_key()) {
      seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sort()) {
      sort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FindAndModifyDocRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FindAndModifyDocRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collection;
        break;
      }

      // required bytes collection = 3;
      case 3: {
        if (tag == 26) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }

      // required bytes query = 4;
      case 4: {
        if (tag == 34) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fields;
        break;
      }

      // optional bytes fields = 5;
      case 5: {
        if (tag == 42) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_update;
        break;
      }

      // optional bytes update = 6;
      case 6: {
        if (tag == 50) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_upsert;
        break;
      }

      // optional bool upsert = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_upsert:
          set_has_upsert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upsert_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_new;
        break;
      }

      // optional bool new = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_new:
          set_has_new_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new__)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_seqflag;
        break;
      }

      // optional bool seqflag = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_seqflag:
          set_has_seqflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seqflag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_seq_key;
        break;
      }

      // optional bytes seq_key = 10;
      case 10: {
        if (tag == 82) {
         parse_seq_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seq_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_remove;
        break;
      }

      // optional bool remove = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_remove:
          set_has_remove();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sort;
        break;
      }

      // optional bytes sort = 12;
      case 12: {
        if (tag == 98) {
         parse_sort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sort()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FindAndModifyDocRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FindAndModifyDocRequest)
  return false;
#undef DO_
}

void FindAndModifyDocRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FindAndModifyDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->collection(), output);
  }

  // required bytes query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->query(), output);
  }

  // optional bytes fields = 5;
  if (has_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->fields(), output);
  }

  // optional bytes update = 6;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->update(), output);
  }

  // optional bool upsert = 7 [default = false];
  if (has_upsert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->upsert(), output);
  }

  // optional bool new = 8 [default = false];
  if (has_new_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->new_(), output);
  }

  // optional bool seqflag = 9 [default = false];
  if (has_seqflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->seqflag(), output);
  }

  // optional bytes seq_key = 10;
  if (has_seq_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->seq_key(), output);
  }

  // optional bool remove = 11 [default = false];
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->remove(), output);
  }

  // optional bytes sort = 12;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->sort(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FindAndModifyDocRequest)
}

::google::protobuf::uint8* FindAndModifyDocRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FindAndModifyDocRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->collection(), target);
  }

  // required bytes query = 4;
  if (has_query()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->query(), target);
  }

  // optional bytes fields = 5;
  if (has_fields()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->fields(), target);
  }

  // optional bytes update = 6;
  if (has_update()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->update(), target);
  }

  // optional bool upsert = 7 [default = false];
  if (has_upsert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->upsert(), target);
  }

  // optional bool new = 8 [default = false];
  if (has_new_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->new_(), target);
  }

  // optional bool seqflag = 9 [default = false];
  if (has_seqflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->seqflag(), target);
  }

  // optional bytes seq_key = 10;
  if (has_seq_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->seq_key(), target);
  }

  // optional bool remove = 11 [default = false];
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->remove(), target);
  }

  // optional bytes sort = 12;
  if (has_sort()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sort(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FindAndModifyDocRequest)
  return target;
}

size_t FindAndModifyDocRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FindAndModifyDocRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_collection()) {
    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());
  }

  if (has_query()) {
    // required bytes query = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->query());
  }

  return total_size;
}
size_t FindAndModifyDocRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FindAndModifyDocRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());

    // required bytes query = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->query());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 241u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes fields = 5;
    if (has_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fields());
    }

    // optional bytes update = 6;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update());
    }

    // optional bool upsert = 7 [default = false];
    if (has_upsert()) {
      total_size += 1 + 1;
    }

    // optional bool new = 8 [default = false];
    if (has_new_()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool seqflag = 9 [default = false];
    if (has_seqflag()) {
      total_size += 1 + 1;
    }

    // optional bytes seq_key = 10;
    if (has_seq_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seq_key());
    }

    // optional bool remove = 11 [default = false];
    if (has_remove()) {
      total_size += 1 + 1;
    }

    // optional bytes sort = 12;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sort());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindAndModifyDocRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FindAndModifyDocRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FindAndModifyDocRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindAndModifyDocRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FindAndModifyDocRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FindAndModifyDocRequest)
    UnsafeMergeFrom(*source);
  }
}

void FindAndModifyDocRequest::MergeFrom(const FindAndModifyDocRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FindAndModifyDocRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FindAndModifyDocRequest::UnsafeMergeFrom(const FindAndModifyDocRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_collection()) {
      set_has_collection();
      collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
    }
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (from.has_fields()) {
      set_has_fields();
      fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
    }
    if (from.has_update()) {
      set_has_update();
      update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_);
    }
    if (from.has_upsert()) {
      set_upsert(from.upsert());
    }
    if (from.has_new_()) {
      set_new_(from.new_());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seqflag()) {
      set_seqflag(from.seqflag());
    }
    if (from.has_seq_key()) {
      set_has_seq_key();
      seq_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq_key_);
    }
    if (from.has_remove()) {
      set_remove(from.remove());
    }
    if (from.has_sort()) {
      set_has_sort();
      sort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FindAndModifyDocRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FindAndModifyDocRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindAndModifyDocRequest::CopyFrom(const FindAndModifyDocRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FindAndModifyDocRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FindAndModifyDocRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void FindAndModifyDocRequest::Swap(FindAndModifyDocRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindAndModifyDocRequest::InternalSwap(FindAndModifyDocRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  collection_.Swap(&other->collection_);
  query_.Swap(&other->query_);
  fields_.Swap(&other->fields_);
  update_.Swap(&other->update_);
  std::swap(upsert_, other->upsert_);
  std::swap(new__, other->new__);
  std::swap(seqflag_, other->seqflag_);
  seq_key_.Swap(&other->seq_key_);
  std::swap(remove_, other->remove_);
  sort_.Swap(&other->sort_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindAndModifyDocRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindAndModifyDocRequest_descriptor_;
  metadata.reflection = FindAndModifyDocRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindAndModifyDocRequest

// optional int32 callback_id = 1 [default = -1];
bool FindAndModifyDocRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FindAndModifyDocRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FindAndModifyDocRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FindAndModifyDocRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 FindAndModifyDocRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.callback_id)
  return callback_id_;
}
void FindAndModifyDocRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.callback_id)
}

// required bytes db = 2;
bool FindAndModifyDocRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FindAndModifyDocRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void FindAndModifyDocRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void FindAndModifyDocRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& FindAndModifyDocRequest::db() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.db)
}
void FindAndModifyDocRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindAndModifyDocRequest.db)
}
void FindAndModifyDocRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindAndModifyDocRequest.db)
}
::std::string* FindAndModifyDocRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:FindAndModifyDocRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindAndModifyDocRequest::release_db() {
  // @@protoc_insertion_point(field_release:FindAndModifyDocRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:FindAndModifyDocRequest.db)
}

// required bytes collection = 3;
bool FindAndModifyDocRequest::has_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FindAndModifyDocRequest::set_has_collection() {
  _has_bits_[0] |= 0x00000004u;
}
void FindAndModifyDocRequest::clear_has_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
void FindAndModifyDocRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection();
}
const ::std::string& FindAndModifyDocRequest::collection() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_collection(const ::std::string& value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.collection)
}
void FindAndModifyDocRequest::set_collection(const char* value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindAndModifyDocRequest.collection)
}
void FindAndModifyDocRequest::set_collection(const void* value, size_t size) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindAndModifyDocRequest.collection)
}
::std::string* FindAndModifyDocRequest::mutable_collection() {
  set_has_collection();
  // @@protoc_insertion_point(field_mutable:FindAndModifyDocRequest.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindAndModifyDocRequest::release_collection() {
  // @@protoc_insertion_point(field_release:FindAndModifyDocRequest.collection)
  clear_has_collection();
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    set_has_collection();
  } else {
    clear_has_collection();
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:FindAndModifyDocRequest.collection)
}

// required bytes query = 4;
bool FindAndModifyDocRequest::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FindAndModifyDocRequest::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
void FindAndModifyDocRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
void FindAndModifyDocRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& FindAndModifyDocRequest::query() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.query)
}
void FindAndModifyDocRequest::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindAndModifyDocRequest.query)
}
void FindAndModifyDocRequest::set_query(const void* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindAndModifyDocRequest.query)
}
::std::string* FindAndModifyDocRequest::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:FindAndModifyDocRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindAndModifyDocRequest::release_query() {
  // @@protoc_insertion_point(field_release:FindAndModifyDocRequest.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:FindAndModifyDocRequest.query)
}

// optional bytes fields = 5;
bool FindAndModifyDocRequest::has_fields() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FindAndModifyDocRequest::set_has_fields() {
  _has_bits_[0] |= 0x00000010u;
}
void FindAndModifyDocRequest::clear_has_fields() {
  _has_bits_[0] &= ~0x00000010u;
}
void FindAndModifyDocRequest::clear_fields() {
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fields();
}
const ::std::string& FindAndModifyDocRequest::fields() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.fields)
  return fields_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_fields(const ::std::string& value) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.fields)
}
void FindAndModifyDocRequest::set_fields(const char* value) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindAndModifyDocRequest.fields)
}
void FindAndModifyDocRequest::set_fields(const void* value, size_t size) {
  set_has_fields();
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindAndModifyDocRequest.fields)
}
::std::string* FindAndModifyDocRequest::mutable_fields() {
  set_has_fields();
  // @@protoc_insertion_point(field_mutable:FindAndModifyDocRequest.fields)
  return fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindAndModifyDocRequest::release_fields() {
  // @@protoc_insertion_point(field_release:FindAndModifyDocRequest.fields)
  clear_has_fields();
  return fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_allocated_fields(::std::string* fields) {
  if (fields != NULL) {
    set_has_fields();
  } else {
    clear_has_fields();
  }
  fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fields);
  // @@protoc_insertion_point(field_set_allocated:FindAndModifyDocRequest.fields)
}

// optional bytes update = 6;
bool FindAndModifyDocRequest::has_update() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FindAndModifyDocRequest::set_has_update() {
  _has_bits_[0] |= 0x00000020u;
}
void FindAndModifyDocRequest::clear_has_update() {
  _has_bits_[0] &= ~0x00000020u;
}
void FindAndModifyDocRequest::clear_update() {
  update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_update();
}
const ::std::string& FindAndModifyDocRequest::update() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.update)
  return update_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_update(const ::std::string& value) {
  set_has_update();
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.update)
}
void FindAndModifyDocRequest::set_update(const char* value) {
  set_has_update();
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindAndModifyDocRequest.update)
}
void FindAndModifyDocRequest::set_update(const void* value, size_t size) {
  set_has_update();
  update_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindAndModifyDocRequest.update)
}
::std::string* FindAndModifyDocRequest::mutable_update() {
  set_has_update();
  // @@protoc_insertion_point(field_mutable:FindAndModifyDocRequest.update)
  return update_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindAndModifyDocRequest::release_update() {
  // @@protoc_insertion_point(field_release:FindAndModifyDocRequest.update)
  clear_has_update();
  return update_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_allocated_update(::std::string* update) {
  if (update != NULL) {
    set_has_update();
  } else {
    clear_has_update();
  }
  update_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update);
  // @@protoc_insertion_point(field_set_allocated:FindAndModifyDocRequest.update)
}

// optional bool upsert = 7 [default = false];
bool FindAndModifyDocRequest::has_upsert() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FindAndModifyDocRequest::set_has_upsert() {
  _has_bits_[0] |= 0x00000040u;
}
void FindAndModifyDocRequest::clear_has_upsert() {
  _has_bits_[0] &= ~0x00000040u;
}
void FindAndModifyDocRequest::clear_upsert() {
  upsert_ = false;
  clear_has_upsert();
}
bool FindAndModifyDocRequest::upsert() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.upsert)
  return upsert_;
}
void FindAndModifyDocRequest::set_upsert(bool value) {
  set_has_upsert();
  upsert_ = value;
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.upsert)
}

// optional bool new = 8 [default = false];
bool FindAndModifyDocRequest::has_new_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FindAndModifyDocRequest::set_has_new_() {
  _has_bits_[0] |= 0x00000080u;
}
void FindAndModifyDocRequest::clear_has_new_() {
  _has_bits_[0] &= ~0x00000080u;
}
void FindAndModifyDocRequest::clear_new_() {
  new__ = false;
  clear_has_new_();
}
bool FindAndModifyDocRequest::new_() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.new)
  return new__;
}
void FindAndModifyDocRequest::set_new_(bool value) {
  set_has_new_();
  new__ = value;
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.new)
}

// optional bool seqflag = 9 [default = false];
bool FindAndModifyDocRequest::has_seqflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FindAndModifyDocRequest::set_has_seqflag() {
  _has_bits_[0] |= 0x00000100u;
}
void FindAndModifyDocRequest::clear_has_seqflag() {
  _has_bits_[0] &= ~0x00000100u;
}
void FindAndModifyDocRequest::clear_seqflag() {
  seqflag_ = false;
  clear_has_seqflag();
}
bool FindAndModifyDocRequest::seqflag() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.seqflag)
  return seqflag_;
}
void FindAndModifyDocRequest::set_seqflag(bool value) {
  set_has_seqflag();
  seqflag_ = value;
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.seqflag)
}

// optional bytes seq_key = 10;
bool FindAndModifyDocRequest::has_seq_key() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FindAndModifyDocRequest::set_has_seq_key() {
  _has_bits_[0] |= 0x00000200u;
}
void FindAndModifyDocRequest::clear_has_seq_key() {
  _has_bits_[0] &= ~0x00000200u;
}
void FindAndModifyDocRequest::clear_seq_key() {
  seq_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seq_key();
}
const ::std::string& FindAndModifyDocRequest::seq_key() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.seq_key)
  return seq_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_seq_key(const ::std::string& value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.seq_key)
}
void FindAndModifyDocRequest::set_seq_key(const char* value) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindAndModifyDocRequest.seq_key)
}
void FindAndModifyDocRequest::set_seq_key(const void* value, size_t size) {
  set_has_seq_key();
  seq_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindAndModifyDocRequest.seq_key)
}
::std::string* FindAndModifyDocRequest::mutable_seq_key() {
  set_has_seq_key();
  // @@protoc_insertion_point(field_mutable:FindAndModifyDocRequest.seq_key)
  return seq_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindAndModifyDocRequest::release_seq_key() {
  // @@protoc_insertion_point(field_release:FindAndModifyDocRequest.seq_key)
  clear_has_seq_key();
  return seq_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_allocated_seq_key(::std::string* seq_key) {
  if (seq_key != NULL) {
    set_has_seq_key();
  } else {
    clear_has_seq_key();
  }
  seq_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq_key);
  // @@protoc_insertion_point(field_set_allocated:FindAndModifyDocRequest.seq_key)
}

// optional bool remove = 11 [default = false];
bool FindAndModifyDocRequest::has_remove() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FindAndModifyDocRequest::set_has_remove() {
  _has_bits_[0] |= 0x00000400u;
}
void FindAndModifyDocRequest::clear_has_remove() {
  _has_bits_[0] &= ~0x00000400u;
}
void FindAndModifyDocRequest::clear_remove() {
  remove_ = false;
  clear_has_remove();
}
bool FindAndModifyDocRequest::remove() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.remove)
  return remove_;
}
void FindAndModifyDocRequest::set_remove(bool value) {
  set_has_remove();
  remove_ = value;
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.remove)
}

// optional bytes sort = 12;
bool FindAndModifyDocRequest::has_sort() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FindAndModifyDocRequest::set_has_sort() {
  _has_bits_[0] |= 0x00000800u;
}
void FindAndModifyDocRequest::clear_has_sort() {
  _has_bits_[0] &= ~0x00000800u;
}
void FindAndModifyDocRequest::clear_sort() {
  sort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sort();
}
const ::std::string& FindAndModifyDocRequest::sort() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocRequest.sort)
  return sort_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_sort(const ::std::string& value) {
  set_has_sort();
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindAndModifyDocRequest.sort)
}
void FindAndModifyDocRequest::set_sort(const char* value) {
  set_has_sort();
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindAndModifyDocRequest.sort)
}
void FindAndModifyDocRequest::set_sort(const void* value, size_t size) {
  set_has_sort();
  sort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindAndModifyDocRequest.sort)
}
::std::string* FindAndModifyDocRequest::mutable_sort() {
  set_has_sort();
  // @@protoc_insertion_point(field_mutable:FindAndModifyDocRequest.sort)
  return sort_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindAndModifyDocRequest::release_sort() {
  // @@protoc_insertion_point(field_release:FindAndModifyDocRequest.sort)
  clear_has_sort();
  return sort_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocRequest::set_allocated_sort(::std::string* sort) {
  if (sort != NULL) {
    set_has_sort();
  } else {
    clear_has_sort();
  }
  sort_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sort);
  // @@protoc_insertion_point(field_set_allocated:FindAndModifyDocRequest.sort)
}

inline const FindAndModifyDocRequest* FindAndModifyDocRequest::internal_default_instance() {
  return &FindAndModifyDocRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunProcedureRequest::kCallbackIdFieldNumber;
const int RunProcedureRequest::kDbFieldNumber;
const int RunProcedureRequest::kProcFieldNumber;
const int RunProcedureRequest::kArgsFieldNumber;
const int RunProcedureRequest::kKwargsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunProcedureRequest::RunProcedureRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:RunProcedureRequest)
}

void RunProcedureRequest::InitAsDefaultInstance() {
}

RunProcedureRequest::RunProcedureRequest(const RunProcedureRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RunProcedureRequest)
}

void RunProcedureRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kwargs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_id_ = -1;
}

RunProcedureRequest::~RunProcedureRequest() {
  // @@protoc_insertion_point(destructor:RunProcedureRequest)
  SharedDtor();
}

void RunProcedureRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kwargs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RunProcedureRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunProcedureRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunProcedureRequest_descriptor_;
}

const RunProcedureRequest& RunProcedureRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RunProcedureRequest> RunProcedureRequest_default_instance_;

RunProcedureRequest* RunProcedureRequest::New(::google::protobuf::Arena* arena) const {
  RunProcedureRequest* n = new RunProcedureRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunProcedureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RunProcedureRequest)
  if (_has_bits_[0 / 32] & 31u) {
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_proc()) {
      proc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_args()) {
      args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_kwargs()) {
      kwargs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RunProcedureRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RunProcedureRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_proc;
        break;
      }

      // required bytes proc = 4;
      case 4: {
        if (tag == 34) {
         parse_proc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_args;
        break;
      }

      // optional bytes args = 5;
      case 5: {
        if (tag == 42) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_kwargs;
        break;
      }

      // optional bytes kwargs = 6;
      case 6: {
        if (tag == 50) {
         parse_kwargs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kwargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RunProcedureRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RunProcedureRequest)
  return false;
#undef DO_
}

void RunProcedureRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RunProcedureRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes proc = 4;
  if (has_proc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->proc(), output);
  }

  // optional bytes args = 5;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->args(), output);
  }

  // optional bytes kwargs = 6;
  if (has_kwargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->kwargs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RunProcedureRequest)
}

::google::protobuf::uint8* RunProcedureRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RunProcedureRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes proc = 4;
  if (has_proc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->proc(), target);
  }

  // optional bytes args = 5;
  if (has_args()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->args(), target);
  }

  // optional bytes kwargs = 6;
  if (has_kwargs()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->kwargs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RunProcedureRequest)
  return target;
}

size_t RunProcedureRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RunProcedureRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_proc()) {
    // required bytes proc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proc());
  }

  return total_size;
}
size_t RunProcedureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RunProcedureRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes proc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 25u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes args = 5;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->args());
    }

    // optional bytes kwargs = 6;
    if (has_kwargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kwargs());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunProcedureRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RunProcedureRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RunProcedureRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunProcedureRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RunProcedureRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RunProcedureRequest)
    UnsafeMergeFrom(*source);
  }
}

void RunProcedureRequest::MergeFrom(const RunProcedureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RunProcedureRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RunProcedureRequest::UnsafeMergeFrom(const RunProcedureRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_proc()) {
      set_has_proc();
      proc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_);
    }
    if (from.has_args()) {
      set_has_args();
      args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
    }
    if (from.has_kwargs()) {
      set_has_kwargs();
      kwargs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kwargs_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RunProcedureRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RunProcedureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunProcedureRequest::CopyFrom(const RunProcedureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RunProcedureRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RunProcedureRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void RunProcedureRequest::Swap(RunProcedureRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunProcedureRequest::InternalSwap(RunProcedureRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  proc_.Swap(&other->proc_);
  args_.Swap(&other->args_);
  kwargs_.Swap(&other->kwargs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunProcedureRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunProcedureRequest_descriptor_;
  metadata.reflection = RunProcedureRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunProcedureRequest

// optional int32 callback_id = 1 [default = -1];
bool RunProcedureRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RunProcedureRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RunProcedureRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RunProcedureRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 RunProcedureRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:RunProcedureRequest.callback_id)
  return callback_id_;
}
void RunProcedureRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:RunProcedureRequest.callback_id)
}

// required bytes db = 2;
bool RunProcedureRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RunProcedureRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void RunProcedureRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void RunProcedureRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& RunProcedureRequest::db() const {
  // @@protoc_insertion_point(field_get:RunProcedureRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RunProcedureRequest.db)
}
void RunProcedureRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RunProcedureRequest.db)
}
void RunProcedureRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RunProcedureRequest.db)
}
::std::string* RunProcedureRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:RunProcedureRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunProcedureRequest::release_db() {
  // @@protoc_insertion_point(field_release:RunProcedureRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:RunProcedureRequest.db)
}

// required bytes proc = 4;
bool RunProcedureRequest::has_proc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RunProcedureRequest::set_has_proc() {
  _has_bits_[0] |= 0x00000004u;
}
void RunProcedureRequest::clear_has_proc() {
  _has_bits_[0] &= ~0x00000004u;
}
void RunProcedureRequest::clear_proc() {
  proc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc();
}
const ::std::string& RunProcedureRequest::proc() const {
  // @@protoc_insertion_point(field_get:RunProcedureRequest.proc)
  return proc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureRequest::set_proc(const ::std::string& value) {
  set_has_proc();
  proc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RunProcedureRequest.proc)
}
void RunProcedureRequest::set_proc(const char* value) {
  set_has_proc();
  proc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RunProcedureRequest.proc)
}
void RunProcedureRequest::set_proc(const void* value, size_t size) {
  set_has_proc();
  proc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RunProcedureRequest.proc)
}
::std::string* RunProcedureRequest::mutable_proc() {
  set_has_proc();
  // @@protoc_insertion_point(field_mutable:RunProcedureRequest.proc)
  return proc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunProcedureRequest::release_proc() {
  // @@protoc_insertion_point(field_release:RunProcedureRequest.proc)
  clear_has_proc();
  return proc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureRequest::set_allocated_proc(::std::string* proc) {
  if (proc != NULL) {
    set_has_proc();
  } else {
    clear_has_proc();
  }
  proc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc);
  // @@protoc_insertion_point(field_set_allocated:RunProcedureRequest.proc)
}

// optional bytes args = 5;
bool RunProcedureRequest::has_args() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RunProcedureRequest::set_has_args() {
  _has_bits_[0] |= 0x00000008u;
}
void RunProcedureRequest::clear_has_args() {
  _has_bits_[0] &= ~0x00000008u;
}
void RunProcedureRequest::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_args();
}
const ::std::string& RunProcedureRequest::args() const {
  // @@protoc_insertion_point(field_get:RunProcedureRequest.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureRequest::set_args(const ::std::string& value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RunProcedureRequest.args)
}
void RunProcedureRequest::set_args(const char* value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RunProcedureRequest.args)
}
void RunProcedureRequest::set_args(const void* value, size_t size) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RunProcedureRequest.args)
}
::std::string* RunProcedureRequest::mutable_args() {
  set_has_args();
  // @@protoc_insertion_point(field_mutable:RunProcedureRequest.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunProcedureRequest::release_args() {
  // @@protoc_insertion_point(field_release:RunProcedureRequest.args)
  clear_has_args();
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureRequest::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    set_has_args();
  } else {
    clear_has_args();
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:RunProcedureRequest.args)
}

// optional bytes kwargs = 6;
bool RunProcedureRequest::has_kwargs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RunProcedureRequest::set_has_kwargs() {
  _has_bits_[0] |= 0x00000010u;
}
void RunProcedureRequest::clear_has_kwargs() {
  _has_bits_[0] &= ~0x00000010u;
}
void RunProcedureRequest::clear_kwargs() {
  kwargs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kwargs();
}
const ::std::string& RunProcedureRequest::kwargs() const {
  // @@protoc_insertion_point(field_get:RunProcedureRequest.kwargs)
  return kwargs_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureRequest::set_kwargs(const ::std::string& value) {
  set_has_kwargs();
  kwargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RunProcedureRequest.kwargs)
}
void RunProcedureRequest::set_kwargs(const char* value) {
  set_has_kwargs();
  kwargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RunProcedureRequest.kwargs)
}
void RunProcedureRequest::set_kwargs(const void* value, size_t size) {
  set_has_kwargs();
  kwargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RunProcedureRequest.kwargs)
}
::std::string* RunProcedureRequest::mutable_kwargs() {
  set_has_kwargs();
  // @@protoc_insertion_point(field_mutable:RunProcedureRequest.kwargs)
  return kwargs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunProcedureRequest::release_kwargs() {
  // @@protoc_insertion_point(field_release:RunProcedureRequest.kwargs)
  clear_has_kwargs();
  return kwargs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureRequest::set_allocated_kwargs(::std::string* kwargs) {
  if (kwargs != NULL) {
    set_has_kwargs();
  } else {
    clear_has_kwargs();
  }
  kwargs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kwargs);
  // @@protoc_insertion_point(field_set_allocated:RunProcedureRequest.kwargs)
}

inline const RunProcedureRequest* RunProcedureRequest::internal_default_instance() {
  return &RunProcedureRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OperIndexRequest_OperType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperIndexRequest_OperType_descriptor_;
}
bool OperIndexRequest_OperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OperIndexRequest_OperType OperIndexRequest::ENSURE;
const OperIndexRequest_OperType OperIndexRequest::DROP;
const OperIndexRequest_OperType OperIndexRequest::RESET;
const OperIndexRequest_OperType OperIndexRequest::OperType_MIN;
const OperIndexRequest_OperType OperIndexRequest::OperType_MAX;
const int OperIndexRequest::OperType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperIndexRequest::kCallbackIdFieldNumber;
const int OperIndexRequest::kDbFieldNumber;
const int OperIndexRequest::kCollectionFieldNumber;
const int OperIndexRequest::kTypeFieldNumber;
const int OperIndexRequest::kQueryFieldNumber;
const int OperIndexRequest::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperIndexRequest::OperIndexRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperIndexRequest)
}

void OperIndexRequest::InitAsDefaultInstance() {
}

OperIndexRequest::OperIndexRequest(const OperIndexRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OperIndexRequest)
}

void OperIndexRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  callback_id_ = -1;
}

OperIndexRequest::~OperIndexRequest() {
  // @@protoc_insertion_point(destructor:OperIndexRequest)
  SharedDtor();
}

void OperIndexRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperIndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperIndexRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperIndexRequest_descriptor_;
}

const OperIndexRequest& OperIndexRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OperIndexRequest> OperIndexRequest_default_instance_;

OperIndexRequest* OperIndexRequest::New(::google::protobuf::Arena* arena) const {
  OperIndexRequest* n = new OperIndexRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:OperIndexRequest)
  if (_has_bits_[0 / 32] & 63u) {
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collection()) {
      collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 0;
    if (has_query()) {
      query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OperIndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperIndexRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collection;
        break;
      }

      // required bytes collection = 3;
      case 3: {
        if (tag == 26) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .OperIndexRequest.OperType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OperIndexRequest_OperType_IsValid(value)) {
            set_type(static_cast< ::OperIndexRequest_OperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_query;
        break;
      }

      // optional bytes query = 5;
      case 5: {
        if (tag == 42) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // optional bytes desc = 6;
      case 6: {
        if (tag == 50) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperIndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperIndexRequest)
  return false;
#undef DO_
}

void OperIndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperIndexRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->collection(), output);
  }

  // required .OperIndexRequest.OperType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional bytes query = 5;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->query(), output);
  }

  // optional bytes desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperIndexRequest)
}

::google::protobuf::uint8* OperIndexRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OperIndexRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes collection = 3;
  if (has_collection()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->collection(), target);
  }

  // required .OperIndexRequest.OperType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional bytes query = 5;
  if (has_query()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->query(), target);
  }

  // optional bytes desc = 6;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperIndexRequest)
  return target;
}

size_t OperIndexRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OperIndexRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_collection()) {
    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());
  }

  if (has_type()) {
    // required .OperIndexRequest.OperType type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t OperIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperIndexRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes collection = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());

    // required .OperIndexRequest.OperType type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 49u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes query = 5;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->query());
    }

    // optional bytes desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperIndexRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OperIndexRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OperIndexRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperIndexRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OperIndexRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OperIndexRequest)
    UnsafeMergeFrom(*source);
  }
}

void OperIndexRequest::MergeFrom(const OperIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OperIndexRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OperIndexRequest::UnsafeMergeFrom(const OperIndexRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_collection()) {
      set_has_collection();
      collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_query()) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void OperIndexRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OperIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperIndexRequest::CopyFrom(const OperIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperIndexRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OperIndexRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void OperIndexRequest::Swap(OperIndexRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperIndexRequest::InternalSwap(OperIndexRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  collection_.Swap(&other->collection_);
  std::swap(type_, other->type_);
  query_.Swap(&other->query_);
  desc_.Swap(&other->desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperIndexRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperIndexRequest_descriptor_;
  metadata.reflection = OperIndexRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperIndexRequest

// optional int32 callback_id = 1 [default = -1];
bool OperIndexRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperIndexRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void OperIndexRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperIndexRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 OperIndexRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:OperIndexRequest.callback_id)
  return callback_id_;
}
void OperIndexRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:OperIndexRequest.callback_id)
}

// required bytes db = 2;
bool OperIndexRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperIndexRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void OperIndexRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperIndexRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& OperIndexRequest::db() const {
  // @@protoc_insertion_point(field_get:OperIndexRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperIndexRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OperIndexRequest.db)
}
void OperIndexRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OperIndexRequest.db)
}
void OperIndexRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OperIndexRequest.db)
}
::std::string* OperIndexRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:OperIndexRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperIndexRequest::release_db() {
  // @@protoc_insertion_point(field_release:OperIndexRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperIndexRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:OperIndexRequest.db)
}

// required bytes collection = 3;
bool OperIndexRequest::has_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OperIndexRequest::set_has_collection() {
  _has_bits_[0] |= 0x00000004u;
}
void OperIndexRequest::clear_has_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
void OperIndexRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection();
}
const ::std::string& OperIndexRequest::collection() const {
  // @@protoc_insertion_point(field_get:OperIndexRequest.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperIndexRequest::set_collection(const ::std::string& value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OperIndexRequest.collection)
}
void OperIndexRequest::set_collection(const char* value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OperIndexRequest.collection)
}
void OperIndexRequest::set_collection(const void* value, size_t size) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OperIndexRequest.collection)
}
::std::string* OperIndexRequest::mutable_collection() {
  set_has_collection();
  // @@protoc_insertion_point(field_mutable:OperIndexRequest.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperIndexRequest::release_collection() {
  // @@protoc_insertion_point(field_release:OperIndexRequest.collection)
  clear_has_collection();
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperIndexRequest::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    set_has_collection();
  } else {
    clear_has_collection();
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:OperIndexRequest.collection)
}

// required .OperIndexRequest.OperType type = 4;
bool OperIndexRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OperIndexRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void OperIndexRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void OperIndexRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::OperIndexRequest_OperType OperIndexRequest::type() const {
  // @@protoc_insertion_point(field_get:OperIndexRequest.type)
  return static_cast< ::OperIndexRequest_OperType >(type_);
}
void OperIndexRequest::set_type(::OperIndexRequest_OperType value) {
  assert(::OperIndexRequest_OperType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:OperIndexRequest.type)
}

// optional bytes query = 5;
bool OperIndexRequest::has_query() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OperIndexRequest::set_has_query() {
  _has_bits_[0] |= 0x00000010u;
}
void OperIndexRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000010u;
}
void OperIndexRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& OperIndexRequest::query() const {
  // @@protoc_insertion_point(field_get:OperIndexRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperIndexRequest::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OperIndexRequest.query)
}
void OperIndexRequest::set_query(const char* value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OperIndexRequest.query)
}
void OperIndexRequest::set_query(const void* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OperIndexRequest.query)
}
::std::string* OperIndexRequest::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:OperIndexRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperIndexRequest::release_query() {
  // @@protoc_insertion_point(field_release:OperIndexRequest.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperIndexRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:OperIndexRequest.query)
}

// optional bytes desc = 6;
bool OperIndexRequest::has_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OperIndexRequest::set_has_desc() {
  _has_bits_[0] |= 0x00000020u;
}
void OperIndexRequest::clear_has_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
void OperIndexRequest::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& OperIndexRequest::desc() const {
  // @@protoc_insertion_point(field_get:OperIndexRequest.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperIndexRequest::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OperIndexRequest.desc)
}
void OperIndexRequest::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OperIndexRequest.desc)
}
void OperIndexRequest::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OperIndexRequest.desc)
}
::std::string* OperIndexRequest::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:OperIndexRequest.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperIndexRequest::release_desc() {
  // @@protoc_insertion_point(field_release:OperIndexRequest.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperIndexRequest::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:OperIndexRequest.desc)
}

inline const OperIndexRequest* OperIndexRequest::internal_default_instance() {
  return &OperIndexRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCollectionRequest::kCallbackIdFieldNumber;
const int CreateCollectionRequest::kDbFieldNumber;
const int CreateCollectionRequest::kCollectionFieldNumber;
const int CreateCollectionRequest::kOperationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCollectionRequest::CreateCollectionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateCollectionRequest)
}

void CreateCollectionRequest::InitAsDefaultInstance() {
}

CreateCollectionRequest::CreateCollectionRequest(const CreateCollectionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateCollectionRequest)
}

void CreateCollectionRequest::SharedCtor() {
  _cached_size_ = 0;
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operations_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_id_ = -1;
}

CreateCollectionRequest::~CreateCollectionRequest() {
  // @@protoc_insertion_point(destructor:CreateCollectionRequest)
  SharedDtor();
}

void CreateCollectionRequest::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operations_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateCollectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCollectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCollectionRequest_descriptor_;
}

const CreateCollectionRequest& CreateCollectionRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateCollectionRequest> CreateCollectionRequest_default_instance_;

CreateCollectionRequest* CreateCollectionRequest::New(::google::protobuf::Arena* arena) const {
  CreateCollectionRequest* n = new CreateCollectionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateCollectionRequest)
  if (_has_bits_[0 / 32] & 15u) {
    callback_id_ = -1;
    if (has_db()) {
      db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collection()) {
      collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_operations()) {
      operations_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CreateCollectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateCollectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // required bytes db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_collection;
        break;
      }

      // required bytes collection = 4;
      case 4: {
        if (tag == 34) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_operations;
        break;
      }

      // optional bytes operations = 5;
      case 5: {
        if (tag == 42) {
         parse_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateCollectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateCollectionRequest)
  return false;
#undef DO_
}

void CreateCollectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateCollectionRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->db(), output);
  }

  // required bytes collection = 4;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->collection(), output);
  }

  // optional bytes operations = 5;
  if (has_operations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->operations(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateCollectionRequest)
}

::google::protobuf::uint8* CreateCollectionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateCollectionRequest)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes db = 2;
  if (has_db()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->db(), target);
  }

  // required bytes collection = 4;
  if (has_collection()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->collection(), target);
  }

  // optional bytes operations = 5;
  if (has_operations()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->operations(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateCollectionRequest)
  return target;
}

size_t CreateCollectionRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateCollectionRequest)
  size_t total_size = 0;

  if (has_db()) {
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());
  }

  if (has_collection()) {
    // required bytes collection = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());
  }

  return total_size;
}
size_t CreateCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateCollectionRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required bytes db = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->db());

    // required bytes collection = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->collection());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 9u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes operations = 5;
    if (has_operations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operations());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCollectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateCollectionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateCollectionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateCollectionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateCollectionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateCollectionRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateCollectionRequest::MergeFrom(const CreateCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateCollectionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateCollectionRequest::UnsafeMergeFrom(const CreateCollectionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_db()) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (from.has_collection()) {
      set_has_collection();
      collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
    }
    if (from.has_operations()) {
      set_has_operations();
      operations_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operations_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CreateCollectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCollectionRequest::CopyFrom(const CreateCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateCollectionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateCollectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void CreateCollectionRequest::Swap(CreateCollectionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateCollectionRequest::InternalSwap(CreateCollectionRequest* other) {
  std::swap(callback_id_, other->callback_id_);
  db_.Swap(&other->db_);
  collection_.Swap(&other->collection_);
  operations_.Swap(&other->operations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateCollectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCollectionRequest_descriptor_;
  metadata.reflection = CreateCollectionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateCollectionRequest

// optional int32 callback_id = 1 [default = -1];
bool CreateCollectionRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateCollectionRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateCollectionRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateCollectionRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 CreateCollectionRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:CreateCollectionRequest.callback_id)
  return callback_id_;
}
void CreateCollectionRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:CreateCollectionRequest.callback_id)
}

// required bytes db = 2;
bool CreateCollectionRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateCollectionRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateCollectionRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateCollectionRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
const ::std::string& CreateCollectionRequest::db() const {
  // @@protoc_insertion_point(field_get:CreateCollectionRequest.db)
  return db_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateCollectionRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateCollectionRequest.db)
}
void CreateCollectionRequest::set_db(const char* value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateCollectionRequest.db)
}
void CreateCollectionRequest::set_db(const void* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateCollectionRequest.db)
}
::std::string* CreateCollectionRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:CreateCollectionRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateCollectionRequest::release_db() {
  // @@protoc_insertion_point(field_release:CreateCollectionRequest.db)
  clear_has_db();
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateCollectionRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:CreateCollectionRequest.db)
}

// required bytes collection = 4;
bool CreateCollectionRequest::has_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateCollectionRequest::set_has_collection() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateCollectionRequest::clear_has_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateCollectionRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection();
}
const ::std::string& CreateCollectionRequest::collection() const {
  // @@protoc_insertion_point(field_get:CreateCollectionRequest.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateCollectionRequest::set_collection(const ::std::string& value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateCollectionRequest.collection)
}
void CreateCollectionRequest::set_collection(const char* value) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateCollectionRequest.collection)
}
void CreateCollectionRequest::set_collection(const void* value, size_t size) {
  set_has_collection();
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateCollectionRequest.collection)
}
::std::string* CreateCollectionRequest::mutable_collection() {
  set_has_collection();
  // @@protoc_insertion_point(field_mutable:CreateCollectionRequest.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateCollectionRequest::release_collection() {
  // @@protoc_insertion_point(field_release:CreateCollectionRequest.collection)
  clear_has_collection();
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateCollectionRequest::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    set_has_collection();
  } else {
    clear_has_collection();
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:CreateCollectionRequest.collection)
}

// optional bytes operations = 5;
bool CreateCollectionRequest::has_operations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateCollectionRequest::set_has_operations() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateCollectionRequest::clear_has_operations() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateCollectionRequest::clear_operations() {
  operations_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operations();
}
const ::std::string& CreateCollectionRequest::operations() const {
  // @@protoc_insertion_point(field_get:CreateCollectionRequest.operations)
  return operations_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateCollectionRequest::set_operations(const ::std::string& value) {
  set_has_operations();
  operations_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateCollectionRequest.operations)
}
void CreateCollectionRequest::set_operations(const char* value) {
  set_has_operations();
  operations_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateCollectionRequest.operations)
}
void CreateCollectionRequest::set_operations(const void* value, size_t size) {
  set_has_operations();
  operations_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateCollectionRequest.operations)
}
::std::string* CreateCollectionRequest::mutable_operations() {
  set_has_operations();
  // @@protoc_insertion_point(field_mutable:CreateCollectionRequest.operations)
  return operations_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateCollectionRequest::release_operations() {
  // @@protoc_insertion_point(field_release:CreateCollectionRequest.operations)
  clear_has_operations();
  return operations_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateCollectionRequest::set_allocated_operations(::std::string* operations) {
  if (operations != NULL) {
    set_has_operations();
  } else {
    clear_has_operations();
  }
  operations_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operations);
  // @@protoc_insertion_point(field_set_allocated:CreateCollectionRequest.operations)
}

inline const CreateCollectionRequest* CreateCollectionRequest::internal_default_instance() {
  return &CreateCollectionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DbStatusMessage_DbStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbStatusMessage_DbStatus_descriptor_;
}
bool DbStatusMessage_DbStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DbStatusMessage_DbStatus DbStatusMessage::CONNECTED;
const DbStatusMessage_DbStatus DbStatusMessage::CONNECTION_FAILED;
const DbStatusMessage_DbStatus DbStatusMessage::BUSY;
const DbStatusMessage_DbStatus DbStatusMessage::DbStatus_MIN;
const DbStatusMessage_DbStatus DbStatusMessage::DbStatus_MAX;
const int DbStatusMessage::DbStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DbStatusMessage::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DbStatusMessage::DbStatusMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DbStatusMessage)
}

void DbStatusMessage::InitAsDefaultInstance() {
}

DbStatusMessage::DbStatusMessage(const DbStatusMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DbStatusMessage)
}

void DbStatusMessage::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
}

DbStatusMessage::~DbStatusMessage() {
  // @@protoc_insertion_point(destructor:DbStatusMessage)
  SharedDtor();
}

void DbStatusMessage::SharedDtor() {
}

void DbStatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbStatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbStatusMessage_descriptor_;
}

const DbStatusMessage& DbStatusMessage::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DbStatusMessage> DbStatusMessage_default_instance_;

DbStatusMessage* DbStatusMessage::New(::google::protobuf::Arena* arena) const {
  DbStatusMessage* n = new DbStatusMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DbStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DbStatusMessage)
  status_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DbStatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DbStatusMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DbStatusMessage.DbStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DbStatusMessage_DbStatus_IsValid(value)) {
            set_status(static_cast< ::DbStatusMessage_DbStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DbStatusMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DbStatusMessage)
  return false;
#undef DO_
}

void DbStatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DbStatusMessage)
  // required .DbStatusMessage.DbStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DbStatusMessage)
}

::google::protobuf::uint8* DbStatusMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DbStatusMessage)
  // required .DbStatusMessage.DbStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DbStatusMessage)
  return target;
}

size_t DbStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DbStatusMessage)
  size_t total_size = 0;

  // required .DbStatusMessage.DbStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbStatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DbStatusMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DbStatusMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DbStatusMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DbStatusMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DbStatusMessage)
    UnsafeMergeFrom(*source);
  }
}

void DbStatusMessage::MergeFrom(const DbStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DbStatusMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DbStatusMessage::UnsafeMergeFrom(const DbStatusMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DbStatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DbStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbStatusMessage::CopyFrom(const DbStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DbStatusMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DbStatusMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DbStatusMessage::Swap(DbStatusMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DbStatusMessage::InternalSwap(DbStatusMessage* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DbStatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbStatusMessage_descriptor_;
  metadata.reflection = DbStatusMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DbStatusMessage

// required .DbStatusMessage.DbStatus status = 1;
bool DbStatusMessage::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DbStatusMessage::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void DbStatusMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void DbStatusMessage::clear_status() {
  status_ = 0;
  clear_has_status();
}
::DbStatusMessage_DbStatus DbStatusMessage::status() const {
  // @@protoc_insertion_point(field_get:DbStatusMessage.status)
  return static_cast< ::DbStatusMessage_DbStatus >(status_);
}
void DbStatusMessage::set_status(::DbStatusMessage_DbStatus value) {
  assert(::DbStatusMessage_DbStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:DbStatusMessage.status)
}

inline const DbStatusMessage* DbStatusMessage::internal_default_instance() {
  return &DbStatusMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindDocReply::kCallbackIdFieldNumber;
const int FindDocReply::kStatusFieldNumber;
const int FindDocReply::kDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindDocReply::FindDocReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FindDocReply)
}

void FindDocReply::InitAsDefaultInstance() {
}

FindDocReply::FindDocReply(const FindDocReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FindDocReply)
}

void FindDocReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  callback_id_ = -1;
}

FindDocReply::~FindDocReply() {
  // @@protoc_insertion_point(destructor:FindDocReply)
  SharedDtor();
}

void FindDocReply::SharedDtor() {
}

void FindDocReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindDocReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindDocReply_descriptor_;
}

const FindDocReply& FindDocReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FindDocReply> FindDocReply_default_instance_;

FindDocReply* FindDocReply::New(::google::protobuf::Arena* arena) const {
  FindDocReply* n = new FindDocReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindDocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FindDocReply)
  if (_has_bits_[0 / 32] & 3u) {
    callback_id_ = -1;
    status_ = false;
  }
  docs_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FindDocReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FindDocReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_docs;
        break;
      }

      // repeated bytes docs = 3;
      case 3: {
        if (tag == 26) {
         parse_docs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_docs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_docs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FindDocReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FindDocReply)
  return false;
#undef DO_
}

void FindDocReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FindDocReply)
  // required int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // repeated bytes docs = 3;
  for (int i = 0; i < this->docs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->docs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FindDocReply)
}

::google::protobuf::uint8* FindDocReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FindDocReply)
  // required int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // repeated bytes docs = 3;
  for (int i = 0; i < this->docs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->docs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FindDocReply)
  return target;
}

size_t FindDocReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FindDocReply)
  size_t total_size = 0;

  if (has_callback_id()) {
    // required int32 callback_id = 1 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());
  }

  if (has_status()) {
    // required bool status = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FindDocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FindDocReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 callback_id = 1 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());

    // required bool status = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated bytes docs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->docs_size());
  for (int i = 0; i < this->docs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->docs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindDocReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FindDocReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FindDocReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindDocReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FindDocReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FindDocReply)
    UnsafeMergeFrom(*source);
  }
}

void FindDocReply::MergeFrom(const FindDocReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FindDocReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FindDocReply::UnsafeMergeFrom(const FindDocReply& from) {
  GOOGLE_DCHECK(&from != this);
  docs_.UnsafeMergeFrom(from.docs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FindDocReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FindDocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindDocReply::CopyFrom(const FindDocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FindDocReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FindDocReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FindDocReply::Swap(FindDocReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindDocReply::InternalSwap(FindDocReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  docs_.UnsafeArenaSwap(&other->docs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindDocReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindDocReply_descriptor_;
  metadata.reflection = FindDocReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindDocReply

// required int32 callback_id = 1 [default = -1];
bool FindDocReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FindDocReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FindDocReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FindDocReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 FindDocReply::callback_id() const {
  // @@protoc_insertion_point(field_get:FindDocReply.callback_id)
  return callback_id_;
}
void FindDocReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:FindDocReply.callback_id)
}

// required bool status = 2;
bool FindDocReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FindDocReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void FindDocReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void FindDocReply::clear_status() {
  status_ = false;
  clear_has_status();
}
bool FindDocReply::status() const {
  // @@protoc_insertion_point(field_get:FindDocReply.status)
  return status_;
}
void FindDocReply::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FindDocReply.status)
}

// repeated bytes docs = 3;
int FindDocReply::docs_size() const {
  return docs_.size();
}
void FindDocReply::clear_docs() {
  docs_.Clear();
}
const ::std::string& FindDocReply::docs(int index) const {
  // @@protoc_insertion_point(field_get:FindDocReply.docs)
  return docs_.Get(index);
}
::std::string* FindDocReply::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:FindDocReply.docs)
  return docs_.Mutable(index);
}
void FindDocReply::set_docs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FindDocReply.docs)
  docs_.Mutable(index)->assign(value);
}
void FindDocReply::set_docs(int index, const char* value) {
  docs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FindDocReply.docs)
}
void FindDocReply::set_docs(int index, const void* value, size_t size) {
  docs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FindDocReply.docs)
}
::std::string* FindDocReply::add_docs() {
  // @@protoc_insertion_point(field_add_mutable:FindDocReply.docs)
  return docs_.Add();
}
void FindDocReply::add_docs(const ::std::string& value) {
  docs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FindDocReply.docs)
}
void FindDocReply::add_docs(const char* value) {
  docs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FindDocReply.docs)
}
void FindDocReply::add_docs(const void* value, size_t size) {
  docs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FindDocReply.docs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FindDocReply::docs() const {
  // @@protoc_insertion_point(field_list:FindDocReply.docs)
  return docs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FindDocReply::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:FindDocReply.docs)
  return &docs_;
}

inline const FindDocReply* FindDocReply::internal_default_instance() {
  return &FindDocReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountDocReply::kCallbackIdFieldNumber;
const int CountDocReply::kStatusFieldNumber;
const int CountDocReply::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountDocReply::CountDocReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CountDocReply)
}

void CountDocReply::InitAsDefaultInstance() {
}

CountDocReply::CountDocReply(const CountDocReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CountDocReply)
}

void CountDocReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&status_) + sizeof(count_));
  callback_id_ = -1;
}

CountDocReply::~CountDocReply() {
  // @@protoc_insertion_point(destructor:CountDocReply)
  SharedDtor();
}

void CountDocReply::SharedDtor() {
}

void CountDocReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountDocReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountDocReply_descriptor_;
}

const CountDocReply& CountDocReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CountDocReply> CountDocReply_default_instance_;

CountDocReply* CountDocReply::New(::google::protobuf::Arena* arena) const {
  CountDocReply* n = new CountDocReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CountDocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CountDocReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CountDocReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CountDocReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(status_, count_);
    callback_id_ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CountDocReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CountDocReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CountDocReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CountDocReply)
  return false;
#undef DO_
}

void CountDocReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CountDocReply)
  // required int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CountDocReply)
}

::google::protobuf::uint8* CountDocReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CountDocReply)
  // required int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CountDocReply)
  return target;
}

size_t CountDocReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CountDocReply)
  size_t total_size = 0;

  if (has_callback_id()) {
    // required int32 callback_id = 1 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());
  }

  if (has_status()) {
    // required bool status = 2;
    total_size += 1 + 1;
  }

  if (has_count()) {
    // required int32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t CountDocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CountDocReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 callback_id = 1 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());

    // required bool status = 2;
    total_size += 1 + 1;

    // required int32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountDocReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CountDocReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CountDocReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CountDocReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CountDocReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CountDocReply)
    UnsafeMergeFrom(*source);
  }
}

void CountDocReply::MergeFrom(const CountDocReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CountDocReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CountDocReply::UnsafeMergeFrom(const CountDocReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CountDocReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CountDocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountDocReply::CopyFrom(const CountDocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CountDocReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CountDocReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CountDocReply::Swap(CountDocReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountDocReply::InternalSwap(CountDocReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CountDocReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountDocReply_descriptor_;
  metadata.reflection = CountDocReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CountDocReply

// required int32 callback_id = 1 [default = -1];
bool CountDocReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CountDocReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CountDocReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CountDocReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 CountDocReply::callback_id() const {
  // @@protoc_insertion_point(field_get:CountDocReply.callback_id)
  return callback_id_;
}
void CountDocReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:CountDocReply.callback_id)
}

// required bool status = 2;
bool CountDocReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CountDocReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void CountDocReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void CountDocReply::clear_status() {
  status_ = false;
  clear_has_status();
}
bool CountDocReply::status() const {
  // @@protoc_insertion_point(field_get:CountDocReply.status)
  return status_;
}
void CountDocReply::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CountDocReply.status)
}

// required int32 count = 3;
bool CountDocReply::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CountDocReply::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CountDocReply::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CountDocReply::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 CountDocReply::count() const {
  // @@protoc_insertion_point(field_get:CountDocReply.count)
  return count_;
}
void CountDocReply::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CountDocReply.count)
}

inline const CountDocReply* CountDocReply::internal_default_instance() {
  return &CountDocReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDocReply::kCallbackIdFieldNumber;
const int UpdateDocReply::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDocReply::UpdateDocReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpdateDocReply)
}

void UpdateDocReply::InitAsDefaultInstance() {
}

UpdateDocReply::UpdateDocReply(const UpdateDocReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UpdateDocReply)
}

void UpdateDocReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  callback_id_ = -1;
}

UpdateDocReply::~UpdateDocReply() {
  // @@protoc_insertion_point(destructor:UpdateDocReply)
  SharedDtor();
}

void UpdateDocReply::SharedDtor() {
}

void UpdateDocReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDocReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDocReply_descriptor_;
}

const UpdateDocReply& UpdateDocReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateDocReply> UpdateDocReply_default_instance_;

UpdateDocReply* UpdateDocReply::New(::google::protobuf::Arena* arena) const {
  UpdateDocReply* n = new UpdateDocReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateDocReply)
  if (_has_bits_[0 / 32] & 3u) {
    callback_id_ = -1;
    status_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpdateDocReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpdateDocReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpdateDocReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpdateDocReply)
  return false;
#undef DO_
}

void UpdateDocReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpdateDocReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpdateDocReply)
}

::google::protobuf::uint8* UpdateDocReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UpdateDocReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateDocReply)
  return target;
}

size_t UpdateDocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateDocReply)
  size_t total_size = 0;

  // required bool status = 2;
  if (has_status()) {
    total_size += 1 + 1;
  }
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDocReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateDocReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateDocReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDocReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateDocReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateDocReply)
    UnsafeMergeFrom(*source);
  }
}

void UpdateDocReply::MergeFrom(const UpdateDocReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateDocReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateDocReply::UnsafeMergeFrom(const UpdateDocReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UpdateDocReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateDocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDocReply::CopyFrom(const UpdateDocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateDocReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateDocReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void UpdateDocReply::Swap(UpdateDocReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDocReply::InternalSwap(UpdateDocReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDocReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDocReply_descriptor_;
  metadata.reflection = UpdateDocReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDocReply

// optional int32 callback_id = 1 [default = -1];
bool UpdateDocReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateDocReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateDocReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateDocReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 UpdateDocReply::callback_id() const {
  // @@protoc_insertion_point(field_get:UpdateDocReply.callback_id)
  return callback_id_;
}
void UpdateDocReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:UpdateDocReply.callback_id)
}

// required bool status = 2;
bool UpdateDocReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateDocReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateDocReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateDocReply::clear_status() {
  status_ = false;
  clear_has_status();
}
bool UpdateDocReply::status() const {
  // @@protoc_insertion_point(field_get:UpdateDocReply.status)
  return status_;
}
void UpdateDocReply::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:UpdateDocReply.status)
}

inline const UpdateDocReply* UpdateDocReply::internal_default_instance() {
  return &UpdateDocReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsertDocReply::kCallbackIdFieldNumber;
const int InsertDocReply::kStatusFieldNumber;
const int InsertDocReply::kInsertIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsertDocReply::InsertDocReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:InsertDocReply)
}

void InsertDocReply::InitAsDefaultInstance() {
}

InsertDocReply::InsertDocReply(const InsertDocReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InsertDocReply)
}

void InsertDocReply::SharedCtor() {
  _cached_size_ = 0;
  insert_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  callback_id_ = -1;
}

InsertDocReply::~InsertDocReply() {
  // @@protoc_insertion_point(destructor:InsertDocReply)
  SharedDtor();
}

void InsertDocReply::SharedDtor() {
  insert_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InsertDocReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertDocReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertDocReply_descriptor_;
}

const InsertDocReply& InsertDocReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<InsertDocReply> InsertDocReply_default_instance_;

InsertDocReply* InsertDocReply::New(::google::protobuf::Arena* arena) const {
  InsertDocReply* n = new InsertDocReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsertDocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:InsertDocReply)
  if (_has_bits_[0 / 32] & 7u) {
    callback_id_ = -1;
    status_ = false;
    if (has_insert_id()) {
      insert_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InsertDocReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InsertDocReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_insert_id;
        break;
      }

      // optional bytes insert_id = 3;
      case 3: {
        if (tag == 26) {
         parse_insert_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_insert_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InsertDocReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InsertDocReply)
  return false;
#undef DO_
}

void InsertDocReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InsertDocReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional bytes insert_id = 3;
  if (has_insert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->insert_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InsertDocReply)
}

::google::protobuf::uint8* InsertDocReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InsertDocReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // optional bytes insert_id = 3;
  if (has_insert_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->insert_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InsertDocReply)
  return target;
}

size_t InsertDocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InsertDocReply)
  size_t total_size = 0;

  // required bool status = 2;
  if (has_status()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 5u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes insert_id = 3;
    if (has_insert_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->insert_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertDocReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InsertDocReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InsertDocReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsertDocReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InsertDocReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InsertDocReply)
    UnsafeMergeFrom(*source);
  }
}

void InsertDocReply::MergeFrom(const InsertDocReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InsertDocReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void InsertDocReply::UnsafeMergeFrom(const InsertDocReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_insert_id()) {
      set_has_insert_id();
      insert_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void InsertDocReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InsertDocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertDocReply::CopyFrom(const InsertDocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InsertDocReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool InsertDocReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void InsertDocReply::Swap(InsertDocReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsertDocReply::InternalSwap(InsertDocReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  insert_id_.Swap(&other->insert_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsertDocReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertDocReply_descriptor_;
  metadata.reflection = InsertDocReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsertDocReply

// optional int32 callback_id = 1 [default = -1];
bool InsertDocReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InsertDocReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InsertDocReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InsertDocReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 InsertDocReply::callback_id() const {
  // @@protoc_insertion_point(field_get:InsertDocReply.callback_id)
  return callback_id_;
}
void InsertDocReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:InsertDocReply.callback_id)
}

// required bool status = 2;
bool InsertDocReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InsertDocReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void InsertDocReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void InsertDocReply::clear_status() {
  status_ = false;
  clear_has_status();
}
bool InsertDocReply::status() const {
  // @@protoc_insertion_point(field_get:InsertDocReply.status)
  return status_;
}
void InsertDocReply::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:InsertDocReply.status)
}

// optional bytes insert_id = 3;
bool InsertDocReply::has_insert_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InsertDocReply::set_has_insert_id() {
  _has_bits_[0] |= 0x00000004u;
}
void InsertDocReply::clear_has_insert_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void InsertDocReply::clear_insert_id() {
  insert_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insert_id();
}
const ::std::string& InsertDocReply::insert_id() const {
  // @@protoc_insertion_point(field_get:InsertDocReply.insert_id)
  return insert_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocReply::set_insert_id(const ::std::string& value) {
  set_has_insert_id();
  insert_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InsertDocReply.insert_id)
}
void InsertDocReply::set_insert_id(const char* value) {
  set_has_insert_id();
  insert_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InsertDocReply.insert_id)
}
void InsertDocReply::set_insert_id(const void* value, size_t size) {
  set_has_insert_id();
  insert_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InsertDocReply.insert_id)
}
::std::string* InsertDocReply::mutable_insert_id() {
  set_has_insert_id();
  // @@protoc_insertion_point(field_mutable:InsertDocReply.insert_id)
  return insert_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InsertDocReply::release_insert_id() {
  // @@protoc_insertion_point(field_release:InsertDocReply.insert_id)
  clear_has_insert_id();
  return insert_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertDocReply::set_allocated_insert_id(::std::string* insert_id) {
  if (insert_id != NULL) {
    set_has_insert_id();
  } else {
    clear_has_insert_id();
  }
  insert_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_id);
  // @@protoc_insertion_point(field_set_allocated:InsertDocReply.insert_id)
}

inline const InsertDocReply* InsertDocReply::internal_default_instance() {
  return &InsertDocReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDocReply::kCallbackIdFieldNumber;
const int DeleteDocReply::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDocReply::DeleteDocReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteDocReply)
}

void DeleteDocReply::InitAsDefaultInstance() {
}

DeleteDocReply::DeleteDocReply(const DeleteDocReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeleteDocReply)
}

void DeleteDocReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  callback_id_ = -1;
}

DeleteDocReply::~DeleteDocReply() {
  // @@protoc_insertion_point(destructor:DeleteDocReply)
  SharedDtor();
}

void DeleteDocReply::SharedDtor() {
}

void DeleteDocReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDocReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDocReply_descriptor_;
}

const DeleteDocReply& DeleteDocReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteDocReply> DeleteDocReply_default_instance_;

DeleteDocReply* DeleteDocReply::New(::google::protobuf::Arena* arena) const {
  DeleteDocReply* n = new DeleteDocReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteDocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteDocReply)
  if (_has_bits_[0 / 32] & 3u) {
    callback_id_ = -1;
    status_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteDocReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeleteDocReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeleteDocReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeleteDocReply)
  return false;
#undef DO_
}

void DeleteDocReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeleteDocReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeleteDocReply)
}

::google::protobuf::uint8* DeleteDocReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeleteDocReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteDocReply)
  return target;
}

size_t DeleteDocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteDocReply)
  size_t total_size = 0;

  // required bool status = 2;
  if (has_status()) {
    total_size += 1 + 1;
  }
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDocReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteDocReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteDocReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteDocReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteDocReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteDocReply)
    UnsafeMergeFrom(*source);
  }
}

void DeleteDocReply::MergeFrom(const DeleteDocReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteDocReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteDocReply::UnsafeMergeFrom(const DeleteDocReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DeleteDocReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteDocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDocReply::CopyFrom(const DeleteDocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteDocReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteDocReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void DeleteDocReply::Swap(DeleteDocReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDocReply::InternalSwap(DeleteDocReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteDocReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDocReply_descriptor_;
  metadata.reflection = DeleteDocReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteDocReply

// optional int32 callback_id = 1 [default = -1];
bool DeleteDocReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteDocReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteDocReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteDocReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 DeleteDocReply::callback_id() const {
  // @@protoc_insertion_point(field_get:DeleteDocReply.callback_id)
  return callback_id_;
}
void DeleteDocReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:DeleteDocReply.callback_id)
}

// required bool status = 2;
bool DeleteDocReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeleteDocReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void DeleteDocReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeleteDocReply::clear_status() {
  status_ = false;
  clear_has_status();
}
bool DeleteDocReply::status() const {
  // @@protoc_insertion_point(field_get:DeleteDocReply.status)
  return status_;
}
void DeleteDocReply::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:DeleteDocReply.status)
}

inline const DeleteDocReply* DeleteDocReply::internal_default_instance() {
  return &DeleteDocReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindAndModifyDocReply::kCallbackIdFieldNumber;
const int FindAndModifyDocReply::kStatusFieldNumber;
const int FindAndModifyDocReply::kDocFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindAndModifyDocReply::FindAndModifyDocReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FindAndModifyDocReply)
}

void FindAndModifyDocReply::InitAsDefaultInstance() {
}

FindAndModifyDocReply::FindAndModifyDocReply(const FindAndModifyDocReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FindAndModifyDocReply)
}

void FindAndModifyDocReply::SharedCtor() {
  _cached_size_ = 0;
  doc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  callback_id_ = -1;
}

FindAndModifyDocReply::~FindAndModifyDocReply() {
  // @@protoc_insertion_point(destructor:FindAndModifyDocReply)
  SharedDtor();
}

void FindAndModifyDocReply::SharedDtor() {
  doc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FindAndModifyDocReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindAndModifyDocReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindAndModifyDocReply_descriptor_;
}

const FindAndModifyDocReply& FindAndModifyDocReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FindAndModifyDocReply> FindAndModifyDocReply_default_instance_;

FindAndModifyDocReply* FindAndModifyDocReply::New(::google::protobuf::Arena* arena) const {
  FindAndModifyDocReply* n = new FindAndModifyDocReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindAndModifyDocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FindAndModifyDocReply)
  if (_has_bits_[0 / 32] & 7u) {
    callback_id_ = -1;
    status_ = false;
    if (has_doc()) {
      doc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FindAndModifyDocReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FindAndModifyDocReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_doc;
        break;
      }

      // optional bytes doc = 3;
      case 3: {
        if (tag == 26) {
         parse_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_doc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FindAndModifyDocReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FindAndModifyDocReply)
  return false;
#undef DO_
}

void FindAndModifyDocReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FindAndModifyDocReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional bytes doc = 3;
  if (has_doc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->doc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FindAndModifyDocReply)
}

::google::protobuf::uint8* FindAndModifyDocReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FindAndModifyDocReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // optional bytes doc = 3;
  if (has_doc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->doc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FindAndModifyDocReply)
  return target;
}

size_t FindAndModifyDocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FindAndModifyDocReply)
  size_t total_size = 0;

  // required bool status = 2;
  if (has_status()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 5u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes doc = 3;
    if (has_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->doc());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindAndModifyDocReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FindAndModifyDocReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FindAndModifyDocReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindAndModifyDocReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FindAndModifyDocReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FindAndModifyDocReply)
    UnsafeMergeFrom(*source);
  }
}

void FindAndModifyDocReply::MergeFrom(const FindAndModifyDocReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FindAndModifyDocReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FindAndModifyDocReply::UnsafeMergeFrom(const FindAndModifyDocReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_doc()) {
      set_has_doc();
      doc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FindAndModifyDocReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FindAndModifyDocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindAndModifyDocReply::CopyFrom(const FindAndModifyDocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FindAndModifyDocReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FindAndModifyDocReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void FindAndModifyDocReply::Swap(FindAndModifyDocReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindAndModifyDocReply::InternalSwap(FindAndModifyDocReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  doc_.Swap(&other->doc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindAndModifyDocReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindAndModifyDocReply_descriptor_;
  metadata.reflection = FindAndModifyDocReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindAndModifyDocReply

// optional int32 callback_id = 1 [default = -1];
bool FindAndModifyDocReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FindAndModifyDocReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FindAndModifyDocReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FindAndModifyDocReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 FindAndModifyDocReply::callback_id() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocReply.callback_id)
  return callback_id_;
}
void FindAndModifyDocReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:FindAndModifyDocReply.callback_id)
}

// required bool status = 2;
bool FindAndModifyDocReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FindAndModifyDocReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void FindAndModifyDocReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void FindAndModifyDocReply::clear_status() {
  status_ = false;
  clear_has_status();
}
bool FindAndModifyDocReply::status() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocReply.status)
  return status_;
}
void FindAndModifyDocReply::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FindAndModifyDocReply.status)
}

// optional bytes doc = 3;
bool FindAndModifyDocReply::has_doc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FindAndModifyDocReply::set_has_doc() {
  _has_bits_[0] |= 0x00000004u;
}
void FindAndModifyDocReply::clear_has_doc() {
  _has_bits_[0] &= ~0x00000004u;
}
void FindAndModifyDocReply::clear_doc() {
  doc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc();
}
const ::std::string& FindAndModifyDocReply::doc() const {
  // @@protoc_insertion_point(field_get:FindAndModifyDocReply.doc)
  return doc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocReply::set_doc(const ::std::string& value) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FindAndModifyDocReply.doc)
}
void FindAndModifyDocReply::set_doc(const char* value) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FindAndModifyDocReply.doc)
}
void FindAndModifyDocReply::set_doc(const void* value, size_t size) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FindAndModifyDocReply.doc)
}
::std::string* FindAndModifyDocReply::mutable_doc() {
  set_has_doc();
  // @@protoc_insertion_point(field_mutable:FindAndModifyDocReply.doc)
  return doc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FindAndModifyDocReply::release_doc() {
  // @@protoc_insertion_point(field_release:FindAndModifyDocReply.doc)
  clear_has_doc();
  return doc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FindAndModifyDocReply::set_allocated_doc(::std::string* doc) {
  if (doc != NULL) {
    set_has_doc();
  } else {
    clear_has_doc();
  }
  doc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc);
  // @@protoc_insertion_point(field_set_allocated:FindAndModifyDocReply.doc)
}

inline const FindAndModifyDocReply* FindAndModifyDocReply::internal_default_instance() {
  return &FindAndModifyDocReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunProcedureReply::kCallbackIdFieldNumber;
const int RunProcedureReply::kStatusFieldNumber;
const int RunProcedureReply::kDocFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunProcedureReply::RunProcedureReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:RunProcedureReply)
}

void RunProcedureReply::InitAsDefaultInstance() {
}

RunProcedureReply::RunProcedureReply(const RunProcedureReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RunProcedureReply)
}

void RunProcedureReply::SharedCtor() {
  _cached_size_ = 0;
  doc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  callback_id_ = -1;
}

RunProcedureReply::~RunProcedureReply() {
  // @@protoc_insertion_point(destructor:RunProcedureReply)
  SharedDtor();
}

void RunProcedureReply::SharedDtor() {
  doc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RunProcedureReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunProcedureReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunProcedureReply_descriptor_;
}

const RunProcedureReply& RunProcedureReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RunProcedureReply> RunProcedureReply_default_instance_;

RunProcedureReply* RunProcedureReply::New(::google::protobuf::Arena* arena) const {
  RunProcedureReply* n = new RunProcedureReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunProcedureReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RunProcedureReply)
  if (_has_bits_[0 / 32] & 7u) {
    callback_id_ = -1;
    status_ = false;
    if (has_doc()) {
      doc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RunProcedureReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RunProcedureReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_doc;
        break;
      }

      // optional bytes doc = 3;
      case 3: {
        if (tag == 26) {
         parse_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_doc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RunProcedureReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RunProcedureReply)
  return false;
#undef DO_
}

void RunProcedureReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RunProcedureReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional bytes doc = 3;
  if (has_doc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->doc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RunProcedureReply)
}

::google::protobuf::uint8* RunProcedureReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RunProcedureReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // optional bytes doc = 3;
  if (has_doc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->doc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RunProcedureReply)
  return target;
}

size_t RunProcedureReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RunProcedureReply)
  size_t total_size = 0;

  // required bool status = 2;
  if (has_status()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 5u) {
    // optional int32 callback_id = 1 [default = -1];
    if (has_callback_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_id());
    }

    // optional bytes doc = 3;
    if (has_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->doc());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunProcedureReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RunProcedureReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RunProcedureReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunProcedureReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RunProcedureReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RunProcedureReply)
    UnsafeMergeFrom(*source);
  }
}

void RunProcedureReply::MergeFrom(const RunProcedureReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RunProcedureReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RunProcedureReply::UnsafeMergeFrom(const RunProcedureReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_doc()) {
      set_has_doc();
      doc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RunProcedureReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RunProcedureReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunProcedureReply::CopyFrom(const RunProcedureReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RunProcedureReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RunProcedureReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RunProcedureReply::Swap(RunProcedureReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunProcedureReply::InternalSwap(RunProcedureReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  doc_.Swap(&other->doc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunProcedureReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunProcedureReply_descriptor_;
  metadata.reflection = RunProcedureReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunProcedureReply

// optional int32 callback_id = 1 [default = -1];
bool RunProcedureReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RunProcedureReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RunProcedureReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RunProcedureReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 RunProcedureReply::callback_id() const {
  // @@protoc_insertion_point(field_get:RunProcedureReply.callback_id)
  return callback_id_;
}
void RunProcedureReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:RunProcedureReply.callback_id)
}

// required bool status = 2;
bool RunProcedureReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RunProcedureReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void RunProcedureReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void RunProcedureReply::clear_status() {
  status_ = false;
  clear_has_status();
}
bool RunProcedureReply::status() const {
  // @@protoc_insertion_point(field_get:RunProcedureReply.status)
  return status_;
}
void RunProcedureReply::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:RunProcedureReply.status)
}

// optional bytes doc = 3;
bool RunProcedureReply::has_doc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RunProcedureReply::set_has_doc() {
  _has_bits_[0] |= 0x00000004u;
}
void RunProcedureReply::clear_has_doc() {
  _has_bits_[0] &= ~0x00000004u;
}
void RunProcedureReply::clear_doc() {
  doc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc();
}
const ::std::string& RunProcedureReply::doc() const {
  // @@protoc_insertion_point(field_get:RunProcedureReply.doc)
  return doc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureReply::set_doc(const ::std::string& value) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RunProcedureReply.doc)
}
void RunProcedureReply::set_doc(const char* value) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RunProcedureReply.doc)
}
void RunProcedureReply::set_doc(const void* value, size_t size) {
  set_has_doc();
  doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RunProcedureReply.doc)
}
::std::string* RunProcedureReply::mutable_doc() {
  set_has_doc();
  // @@protoc_insertion_point(field_mutable:RunProcedureReply.doc)
  return doc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunProcedureReply::release_doc() {
  // @@protoc_insertion_point(field_release:RunProcedureReply.doc)
  clear_has_doc();
  return doc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunProcedureReply::set_allocated_doc(::std::string* doc) {
  if (doc != NULL) {
    set_has_doc();
  } else {
    clear_has_doc();
  }
  doc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc);
  // @@protoc_insertion_point(field_set_allocated:RunProcedureReply.doc)
}

inline const RunProcedureReply* RunProcedureReply::internal_default_instance() {
  return &RunProcedureReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperIndexReply::kCallbackIdFieldNumber;
const int OperIndexReply::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperIndexReply::OperIndexReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperIndexReply)
}

void OperIndexReply::InitAsDefaultInstance() {
}

OperIndexReply::OperIndexReply(const OperIndexReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OperIndexReply)
}

void OperIndexReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  callback_id_ = -1;
}

OperIndexReply::~OperIndexReply() {
  // @@protoc_insertion_point(destructor:OperIndexReply)
  SharedDtor();
}

void OperIndexReply::SharedDtor() {
}

void OperIndexReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperIndexReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperIndexReply_descriptor_;
}

const OperIndexReply& OperIndexReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OperIndexReply> OperIndexReply_default_instance_;

OperIndexReply* OperIndexReply::New(::google::protobuf::Arena* arena) const {
  OperIndexReply* n = new OperIndexReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperIndexReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OperIndexReply)
  if (_has_bits_[0 / 32] & 3u) {
    callback_id_ = -1;
    status_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OperIndexReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperIndexReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperIndexReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperIndexReply)
  return false;
#undef DO_
}

void OperIndexReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperIndexReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperIndexReply)
}

::google::protobuf::uint8* OperIndexReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OperIndexReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperIndexReply)
  return target;
}

size_t OperIndexReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperIndexReply)
  size_t total_size = 0;

  // required bool status = 2;
  if (has_status()) {
    total_size += 1 + 1;
  }
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperIndexReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OperIndexReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OperIndexReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperIndexReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OperIndexReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OperIndexReply)
    UnsafeMergeFrom(*source);
  }
}

void OperIndexReply::MergeFrom(const OperIndexReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OperIndexReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OperIndexReply::UnsafeMergeFrom(const OperIndexReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void OperIndexReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OperIndexReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperIndexReply::CopyFrom(const OperIndexReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperIndexReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OperIndexReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void OperIndexReply::Swap(OperIndexReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperIndexReply::InternalSwap(OperIndexReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperIndexReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperIndexReply_descriptor_;
  metadata.reflection = OperIndexReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperIndexReply

// optional int32 callback_id = 1 [default = -1];
bool OperIndexReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperIndexReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void OperIndexReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperIndexReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 OperIndexReply::callback_id() const {
  // @@protoc_insertion_point(field_get:OperIndexReply.callback_id)
  return callback_id_;
}
void OperIndexReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:OperIndexReply.callback_id)
}

// required bool status = 2;
bool OperIndexReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperIndexReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void OperIndexReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperIndexReply::clear_status() {
  status_ = false;
  clear_has_status();
}
bool OperIndexReply::status() const {
  // @@protoc_insertion_point(field_get:OperIndexReply.status)
  return status_;
}
void OperIndexReply::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:OperIndexReply.status)
}

inline const OperIndexReply* OperIndexReply::internal_default_instance() {
  return &OperIndexReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CreateCollectionReply_CrateCollectionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCollectionReply_CrateCollectionStatus_descriptor_;
}
bool CreateCollectionReply_CrateCollectionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CreateCollectionReply_CrateCollectionStatus CreateCollectionReply::CREATE_SUCC;
const CreateCollectionReply_CrateCollectionStatus CreateCollectionReply::ALREADY_EXISTED;
const CreateCollectionReply_CrateCollectionStatus CreateCollectionReply::CREATE_FAILED;
const CreateCollectionReply_CrateCollectionStatus CreateCollectionReply::CrateCollectionStatus_MIN;
const CreateCollectionReply_CrateCollectionStatus CreateCollectionReply::CrateCollectionStatus_MAX;
const int CreateCollectionReply::CrateCollectionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCollectionReply::kCallbackIdFieldNumber;
const int CreateCollectionReply::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCollectionReply::CreateCollectionReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateCollectionReply)
}

void CreateCollectionReply::InitAsDefaultInstance() {
}

CreateCollectionReply::CreateCollectionReply(const CreateCollectionReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateCollectionReply)
}

void CreateCollectionReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  callback_id_ = -1;
}

CreateCollectionReply::~CreateCollectionReply() {
  // @@protoc_insertion_point(destructor:CreateCollectionReply)
  SharedDtor();
}

void CreateCollectionReply::SharedDtor() {
}

void CreateCollectionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCollectionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCollectionReply_descriptor_;
}

const CreateCollectionReply& CreateCollectionReply::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateCollectionReply> CreateCollectionReply_default_instance_;

CreateCollectionReply* CreateCollectionReply::New(::google::protobuf::Arena* arena) const {
  CreateCollectionReply* n = new CreateCollectionReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateCollectionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateCollectionReply)
  if (_has_bits_[0 / 32] & 3u) {
    callback_id_ = -1;
    status_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CreateCollectionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateCollectionReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .CreateCollectionReply.CrateCollectionStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CreateCollectionReply_CrateCollectionStatus_IsValid(value)) {
            set_status(static_cast< ::CreateCollectionReply_CrateCollectionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateCollectionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateCollectionReply)
  return false;
#undef DO_
}

void CreateCollectionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateCollectionReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required .CreateCollectionReply.CrateCollectionStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateCollectionReply)
}

::google::protobuf::uint8* CreateCollectionReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateCollectionReply)
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required .CreateCollectionReply.CrateCollectionStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateCollectionReply)
  return target;
}

size_t CreateCollectionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateCollectionReply)
  size_t total_size = 0;

  // required .CreateCollectionReply.CrateCollectionStatus status = 2;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  // optional int32 callback_id = 1 [default = -1];
  if (has_callback_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCollectionReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateCollectionReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateCollectionReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateCollectionReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateCollectionReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateCollectionReply)
    UnsafeMergeFrom(*source);
  }
}

void CreateCollectionReply::MergeFrom(const CreateCollectionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateCollectionReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateCollectionReply::UnsafeMergeFrom(const CreateCollectionReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CreateCollectionReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateCollectionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCollectionReply::CopyFrom(const CreateCollectionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateCollectionReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateCollectionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CreateCollectionReply::Swap(CreateCollectionReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateCollectionReply::InternalSwap(CreateCollectionReply* other) {
  std::swap(callback_id_, other->callback_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateCollectionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCollectionReply_descriptor_;
  metadata.reflection = CreateCollectionReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateCollectionReply

// optional int32 callback_id = 1 [default = -1];
bool CreateCollectionReply::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateCollectionReply::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateCollectionReply::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateCollectionReply::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 CreateCollectionReply::callback_id() const {
  // @@protoc_insertion_point(field_get:CreateCollectionReply.callback_id)
  return callback_id_;
}
void CreateCollectionReply::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:CreateCollectionReply.callback_id)
}

// required .CreateCollectionReply.CrateCollectionStatus status = 2;
bool CreateCollectionReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateCollectionReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateCollectionReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateCollectionReply::clear_status() {
  status_ = 0;
  clear_has_status();
}
::CreateCollectionReply_CrateCollectionStatus CreateCollectionReply::status() const {
  // @@protoc_insertion_point(field_get:CreateCollectionReply.status)
  return static_cast< ::CreateCollectionReply_CrateCollectionStatus >(status_);
}
void CreateCollectionReply::set_status(::CreateCollectionReply_CrateCollectionStatus value) {
  assert(::CreateCollectionReply_CrateCollectionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CreateCollectionReply.status)
}

inline const CreateCollectionReply* CreateCollectionReply::internal_default_instance() {
  return &CreateCollectionReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallDBRequest::kMethodFieldNumber;
const int CallDBRequest::kArgsFieldNumber;
const int CallDBRequest::kCallbackIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallDBRequest::CallDBRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CallDBRequest)
}

void CallDBRequest::InitAsDefaultInstance() {
}

CallDBRequest::CallDBRequest(const CallDBRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CallDBRequest)
}

void CallDBRequest::SharedCtor() {
  _cached_size_ = 0;
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_id_ = -1;
}

CallDBRequest::~CallDBRequest() {
  // @@protoc_insertion_point(destructor:CallDBRequest)
  SharedDtor();
}

void CallDBRequest::SharedDtor() {
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CallDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallDBRequest_descriptor_;
}

const CallDBRequest& CallDBRequest::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CallDBRequest> CallDBRequest_default_instance_;

CallDBRequest* CallDBRequest::New(::google::protobuf::Arena* arena) const {
  CallDBRequest* n = new CallDBRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CallDBRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_method()) {
      method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_args()) {
      args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    callback_id_ = -1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CallDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CallDBRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes method = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_method()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required bytes args = 2;
      case 2: {
        if (tag == 18) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_callback_id;
        break;
      }

      // optional int32 callback_id = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_callback_id:
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CallDBRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CallDBRequest)
  return false;
#undef DO_
}

void CallDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CallDBRequest)
  // required bytes method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->method(), output);
  }

  // required bytes args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->args(), output);
  }

  // optional int32 callback_id = 3 [default = -1];
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->callback_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CallDBRequest)
}

::google::protobuf::uint8* CallDBRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CallDBRequest)
  // required bytes method = 1;
  if (has_method()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->method(), target);
  }

  // required bytes args = 2;
  if (has_args()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->args(), target);
  }

  // optional int32 callback_id = 3 [default = -1];
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->callback_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CallDBRequest)
  return target;
}

size_t CallDBRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CallDBRequest)
  size_t total_size = 0;

  if (has_method()) {
    // required bytes method = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->method());
  }

  if (has_args()) {
    // required bytes args = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->args());
  }

  return total_size;
}
size_t CallDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CallDBRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes method = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->method());

    // required bytes args = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->args());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 callback_id = 3 [default = -1];
  if (has_callback_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CallDBRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallDBRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallDBRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CallDBRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CallDBRequest)
    UnsafeMergeFrom(*source);
  }
}

void CallDBRequest::MergeFrom(const CallDBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CallDBRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CallDBRequest::UnsafeMergeFrom(const CallDBRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (from.has_args()) {
      set_has_args();
      args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
    }
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CallDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CallDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallDBRequest::CopyFrom(const CallDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CallDBRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CallDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CallDBRequest::Swap(CallDBRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallDBRequest::InternalSwap(CallDBRequest* other) {
  method_.Swap(&other->method_);
  args_.Swap(&other->args_);
  std::swap(callback_id_, other->callback_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallDBRequest_descriptor_;
  metadata.reflection = CallDBRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallDBRequest

// required bytes method = 1;
bool CallDBRequest::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CallDBRequest::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
void CallDBRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void CallDBRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
const ::std::string& CallDBRequest::method() const {
  // @@protoc_insertion_point(field_get:CallDBRequest.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallDBRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CallDBRequest.method)
}
void CallDBRequest::set_method(const char* value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CallDBRequest.method)
}
void CallDBRequest::set_method(const void* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CallDBRequest.method)
}
::std::string* CallDBRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:CallDBRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CallDBRequest::release_method() {
  // @@protoc_insertion_point(field_release:CallDBRequest.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallDBRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:CallDBRequest.method)
}

// required bytes args = 2;
bool CallDBRequest::has_args() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CallDBRequest::set_has_args() {
  _has_bits_[0] |= 0x00000002u;
}
void CallDBRequest::clear_has_args() {
  _has_bits_[0] &= ~0x00000002u;
}
void CallDBRequest::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_args();
}
const ::std::string& CallDBRequest::args() const {
  // @@protoc_insertion_point(field_get:CallDBRequest.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallDBRequest::set_args(const ::std::string& value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CallDBRequest.args)
}
void CallDBRequest::set_args(const char* value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CallDBRequest.args)
}
void CallDBRequest::set_args(const void* value, size_t size) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CallDBRequest.args)
}
::std::string* CallDBRequest::mutable_args() {
  set_has_args();
  // @@protoc_insertion_point(field_mutable:CallDBRequest.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CallDBRequest::release_args() {
  // @@protoc_insertion_point(field_release:CallDBRequest.args)
  clear_has_args();
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallDBRequest::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    set_has_args();
  } else {
    clear_has_args();
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:CallDBRequest.args)
}

// optional int32 callback_id = 3 [default = -1];
bool CallDBRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CallDBRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CallDBRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CallDBRequest::clear_callback_id() {
  callback_id_ = -1;
  clear_has_callback_id();
}
::google::protobuf::int32 CallDBRequest::callback_id() const {
  // @@protoc_insertion_point(field_get:CallDBRequest.callback_id)
  return callback_id_;
}
void CallDBRequest::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:CallDBRequest.callback_id)
}

inline const CallDBRequest* CallDBRequest::internal_default_instance() {
  return &CallDBRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallDBResponse::kCallbackIdFieldNumber;
const int CallDBResponse::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallDBResponse::CallDBResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmongo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CallDBResponse)
}

void CallDBResponse::InitAsDefaultInstance() {
}

CallDBResponse::CallDBResponse(const CallDBResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CallDBResponse)
}

void CallDBResponse::SharedCtor() {
  _cached_size_ = 0;
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_id_ = 0;
}

CallDBResponse::~CallDBResponse() {
  // @@protoc_insertion_point(destructor:CallDBResponse)
  SharedDtor();
}

void CallDBResponse::SharedDtor() {
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CallDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallDBResponse_descriptor_;
}

const CallDBResponse& CallDBResponse::default_instance() {
  protobuf_InitDefaults_dbmongo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CallDBResponse> CallDBResponse_default_instance_;

CallDBResponse* CallDBResponse::New(::google::protobuf::Arena* arena) const {
  CallDBResponse* n = new CallDBResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallDBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CallDBResponse)
  if (_has_bits_[0 / 32] & 3u) {
    callback_id_ = 0;
    if (has_args()) {
      args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CallDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CallDBResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 callback_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_callback_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required bytes args = 2;
      case 2: {
        if (tag == 18) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CallDBResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CallDBResponse)
  return false;
#undef DO_
}

void CallDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CallDBResponse)
  // required int32 callback_id = 1;
  if (has_callback_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_id(), output);
  }

  // required bytes args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->args(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CallDBResponse)
}

::google::protobuf::uint8* CallDBResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CallDBResponse)
  // required int32 callback_id = 1;
  if (has_callback_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_id(), target);
  }

  // required bytes args = 2;
  if (has_args()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->args(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CallDBResponse)
  return target;
}

size_t CallDBResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CallDBResponse)
  size_t total_size = 0;

  if (has_callback_id()) {
    // required int32 callback_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());
  }

  if (has_args()) {
    // required bytes args = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->args());
  }

  return total_size;
}
size_t CallDBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CallDBResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 callback_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callback_id());

    // required bytes args = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->args());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CallDBResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallDBResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallDBResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CallDBResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CallDBResponse)
    UnsafeMergeFrom(*source);
  }
}

void CallDBResponse::MergeFrom(const CallDBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CallDBResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CallDBResponse::UnsafeMergeFrom(const CallDBResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_id()) {
      set_callback_id(from.callback_id());
    }
    if (from.has_args()) {
      set_has_args();
      args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CallDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CallDBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallDBResponse::CopyFrom(const CallDBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CallDBResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CallDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CallDBResponse::Swap(CallDBResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallDBResponse::InternalSwap(CallDBResponse* other) {
  std::swap(callback_id_, other->callback_id_);
  args_.Swap(&other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallDBResponse_descriptor_;
  metadata.reflection = CallDBResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallDBResponse

// required int32 callback_id = 1;
bool CallDBResponse::has_callback_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CallDBResponse::set_has_callback_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CallDBResponse::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CallDBResponse::clear_callback_id() {
  callback_id_ = 0;
  clear_has_callback_id();
}
::google::protobuf::int32 CallDBResponse::callback_id() const {
  // @@protoc_insertion_point(field_get:CallDBResponse.callback_id)
  return callback_id_;
}
void CallDBResponse::set_callback_id(::google::protobuf::int32 value) {
  set_has_callback_id();
  callback_id_ = value;
  // @@protoc_insertion_point(field_set:CallDBResponse.callback_id)
}

// required bytes args = 2;
bool CallDBResponse::has_args() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CallDBResponse::set_has_args() {
  _has_bits_[0] |= 0x00000002u;
}
void CallDBResponse::clear_has_args() {
  _has_bits_[0] &= ~0x00000002u;
}
void CallDBResponse::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_args();
}
const ::std::string& CallDBResponse::args() const {
  // @@protoc_insertion_point(field_get:CallDBResponse.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallDBResponse::set_args(const ::std::string& value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CallDBResponse.args)
}
void CallDBResponse::set_args(const char* value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CallDBResponse.args)
}
void CallDBResponse::set_args(const void* value, size_t size) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CallDBResponse.args)
}
::std::string* CallDBResponse::mutable_args() {
  set_has_args();
  // @@protoc_insertion_point(field_mutable:CallDBResponse.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CallDBResponse::release_args() {
  // @@protoc_insertion_point(field_release:CallDBResponse.args)
  clear_has_args();
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallDBResponse::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    set_has_args();
  } else {
    clear_has_args();
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:CallDBResponse.args)
}

inline const CallDBResponse* CallDBResponse::internal_default_instance() {
  return &CallDBResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
