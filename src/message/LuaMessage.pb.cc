// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LuaMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LuaMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CS_Lua_RunRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_Lua_RunRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_Lua_RunRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_Lua_RunRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_CLIENT_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_CLIENT_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_MOVE_SYNC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_MOVE_SYNC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_STOP_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_STOP_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_STOP_MOVE_SYNC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_STOP_MOVE_SYNC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FORCE_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FORCE_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FORCE_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FORCE_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_TURN_DIRECTION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_TURN_DIRECTION_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_TURN_DIRECTION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_TURN_DIRECTION_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_CREATE_ENTITY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_CREATE_ENTITY_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_CREATE_ENTITY_Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_CREATE_ENTITY_Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_DESTROY_ENTITY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_DESTROY_ENTITY_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_PING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_PING_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_PING_BACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_PING_BACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_PING_BACK_BACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_PING_BACK_BACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectServerRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectServerRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConnectServerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectServerReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectServerReply_ReplyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CS_RUN_STATE_CHANGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_RUN_STATE_CHANGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ROTATE_CHANGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ROTATE_CHANGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_RUN_STATE_CHANGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_RUN_STATE_CHANGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ROTATE_CHANGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ROTATE_CHANGE_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LuaMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_LuaMessage_2eproto() {
  protobuf_AddDesc_LuaMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LuaMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CS_Lua_RunRequest_descriptor_ = file->message_type(0);
  static const int CS_Lua_RunRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Lua_RunRequest, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Lua_RunRequest, parameters_),
  };
  CS_Lua_RunRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_Lua_RunRequest_descriptor_,
      CS_Lua_RunRequest::internal_default_instance(),
      CS_Lua_RunRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Lua_RunRequest, _has_bits_),
      -1,
      -1,
      sizeof(CS_Lua_RunRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Lua_RunRequest, _internal_metadata_));
  SC_Lua_RunRequest_descriptor_ = file->message_type(1);
  static const int SC_Lua_RunRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Lua_RunRequest, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Lua_RunRequest, parameters_),
  };
  SC_Lua_RunRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_Lua_RunRequest_descriptor_,
      SC_Lua_RunRequest::internal_default_instance(),
      SC_Lua_RunRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Lua_RunRequest, _has_bits_),
      -1,
      -1,
      sizeof(SC_Lua_RunRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Lua_RunRequest, _internal_metadata_));
  Position_descriptor_ = file->message_type(2);
  static const int Position_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, destx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, desty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, destz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, speed_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::internal_default_instance(),
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_),
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_));
  CS_CLIENT_MOVE_descriptor_ = file->message_type(3);
  static const int CS_CLIENT_MOVE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CLIENT_MOVE, mypostion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CLIENT_MOVE, clienttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CLIENT_MOVE, sceneid_),
  };
  CS_CLIENT_MOVE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_CLIENT_MOVE_descriptor_,
      CS_CLIENT_MOVE::internal_default_instance(),
      CS_CLIENT_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CLIENT_MOVE, _has_bits_),
      -1,
      -1,
      sizeof(CS_CLIENT_MOVE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_CLIENT_MOVE, _internal_metadata_));
  SC_MOVE_SYNC_descriptor_ = file->message_type(4);
  static const int SC_MOVE_SYNC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_SYNC, syncpostion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_SYNC, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_SYNC, sceneid_),
  };
  SC_MOVE_SYNC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_MOVE_SYNC_descriptor_,
      SC_MOVE_SYNC::internal_default_instance(),
      SC_MOVE_SYNC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_SYNC, _has_bits_),
      -1,
      -1,
      sizeof(SC_MOVE_SYNC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_SYNC, _internal_metadata_));
  CS_STOP_MOVE_descriptor_ = file->message_type(5);
  static const int CS_STOP_MOVE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_STOP_MOVE, mypostion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_STOP_MOVE, clienttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_STOP_MOVE, sceneid_),
  };
  CS_STOP_MOVE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_STOP_MOVE_descriptor_,
      CS_STOP_MOVE::internal_default_instance(),
      CS_STOP_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_STOP_MOVE, _has_bits_),
      -1,
      -1,
      sizeof(CS_STOP_MOVE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_STOP_MOVE, _internal_metadata_));
  SC_STOP_MOVE_SYNC_descriptor_ = file->message_type(6);
  static const int SC_STOP_MOVE_SYNC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STOP_MOVE_SYNC, syncpostion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STOP_MOVE_SYNC, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STOP_MOVE_SYNC, sceneid_),
  };
  SC_STOP_MOVE_SYNC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_STOP_MOVE_SYNC_descriptor_,
      SC_STOP_MOVE_SYNC::internal_default_instance(),
      SC_STOP_MOVE_SYNC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STOP_MOVE_SYNC, _has_bits_),
      -1,
      -1,
      sizeof(SC_STOP_MOVE_SYNC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_STOP_MOVE_SYNC, _internal_metadata_));
  CS_FORCE_MOVE_descriptor_ = file->message_type(7);
  static const int CS_FORCE_MOVE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FORCE_MOVE, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FORCE_MOVE, destx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FORCE_MOVE, desty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FORCE_MOVE, destz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FORCE_MOVE, sceneid_),
  };
  CS_FORCE_MOVE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_FORCE_MOVE_descriptor_,
      CS_FORCE_MOVE::internal_default_instance(),
      CS_FORCE_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FORCE_MOVE, _has_bits_),
      -1,
      -1,
      sizeof(CS_FORCE_MOVE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FORCE_MOVE, _internal_metadata_));
  SC_FORCE_MOVE_descriptor_ = file->message_type(8);
  static const int SC_FORCE_MOVE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FORCE_MOVE, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FORCE_MOVE, destx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FORCE_MOVE, desty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FORCE_MOVE, destz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FORCE_MOVE, sceneid_),
  };
  SC_FORCE_MOVE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_FORCE_MOVE_descriptor_,
      SC_FORCE_MOVE::internal_default_instance(),
      SC_FORCE_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FORCE_MOVE, _has_bits_),
      -1,
      -1,
      sizeof(SC_FORCE_MOVE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FORCE_MOVE, _internal_metadata_));
  CS_TURN_DIRECTION_descriptor_ = file->message_type(9);
  static const int CS_TURN_DIRECTION_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TURN_DIRECTION, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TURN_DIRECTION, destx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TURN_DIRECTION, desty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TURN_DIRECTION, destz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TURN_DIRECTION, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TURN_DIRECTION, sceneid_),
  };
  CS_TURN_DIRECTION_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_TURN_DIRECTION_descriptor_,
      CS_TURN_DIRECTION::internal_default_instance(),
      CS_TURN_DIRECTION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TURN_DIRECTION, _has_bits_),
      -1,
      -1,
      sizeof(CS_TURN_DIRECTION),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_TURN_DIRECTION, _internal_metadata_));
  SC_TURN_DIRECTION_descriptor_ = file->message_type(10);
  static const int SC_TURN_DIRECTION_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TURN_DIRECTION, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TURN_DIRECTION, destx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TURN_DIRECTION, desty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TURN_DIRECTION, destz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TURN_DIRECTION, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TURN_DIRECTION, sceneid_),
  };
  SC_TURN_DIRECTION_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_TURN_DIRECTION_descriptor_,
      SC_TURN_DIRECTION::internal_default_instance(),
      SC_TURN_DIRECTION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TURN_DIRECTION, _has_bits_),
      -1,
      -1,
      sizeof(SC_TURN_DIRECTION),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_TURN_DIRECTION, _internal_metadata_));
  SC_CREATE_ENTITY_descriptor_ = file->message_type(11);
  static const int SC_CREATE_ENTITY_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY, entitiescreate_),
  };
  SC_CREATE_ENTITY_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_CREATE_ENTITY_descriptor_,
      SC_CREATE_ENTITY::internal_default_instance(),
      SC_CREATE_ENTITY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY, _has_bits_),
      -1,
      -1,
      sizeof(SC_CREATE_ENTITY),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY, _internal_metadata_));
  SC_CREATE_ENTITY_Entity_descriptor_ = SC_CREATE_ENTITY_descriptor_->nested_type(0);
  static const int SC_CREATE_ENTITY_Entity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY_Entity, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY_Entity, entityinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY_Entity, entitypos_),
  };
  SC_CREATE_ENTITY_Entity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_CREATE_ENTITY_Entity_descriptor_,
      SC_CREATE_ENTITY_Entity::internal_default_instance(),
      SC_CREATE_ENTITY_Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY_Entity, _has_bits_),
      -1,
      -1,
      sizeof(SC_CREATE_ENTITY_Entity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_CREATE_ENTITY_Entity, _internal_metadata_));
  SC_DESTROY_ENTITY_descriptor_ = file->message_type(12);
  static const int SC_DESTROY_ENTITY_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DESTROY_ENTITY, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DESTROY_ENTITY, entitiesdestroy_),
  };
  SC_DESTROY_ENTITY_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_DESTROY_ENTITY_descriptor_,
      SC_DESTROY_ENTITY::internal_default_instance(),
      SC_DESTROY_ENTITY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DESTROY_ENTITY, _has_bits_),
      -1,
      -1,
      sizeof(SC_DESTROY_ENTITY),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DESTROY_ENTITY, _internal_metadata_));
  CS_PING_descriptor_ = file->message_type(13);
  static const int CS_PING_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING, clienttime_),
  };
  CS_PING_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_PING_descriptor_,
      CS_PING::internal_default_instance(),
      CS_PING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING, _has_bits_),
      -1,
      -1,
      sizeof(CS_PING),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING, _internal_metadata_));
  SC_PING_BACK_descriptor_ = file->message_type(14);
  static const int SC_PING_BACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PING_BACK, clienttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PING_BACK, servertime_),
  };
  SC_PING_BACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_PING_BACK_descriptor_,
      SC_PING_BACK::internal_default_instance(),
      SC_PING_BACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PING_BACK, _has_bits_),
      -1,
      -1,
      sizeof(SC_PING_BACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PING_BACK, _internal_metadata_));
  CS_PING_BACK_BACK_descriptor_ = file->message_type(15);
  static const int CS_PING_BACK_BACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING_BACK_BACK, clienttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING_BACK_BACK, servertime_),
  };
  CS_PING_BACK_BACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_PING_BACK_BACK_descriptor_,
      CS_PING_BACK_BACK::internal_default_instance(),
      CS_PING_BACK_BACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING_BACK_BACK, _has_bits_),
      -1,
      -1,
      sizeof(CS_PING_BACK_BACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_PING_BACK_BACK, _internal_metadata_));
  ConnectServerRequest_descriptor_ = file->message_type(16);
  static const int ConnectServerRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerRequest, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerRequest, authmsg_),
  };
  ConnectServerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectServerRequest_descriptor_,
      ConnectServerRequest::internal_default_instance(),
      ConnectServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerRequest, _has_bits_),
      -1,
      -1,
      sizeof(ConnectServerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerRequest, _internal_metadata_));
  ConnectServerRequest_RequestType_descriptor_ = ConnectServerRequest_descriptor_->enum_type(0);
  ConnectServerReply_descriptor_ = file->message_type(17);
  static const int ConnectServerReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerReply, extramsg_),
  };
  ConnectServerReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectServerReply_descriptor_,
      ConnectServerReply::internal_default_instance(),
      ConnectServerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerReply, _has_bits_),
      -1,
      -1,
      sizeof(ConnectServerReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectServerReply, _internal_metadata_));
  ConnectServerReply_ReplyType_descriptor_ = ConnectServerReply_descriptor_->enum_type(0);
  CS_RUN_STATE_CHANGE_descriptor_ = file->message_type(18);
  static const int CS_RUN_STATE_CHANGE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RUN_STATE_CHANGE, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RUN_STATE_CHANGE, isrunning_),
  };
  CS_RUN_STATE_CHANGE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_RUN_STATE_CHANGE_descriptor_,
      CS_RUN_STATE_CHANGE::internal_default_instance(),
      CS_RUN_STATE_CHANGE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RUN_STATE_CHANGE, _has_bits_),
      -1,
      -1,
      sizeof(CS_RUN_STATE_CHANGE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RUN_STATE_CHANGE, _internal_metadata_));
  CS_ROTATE_CHANGE_descriptor_ = file->message_type(19);
  static const int CS_ROTATE_CHANGE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ROTATE_CHANGE, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ROTATE_CHANGE, rotationy_),
  };
  CS_ROTATE_CHANGE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_ROTATE_CHANGE_descriptor_,
      CS_ROTATE_CHANGE::internal_default_instance(),
      CS_ROTATE_CHANGE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ROTATE_CHANGE, _has_bits_),
      -1,
      -1,
      sizeof(CS_ROTATE_CHANGE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ROTATE_CHANGE, _internal_metadata_));
  SC_RUN_STATE_CHANGE_descriptor_ = file->message_type(20);
  static const int SC_RUN_STATE_CHANGE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RUN_STATE_CHANGE, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RUN_STATE_CHANGE, isrunning_),
  };
  SC_RUN_STATE_CHANGE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_RUN_STATE_CHANGE_descriptor_,
      SC_RUN_STATE_CHANGE::internal_default_instance(),
      SC_RUN_STATE_CHANGE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RUN_STATE_CHANGE, _has_bits_),
      -1,
      -1,
      sizeof(SC_RUN_STATE_CHANGE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RUN_STATE_CHANGE, _internal_metadata_));
  SC_ROTATE_CHANGE_descriptor_ = file->message_type(21);
  static const int SC_ROTATE_CHANGE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ROTATE_CHANGE, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ROTATE_CHANGE, rotationy_),
  };
  SC_ROTATE_CHANGE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_ROTATE_CHANGE_descriptor_,
      SC_ROTATE_CHANGE::internal_default_instance(),
      SC_ROTATE_CHANGE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ROTATE_CHANGE, _has_bits_),
      -1,
      -1,
      sizeof(SC_ROTATE_CHANGE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ROTATE_CHANGE, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LuaMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_Lua_RunRequest_descriptor_, CS_Lua_RunRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_Lua_RunRequest_descriptor_, SC_Lua_RunRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, Position::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_CLIENT_MOVE_descriptor_, CS_CLIENT_MOVE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_MOVE_SYNC_descriptor_, SC_MOVE_SYNC::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_STOP_MOVE_descriptor_, CS_STOP_MOVE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_STOP_MOVE_SYNC_descriptor_, SC_STOP_MOVE_SYNC::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_FORCE_MOVE_descriptor_, CS_FORCE_MOVE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_FORCE_MOVE_descriptor_, SC_FORCE_MOVE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_TURN_DIRECTION_descriptor_, CS_TURN_DIRECTION::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_TURN_DIRECTION_descriptor_, SC_TURN_DIRECTION::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_CREATE_ENTITY_descriptor_, SC_CREATE_ENTITY::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_CREATE_ENTITY_Entity_descriptor_, SC_CREATE_ENTITY_Entity::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_DESTROY_ENTITY_descriptor_, SC_DESTROY_ENTITY::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_PING_descriptor_, CS_PING::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_PING_BACK_descriptor_, SC_PING_BACK::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_PING_BACK_BACK_descriptor_, CS_PING_BACK_BACK::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectServerRequest_descriptor_, ConnectServerRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectServerReply_descriptor_, ConnectServerReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_RUN_STATE_CHANGE_descriptor_, CS_RUN_STATE_CHANGE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_ROTATE_CHANGE_descriptor_, CS_ROTATE_CHANGE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_RUN_STATE_CHANGE_descriptor_, SC_RUN_STATE_CHANGE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_ROTATE_CHANGE_descriptor_, SC_ROTATE_CHANGE::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LuaMessage_2eproto() {
  CS_Lua_RunRequest_default_instance_.Shutdown();
  delete CS_Lua_RunRequest_reflection_;
  SC_Lua_RunRequest_default_instance_.Shutdown();
  delete SC_Lua_RunRequest_reflection_;
  Position_default_instance_.Shutdown();
  delete Position_reflection_;
  CS_CLIENT_MOVE_default_instance_.Shutdown();
  delete CS_CLIENT_MOVE_reflection_;
  SC_MOVE_SYNC_default_instance_.Shutdown();
  delete SC_MOVE_SYNC_reflection_;
  CS_STOP_MOVE_default_instance_.Shutdown();
  delete CS_STOP_MOVE_reflection_;
  SC_STOP_MOVE_SYNC_default_instance_.Shutdown();
  delete SC_STOP_MOVE_SYNC_reflection_;
  CS_FORCE_MOVE_default_instance_.Shutdown();
  delete CS_FORCE_MOVE_reflection_;
  SC_FORCE_MOVE_default_instance_.Shutdown();
  delete SC_FORCE_MOVE_reflection_;
  CS_TURN_DIRECTION_default_instance_.Shutdown();
  delete CS_TURN_DIRECTION_reflection_;
  SC_TURN_DIRECTION_default_instance_.Shutdown();
  delete SC_TURN_DIRECTION_reflection_;
  SC_CREATE_ENTITY_default_instance_.Shutdown();
  delete SC_CREATE_ENTITY_reflection_;
  SC_CREATE_ENTITY_Entity_default_instance_.Shutdown();
  delete SC_CREATE_ENTITY_Entity_reflection_;
  SC_DESTROY_ENTITY_default_instance_.Shutdown();
  delete SC_DESTROY_ENTITY_reflection_;
  CS_PING_default_instance_.Shutdown();
  delete CS_PING_reflection_;
  SC_PING_BACK_default_instance_.Shutdown();
  delete SC_PING_BACK_reflection_;
  CS_PING_BACK_BACK_default_instance_.Shutdown();
  delete CS_PING_BACK_BACK_reflection_;
  ConnectServerRequest_default_instance_.Shutdown();
  delete ConnectServerRequest_reflection_;
  ConnectServerReply_default_instance_.Shutdown();
  delete ConnectServerReply_reflection_;
  CS_RUN_STATE_CHANGE_default_instance_.Shutdown();
  delete CS_RUN_STATE_CHANGE_reflection_;
  CS_ROTATE_CHANGE_default_instance_.Shutdown();
  delete CS_ROTATE_CHANGE_reflection_;
  SC_RUN_STATE_CHANGE_default_instance_.Shutdown();
  delete SC_RUN_STATE_CHANGE_reflection_;
  SC_ROTATE_CHANGE_default_instance_.Shutdown();
  delete SC_ROTATE_CHANGE_reflection_;
}

void protobuf_InitDefaults_LuaMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_common_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  CS_Lua_RunRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_Lua_RunRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Position_default_instance_.DefaultConstruct();
  CS_CLIENT_MOVE_default_instance_.DefaultConstruct();
  SC_MOVE_SYNC_default_instance_.DefaultConstruct();
  CS_STOP_MOVE_default_instance_.DefaultConstruct();
  SC_STOP_MOVE_SYNC_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CS_FORCE_MOVE_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_FORCE_MOVE_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CS_TURN_DIRECTION_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_TURN_DIRECTION_default_instance_.DefaultConstruct();
  SC_CREATE_ENTITY_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_CREATE_ENTITY_Entity_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_DESTROY_ENTITY_default_instance_.DefaultConstruct();
  CS_PING_default_instance_.DefaultConstruct();
  SC_PING_BACK_default_instance_.DefaultConstruct();
  CS_PING_BACK_BACK_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConnectServerRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConnectServerReply_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CS_RUN_STATE_CHANGE_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CS_ROTATE_CHANGE_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_RUN_STATE_CHANGE_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SC_ROTATE_CHANGE_default_instance_.DefaultConstruct();
  CS_Lua_RunRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_Lua_RunRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  Position_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_CLIENT_MOVE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_MOVE_SYNC_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_STOP_MOVE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_STOP_MOVE_SYNC_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_FORCE_MOVE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_FORCE_MOVE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_TURN_DIRECTION_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_TURN_DIRECTION_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_CREATE_ENTITY_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_CREATE_ENTITY_Entity_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_DESTROY_ENTITY_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_PING_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_PING_BACK_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_PING_BACK_BACK_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConnectServerRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConnectServerReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_RUN_STATE_CHANGE_default_instance_.get_mutable()->InitAsDefaultInstance();
  CS_ROTATE_CHANGE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_RUN_STATE_CHANGE_default_instance_.get_mutable()->InitAsDefaultInstance();
  SC_ROTATE_CHANGE_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_LuaMessage_2eproto_once_);
void protobuf_InitDefaults_LuaMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_LuaMessage_2eproto_once_,
                 &protobuf_InitDefaults_LuaMessage_2eproto_impl);
}
void protobuf_AddDesc_LuaMessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_LuaMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020LuaMessage.proto\032\014common.proto\"7\n\021CS_L"
    "ua_RunRequest\022\016\n\006opcode\030\001 \002(\r\022\022\n\nparamet"
    "ers\030\002 \001(\014\"7\n\021SC_Lua_RunRequest\022\016\n\006opcode"
    "\030\001 \002(\r\022\022\n\nparameters\030\002 \001(\014\"m\n\010Position\022\020"
    "\n\010entityid\030\001 \002(\014\022\r\n\005DestX\030\002 \002(\002\022\r\n\005DestY"
    "\030\003 \002(\002\022\r\n\005DestZ\030\004 \002(\002\022\023\n\013Orientation\030\005 \002"
    "(\002\022\r\n\005Speed\030\006 \002(\002\"S\n\016CS_CLIENT_MOVE\022\034\n\tM"
    "yPostion\030\001 \002(\0132\t.Position\022\022\n\nclienttime\030"
    "\002 \002(\004\022\017\n\007SceneID\030\005 \002(\r\"S\n\014SC_MOVE_SYNC\022\036"
    "\n\013SyncPostion\030\001 \002(\0132\t.Position\022\022\n\nserver"
    "time\030\002 \002(\004\022\017\n\007SceneID\030\005 \002(\r\"Q\n\014CS_STOP_M"
    "OVE\022\034\n\tMyPostion\030\001 \002(\0132\t.Position\022\022\n\ncli"
    "enttime\030\002 \002(\004\022\017\n\007SceneID\030\003 \002(\r\"X\n\021SC_STO"
    "P_MOVE_SYNC\022\036\n\013SyncPostion\030\001 \003(\0132\t.Posit"
    "ion\022\022\n\nservertime\030\002 \002(\004\022\017\n\007SceneID\030\003 \002(\r"
    "\"_\n\rCS_FORCE_MOVE\022\020\n\010entityid\030\001 \002(\014\022\r\n\005D"
    "estX\030\002 \002(\002\022\r\n\005DestY\030\003 \002(\002\022\r\n\005DestZ\030\004 \002(\002"
    "\022\017\n\007SceneID\030\005 \002(\r\"_\n\rSC_FORCE_MOVE\022\020\n\010en"
    "tityid\030\001 \002(\014\022\r\n\005DestX\030\002 \002(\002\022\r\n\005DestY\030\003 \002"
    "(\002\022\r\n\005DestZ\030\004 \002(\002\022\017\n\007SceneID\030\005 \002(\r\"v\n\021CS"
    "_TURN_DIRECTION\022\020\n\010entityid\030\001 \002(\014\022\r\n\005Des"
    "tX\030\002 \002(\002\022\r\n\005DestY\030\003 \002(\002\022\r\n\005DestZ\030\004 \002(\002\022\021"
    "\n\tDirection\030\005 \002(\002\022\017\n\007SceneID\030\006 \002(\r\"v\n\021SC"
    "_TURN_DIRECTION\022\020\n\010entityid\030\001 \002(\014\022\r\n\005Des"
    "tX\030\002 \002(\002\022\r\n\005DestY\030\003 \002(\002\022\r\n\005DestZ\030\004 \002(\002\022\021"
    "\n\tDirection\030\005 \002(\002\022\017\n\007SceneID\030\006 \002(\r\"\243\001\n\020S"
    "C_CREATE_ENTITY\022\017\n\007SceneID\030\001 \002(\r\0220\n\016Enti"
    "tiesCreate\030\002 \003(\0132\030.SC_CREATE_ENTITY.Enti"
    "ty\032L\n\006Entity\022\020\n\010EntityID\030\001 \002(\014\022\022\n\nEntity"
    "Info\030\002 \002(\014\022\034\n\tEntityPos\030\003 \002(\0132\t.Position"
    "\"=\n\021SC_DESTROY_ENTITY\022\017\n\007SceneID\030\001 \002(\r\022\027"
    "\n\017EntitiesDestroy\030\002 \003(\014\"\035\n\007CS_PING\022\022\n\ncl"
    "ienttime\030\001 \002(\004\"6\n\014SC_PING_BACK\022\022\n\nclient"
    "time\030\001 \002(\004\022\022\n\nservertime\030\002 \002(\004\";\n\021CS_PIN"
    "G_BACK_BACK\022\022\n\nclienttime\030\001 \002(\004\022\022\n\nserve"
    "rtime\030\002 \002(\004\"\262\001\n\024ConnectServerRequest\022/\n\004"
    "type\030\001 \002(\0162!.ConnectServerRequest.Reques"
    "tType\022\020\n\010deviceid\030\002 \002(\014\022\020\n\010entityid\030\003 \001("
    "\014\022\017\n\007authmsg\030\004 \001(\014\"4\n\013RequestType\022\022\n\016NEW"
    "_CONNECTION\020\000\022\021\n\rRE_CONNECTION\020\001\"\313\001\n\022Con"
    "nectServerReply\022+\n\004type\030\001 \002(\0162\035.ConnectS"
    "erverReply.ReplyType\022\020\n\010extramsg\030\002 \001(\014\"v"
    "\n\tReplyType\022\010\n\004BUSY\020\000\022\r\n\tCONNECTED\020\001\022\027\n\023"
    "RECONNECT_SUCCEEDED\020\002\022\024\n\020RECONNECT_FAILE"
    "D\020\003\022\r\n\tFORBIDDEN\020\004\022\022\n\016MAX_CONNECTION\020\005\":"
    "\n\023CS_RUN_STATE_CHANGE\022\020\n\010entityid\030\001 \002(\014\022"
    "\021\n\tisrunning\030\002 \002(\010\"7\n\020CS_ROTATE_CHANGE\022\020"
    "\n\010entityid\030\001 \002(\014\022\021\n\trotationY\030\002 \002(\002\":\n\023S"
    "C_RUN_STATE_CHANGE\022\020\n\010entityid\030\001 \002(\014\022\021\n\t"
    "isrunning\030\002 \002(\010\"7\n\020SC_ROTATE_CHANGE\022\020\n\010e"
    "ntityid\030\001 \002(\014\022\021\n\trotationY\030\002 \002(\002", 2032);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LuaMessage.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LuaMessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LuaMessage_2eproto_once_);
void protobuf_AddDesc_LuaMessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LuaMessage_2eproto_once_,
                 &protobuf_AddDesc_LuaMessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LuaMessage_2eproto {
  StaticDescriptorInitializer_LuaMessage_2eproto() {
    protobuf_AddDesc_LuaMessage_2eproto();
  }
} static_descriptor_initializer_LuaMessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_Lua_RunRequest::kOpcodeFieldNumber;
const int CS_Lua_RunRequest::kParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_Lua_RunRequest::CS_Lua_RunRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_Lua_RunRequest)
}

void CS_Lua_RunRequest::InitAsDefaultInstance() {
}

CS_Lua_RunRequest::CS_Lua_RunRequest(const CS_Lua_RunRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_Lua_RunRequest)
}

void CS_Lua_RunRequest::SharedCtor() {
  _cached_size_ = 0;
  parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opcode_ = 0u;
}

CS_Lua_RunRequest::~CS_Lua_RunRequest() {
  // @@protoc_insertion_point(destructor:CS_Lua_RunRequest)
  SharedDtor();
}

void CS_Lua_RunRequest::SharedDtor() {
  parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_Lua_RunRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_Lua_RunRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_Lua_RunRequest_descriptor_;
}

const CS_Lua_RunRequest& CS_Lua_RunRequest::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_Lua_RunRequest> CS_Lua_RunRequest_default_instance_;

CS_Lua_RunRequest* CS_Lua_RunRequest::New(::google::protobuf::Arena* arena) const {
  CS_Lua_RunRequest* n = new CS_Lua_RunRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_Lua_RunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_Lua_RunRequest)
  if (_has_bits_[0 / 32] & 3u) {
    opcode_ = 0u;
    if (has_parameters()) {
      parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_Lua_RunRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_Lua_RunRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 opcode = 1;
      case 1: {
        if (tag == 8) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parameters;
        break;
      }

      // optional bytes parameters = 2;
      case 2: {
        if (tag == 18) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_Lua_RunRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_Lua_RunRequest)
  return false;
#undef DO_
}

void CS_Lua_RunRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_Lua_RunRequest)
  // required uint32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opcode(), output);
  }

  // optional bytes parameters = 2;
  if (has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->parameters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_Lua_RunRequest)
}

::google::protobuf::uint8* CS_Lua_RunRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_Lua_RunRequest)
  // required uint32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opcode(), target);
  }

  // optional bytes parameters = 2;
  if (has_parameters()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->parameters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_Lua_RunRequest)
  return target;
}

size_t CS_Lua_RunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_Lua_RunRequest)
  size_t total_size = 0;

  // required uint32 opcode = 1;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }
  // optional bytes parameters = 2;
  if (has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parameters());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_Lua_RunRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_Lua_RunRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_Lua_RunRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_Lua_RunRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_Lua_RunRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_Lua_RunRequest)
    UnsafeMergeFrom(*source);
  }
}

void CS_Lua_RunRequest::MergeFrom(const CS_Lua_RunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_Lua_RunRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_Lua_RunRequest::UnsafeMergeFrom(const CS_Lua_RunRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_parameters()) {
      set_has_parameters();
      parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameters_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_Lua_RunRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_Lua_RunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_Lua_RunRequest::CopyFrom(const CS_Lua_RunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_Lua_RunRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_Lua_RunRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_Lua_RunRequest::Swap(CS_Lua_RunRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_Lua_RunRequest::InternalSwap(CS_Lua_RunRequest* other) {
  std::swap(opcode_, other->opcode_);
  parameters_.Swap(&other->parameters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_Lua_RunRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_Lua_RunRequest_descriptor_;
  metadata.reflection = CS_Lua_RunRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_Lua_RunRequest

// required uint32 opcode = 1;
bool CS_Lua_RunRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_Lua_RunRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_Lua_RunRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_Lua_RunRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 CS_Lua_RunRequest::opcode() const {
  // @@protoc_insertion_point(field_get:CS_Lua_RunRequest.opcode)
  return opcode_;
}
void CS_Lua_RunRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:CS_Lua_RunRequest.opcode)
}

// optional bytes parameters = 2;
bool CS_Lua_RunRequest::has_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_Lua_RunRequest::set_has_parameters() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_Lua_RunRequest::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_Lua_RunRequest::clear_parameters() {
  parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameters();
}
const ::std::string& CS_Lua_RunRequest::parameters() const {
  // @@protoc_insertion_point(field_get:CS_Lua_RunRequest.parameters)
  return parameters_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_Lua_RunRequest::set_parameters(const ::std::string& value) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_Lua_RunRequest.parameters)
}
void CS_Lua_RunRequest::set_parameters(const char* value) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_Lua_RunRequest.parameters)
}
void CS_Lua_RunRequest::set_parameters(const void* value, size_t size) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_Lua_RunRequest.parameters)
}
::std::string* CS_Lua_RunRequest::mutable_parameters() {
  set_has_parameters();
  // @@protoc_insertion_point(field_mutable:CS_Lua_RunRequest.parameters)
  return parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_Lua_RunRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:CS_Lua_RunRequest.parameters)
  clear_has_parameters();
  return parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_Lua_RunRequest::set_allocated_parameters(::std::string* parameters) {
  if (parameters != NULL) {
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters);
  // @@protoc_insertion_point(field_set_allocated:CS_Lua_RunRequest.parameters)
}

inline const CS_Lua_RunRequest* CS_Lua_RunRequest::internal_default_instance() {
  return &CS_Lua_RunRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_Lua_RunRequest::kOpcodeFieldNumber;
const int SC_Lua_RunRequest::kParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_Lua_RunRequest::SC_Lua_RunRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_Lua_RunRequest)
}

void SC_Lua_RunRequest::InitAsDefaultInstance() {
}

SC_Lua_RunRequest::SC_Lua_RunRequest(const SC_Lua_RunRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_Lua_RunRequest)
}

void SC_Lua_RunRequest::SharedCtor() {
  _cached_size_ = 0;
  parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opcode_ = 0u;
}

SC_Lua_RunRequest::~SC_Lua_RunRequest() {
  // @@protoc_insertion_point(destructor:SC_Lua_RunRequest)
  SharedDtor();
}

void SC_Lua_RunRequest::SharedDtor() {
  parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_Lua_RunRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_Lua_RunRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_Lua_RunRequest_descriptor_;
}

const SC_Lua_RunRequest& SC_Lua_RunRequest::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_Lua_RunRequest> SC_Lua_RunRequest_default_instance_;

SC_Lua_RunRequest* SC_Lua_RunRequest::New(::google::protobuf::Arena* arena) const {
  SC_Lua_RunRequest* n = new SC_Lua_RunRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_Lua_RunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_Lua_RunRequest)
  if (_has_bits_[0 / 32] & 3u) {
    opcode_ = 0u;
    if (has_parameters()) {
      parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_Lua_RunRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_Lua_RunRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 opcode = 1;
      case 1: {
        if (tag == 8) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parameters;
        break;
      }

      // optional bytes parameters = 2;
      case 2: {
        if (tag == 18) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_Lua_RunRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_Lua_RunRequest)
  return false;
#undef DO_
}

void SC_Lua_RunRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_Lua_RunRequest)
  // required uint32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opcode(), output);
  }

  // optional bytes parameters = 2;
  if (has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->parameters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_Lua_RunRequest)
}

::google::protobuf::uint8* SC_Lua_RunRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_Lua_RunRequest)
  // required uint32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opcode(), target);
  }

  // optional bytes parameters = 2;
  if (has_parameters()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->parameters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_Lua_RunRequest)
  return target;
}

size_t SC_Lua_RunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_Lua_RunRequest)
  size_t total_size = 0;

  // required uint32 opcode = 1;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }
  // optional bytes parameters = 2;
  if (has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parameters());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_Lua_RunRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_Lua_RunRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_Lua_RunRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_Lua_RunRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_Lua_RunRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_Lua_RunRequest)
    UnsafeMergeFrom(*source);
  }
}

void SC_Lua_RunRequest::MergeFrom(const SC_Lua_RunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_Lua_RunRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_Lua_RunRequest::UnsafeMergeFrom(const SC_Lua_RunRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_parameters()) {
      set_has_parameters();
      parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameters_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_Lua_RunRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_Lua_RunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_Lua_RunRequest::CopyFrom(const SC_Lua_RunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_Lua_RunRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_Lua_RunRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_Lua_RunRequest::Swap(SC_Lua_RunRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_Lua_RunRequest::InternalSwap(SC_Lua_RunRequest* other) {
  std::swap(opcode_, other->opcode_);
  parameters_.Swap(&other->parameters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_Lua_RunRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_Lua_RunRequest_descriptor_;
  metadata.reflection = SC_Lua_RunRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_Lua_RunRequest

// required uint32 opcode = 1;
bool SC_Lua_RunRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_Lua_RunRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_Lua_RunRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_Lua_RunRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 SC_Lua_RunRequest::opcode() const {
  // @@protoc_insertion_point(field_get:SC_Lua_RunRequest.opcode)
  return opcode_;
}
void SC_Lua_RunRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:SC_Lua_RunRequest.opcode)
}

// optional bytes parameters = 2;
bool SC_Lua_RunRequest::has_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_Lua_RunRequest::set_has_parameters() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_Lua_RunRequest::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_Lua_RunRequest::clear_parameters() {
  parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameters();
}
const ::std::string& SC_Lua_RunRequest::parameters() const {
  // @@protoc_insertion_point(field_get:SC_Lua_RunRequest.parameters)
  return parameters_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_Lua_RunRequest::set_parameters(const ::std::string& value) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_Lua_RunRequest.parameters)
}
void SC_Lua_RunRequest::set_parameters(const char* value) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_Lua_RunRequest.parameters)
}
void SC_Lua_RunRequest::set_parameters(const void* value, size_t size) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_Lua_RunRequest.parameters)
}
::std::string* SC_Lua_RunRequest::mutable_parameters() {
  set_has_parameters();
  // @@protoc_insertion_point(field_mutable:SC_Lua_RunRequest.parameters)
  return parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_Lua_RunRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:SC_Lua_RunRequest.parameters)
  clear_has_parameters();
  return parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_Lua_RunRequest::set_allocated_parameters(::std::string* parameters) {
  if (parameters != NULL) {
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters);
  // @@protoc_insertion_point(field_set_allocated:SC_Lua_RunRequest.parameters)
}

inline const SC_Lua_RunRequest* SC_Lua_RunRequest::internal_default_instance() {
  return &SC_Lua_RunRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kEntityidFieldNumber;
const int Position::kDestXFieldNumber;
const int Position::kDestYFieldNumber;
const int Position::kDestZFieldNumber;
const int Position::kOrientationFieldNumber;
const int Position::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&destx_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&destx_) + sizeof(speed_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:Position)
  SharedDtor();
}

void Position::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Position> Position_default_instance_;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(destx_, speed_);
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_DestX;
        break;
      }

      // required float DestX = 2;
      case 2: {
        if (tag == 21) {
         parse_DestX:
          set_has_destx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_DestY;
        break;
      }

      // required float DestY = 3;
      case 3: {
        if (tag == 29) {
         parse_DestY:
          set_has_desty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_DestZ;
        break;
      }

      // required float DestZ = 4;
      case 4: {
        if (tag == 37) {
         parse_DestZ:
          set_has_destz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destz_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Orientation;
        break;
      }

      // required float Orientation = 5;
      case 5: {
        if (tag == 45) {
         parse_Orientation:
          set_has_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_Speed;
        break;
      }

      // required float Speed = 6;
      case 6: {
        if (tag == 53) {
         parse_Speed:
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Position)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required float DestX = 2;
  if (has_destx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->destx(), output);
  }

  // required float DestY = 3;
  if (has_desty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->desty(), output);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->destz(), output);
  }

  // required float Orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->orientation(), output);
  }

  // required float Speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Position)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required float DestX = 2;
  if (has_destx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->destx(), target);
  }

  // required float DestY = 3;
  if (has_desty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->desty(), target);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->destz(), target);
  }

  // required float Orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->orientation(), target);
  }

  // required float Speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Position)
  return target;
}

size_t Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Position)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_destx()) {
    // required float DestX = 2;
    total_size += 1 + 4;
  }

  if (has_desty()) {
    // required float DestY = 3;
    total_size += 1 + 4;
  }

  if (has_destz()) {
    // required float DestZ = 4;
    total_size += 1 + 4;
  }

  if (has_orientation()) {
    // required float Orientation = 5;
    total_size += 1 + 4;
  }

  if (has_speed()) {
    // required float Speed = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Position)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required float DestX = 2;
    total_size += 1 + 4;

    // required float DestY = 3;
    total_size += 1 + 4;

    // required float DestZ = 4;
    total_size += 1 + 4;

    // required float Orientation = 5;
    total_size += 1 + 4;

    // required float Speed = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Position)
    UnsafeMergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Position)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Position::UnsafeMergeFrom(const Position& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_destx()) {
      set_destx(from.destx());
    }
    if (from.has_desty()) {
      set_desty(from.desty());
    }
    if (from.has_destz()) {
      set_destz(from.destz());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(destx_, other->destx_);
  std::swap(desty_, other->desty_);
  std::swap(destz_, other->destz_);
  std::swap(orientation_, other->orientation_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// required bytes entityid = 1;
bool Position::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Position::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void Position::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Position::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& Position::entityid() const {
  // @@protoc_insertion_point(field_get:Position.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Position::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Position.entityid)
}
void Position::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Position.entityid)
}
void Position::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Position.entityid)
}
::std::string* Position::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:Position.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Position::release_entityid() {
  // @@protoc_insertion_point(field_release:Position.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Position::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:Position.entityid)
}

// required float DestX = 2;
bool Position::has_destx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Position::set_has_destx() {
  _has_bits_[0] |= 0x00000002u;
}
void Position::clear_has_destx() {
  _has_bits_[0] &= ~0x00000002u;
}
void Position::clear_destx() {
  destx_ = 0;
  clear_has_destx();
}
float Position::destx() const {
  // @@protoc_insertion_point(field_get:Position.DestX)
  return destx_;
}
void Position::set_destx(float value) {
  set_has_destx();
  destx_ = value;
  // @@protoc_insertion_point(field_set:Position.DestX)
}

// required float DestY = 3;
bool Position::has_desty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Position::set_has_desty() {
  _has_bits_[0] |= 0x00000004u;
}
void Position::clear_has_desty() {
  _has_bits_[0] &= ~0x00000004u;
}
void Position::clear_desty() {
  desty_ = 0;
  clear_has_desty();
}
float Position::desty() const {
  // @@protoc_insertion_point(field_get:Position.DestY)
  return desty_;
}
void Position::set_desty(float value) {
  set_has_desty();
  desty_ = value;
  // @@protoc_insertion_point(field_set:Position.DestY)
}

// required float DestZ = 4;
bool Position::has_destz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Position::set_has_destz() {
  _has_bits_[0] |= 0x00000008u;
}
void Position::clear_has_destz() {
  _has_bits_[0] &= ~0x00000008u;
}
void Position::clear_destz() {
  destz_ = 0;
  clear_has_destz();
}
float Position::destz() const {
  // @@protoc_insertion_point(field_get:Position.DestZ)
  return destz_;
}
void Position::set_destz(float value) {
  set_has_destz();
  destz_ = value;
  // @@protoc_insertion_point(field_set:Position.DestZ)
}

// required float Orientation = 5;
bool Position::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Position::set_has_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
void Position::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
void Position::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
float Position::orientation() const {
  // @@protoc_insertion_point(field_get:Position.Orientation)
  return orientation_;
}
void Position::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:Position.Orientation)
}

// required float Speed = 6;
bool Position::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Position::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void Position::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void Position::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
float Position::speed() const {
  // @@protoc_insertion_point(field_get:Position.Speed)
  return speed_;
}
void Position::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:Position.Speed)
}

inline const Position* Position::internal_default_instance() {
  return &Position_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_CLIENT_MOVE::kMyPostionFieldNumber;
const int CS_CLIENT_MOVE::kClienttimeFieldNumber;
const int CS_CLIENT_MOVE::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_CLIENT_MOVE::CS_CLIENT_MOVE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CLIENT_MOVE)
}

void CS_CLIENT_MOVE::InitAsDefaultInstance() {
  mypostion_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
}

CS_CLIENT_MOVE::CS_CLIENT_MOVE(const CS_CLIENT_MOVE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_CLIENT_MOVE)
}

void CS_CLIENT_MOVE::SharedCtor() {
  _cached_size_ = 0;
  mypostion_ = NULL;
  ::memset(&clienttime_, 0, reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&clienttime_) + sizeof(sceneid_));
}

CS_CLIENT_MOVE::~CS_CLIENT_MOVE() {
  // @@protoc_insertion_point(destructor:CS_CLIENT_MOVE)
  SharedDtor();
}

void CS_CLIENT_MOVE::SharedDtor() {
  if (this != &CS_CLIENT_MOVE_default_instance_.get()) {
    delete mypostion_;
  }
}

void CS_CLIENT_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_CLIENT_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_CLIENT_MOVE_descriptor_;
}

const CS_CLIENT_MOVE& CS_CLIENT_MOVE::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_CLIENT_MOVE> CS_CLIENT_MOVE_default_instance_;

CS_CLIENT_MOVE* CS_CLIENT_MOVE::New(::google::protobuf::Arena* arena) const {
  CS_CLIENT_MOVE* n = new CS_CLIENT_MOVE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_CLIENT_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CLIENT_MOVE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_CLIENT_MOVE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_CLIENT_MOVE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(clienttime_, sceneid_);
    if (has_mypostion()) {
      if (mypostion_ != NULL) mypostion_->::Position::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_CLIENT_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_CLIENT_MOVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Position MyPostion = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mypostion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clienttime;
        break;
      }

      // required uint64 clienttime = 2;
      case 2: {
        if (tag == 16) {
         parse_clienttime:
          set_has_clienttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clienttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 5;
      case 5: {
        if (tag == 40) {
         parse_SceneID:
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_CLIENT_MOVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_CLIENT_MOVE)
  return false;
#undef DO_
}

void CS_CLIENT_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_CLIENT_MOVE)
  // required .Position MyPostion = 1;
  if (has_mypostion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mypostion_, output);
  }

  // required uint64 clienttime = 2;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clienttime(), output);
  }

  // required uint32 SceneID = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_CLIENT_MOVE)
}

::google::protobuf::uint8* CS_CLIENT_MOVE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_CLIENT_MOVE)
  // required .Position MyPostion = 1;
  if (has_mypostion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mypostion_, false, target);
  }

  // required uint64 clienttime = 2;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clienttime(), target);
  }

  // required uint32 SceneID = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_CLIENT_MOVE)
  return target;
}

size_t CS_CLIENT_MOVE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_CLIENT_MOVE)
  size_t total_size = 0;

  if (has_mypostion()) {
    // required .Position MyPostion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mypostion_);
  }

  if (has_clienttime()) {
    // required uint64 clienttime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());
  }

  if (has_sceneid()) {
    // required uint32 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  return total_size;
}
size_t CS_CLIENT_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CLIENT_MOVE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Position MyPostion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mypostion_);

    // required uint64 clienttime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());

    // required uint32 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_CLIENT_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CLIENT_MOVE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_CLIENT_MOVE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_CLIENT_MOVE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CLIENT_MOVE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CLIENT_MOVE)
    UnsafeMergeFrom(*source);
  }
}

void CS_CLIENT_MOVE::MergeFrom(const CS_CLIENT_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CLIENT_MOVE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_CLIENT_MOVE::UnsafeMergeFrom(const CS_CLIENT_MOVE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mypostion()) {
      mutable_mypostion()->::Position::MergeFrom(from.mypostion());
    }
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_CLIENT_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CLIENT_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CLIENT_MOVE::CopyFrom(const CS_CLIENT_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CLIENT_MOVE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_CLIENT_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_mypostion()) {
    if (!this->mypostion_->IsInitialized()) return false;
  }
  return true;
}

void CS_CLIENT_MOVE::Swap(CS_CLIENT_MOVE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_CLIENT_MOVE::InternalSwap(CS_CLIENT_MOVE* other) {
  std::swap(mypostion_, other->mypostion_);
  std::swap(clienttime_, other->clienttime_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_CLIENT_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_CLIENT_MOVE_descriptor_;
  metadata.reflection = CS_CLIENT_MOVE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_CLIENT_MOVE

// required .Position MyPostion = 1;
bool CS_CLIENT_MOVE::has_mypostion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_CLIENT_MOVE::set_has_mypostion() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_CLIENT_MOVE::clear_has_mypostion() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_CLIENT_MOVE::clear_mypostion() {
  if (mypostion_ != NULL) mypostion_->::Position::Clear();
  clear_has_mypostion();
}
const ::Position& CS_CLIENT_MOVE::mypostion() const {
  // @@protoc_insertion_point(field_get:CS_CLIENT_MOVE.MyPostion)
  return mypostion_ != NULL ? *mypostion_
                         : *::Position::internal_default_instance();
}
::Position* CS_CLIENT_MOVE::mutable_mypostion() {
  set_has_mypostion();
  if (mypostion_ == NULL) {
    mypostion_ = new ::Position;
  }
  // @@protoc_insertion_point(field_mutable:CS_CLIENT_MOVE.MyPostion)
  return mypostion_;
}
::Position* CS_CLIENT_MOVE::release_mypostion() {
  // @@protoc_insertion_point(field_release:CS_CLIENT_MOVE.MyPostion)
  clear_has_mypostion();
  ::Position* temp = mypostion_;
  mypostion_ = NULL;
  return temp;
}
void CS_CLIENT_MOVE::set_allocated_mypostion(::Position* mypostion) {
  delete mypostion_;
  mypostion_ = mypostion;
  if (mypostion) {
    set_has_mypostion();
  } else {
    clear_has_mypostion();
  }
  // @@protoc_insertion_point(field_set_allocated:CS_CLIENT_MOVE.MyPostion)
}

// required uint64 clienttime = 2;
bool CS_CLIENT_MOVE::has_clienttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_CLIENT_MOVE::set_has_clienttime() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_CLIENT_MOVE::clear_has_clienttime() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_CLIENT_MOVE::clear_clienttime() {
  clienttime_ = GOOGLE_ULONGLONG(0);
  clear_has_clienttime();
}
::google::protobuf::uint64 CS_CLIENT_MOVE::clienttime() const {
  // @@protoc_insertion_point(field_get:CS_CLIENT_MOVE.clienttime)
  return clienttime_;
}
void CS_CLIENT_MOVE::set_clienttime(::google::protobuf::uint64 value) {
  set_has_clienttime();
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:CS_CLIENT_MOVE.clienttime)
}

// required uint32 SceneID = 5;
bool CS_CLIENT_MOVE::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_CLIENT_MOVE::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_CLIENT_MOVE::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_CLIENT_MOVE::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 CS_CLIENT_MOVE::sceneid() const {
  // @@protoc_insertion_point(field_get:CS_CLIENT_MOVE.SceneID)
  return sceneid_;
}
void CS_CLIENT_MOVE::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:CS_CLIENT_MOVE.SceneID)
}

inline const CS_CLIENT_MOVE* CS_CLIENT_MOVE::internal_default_instance() {
  return &CS_CLIENT_MOVE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_MOVE_SYNC::kSyncPostionFieldNumber;
const int SC_MOVE_SYNC::kServertimeFieldNumber;
const int SC_MOVE_SYNC::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_MOVE_SYNC::SC_MOVE_SYNC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_MOVE_SYNC)
}

void SC_MOVE_SYNC::InitAsDefaultInstance() {
  syncpostion_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
}

SC_MOVE_SYNC::SC_MOVE_SYNC(const SC_MOVE_SYNC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_MOVE_SYNC)
}

void SC_MOVE_SYNC::SharedCtor() {
  _cached_size_ = 0;
  syncpostion_ = NULL;
  ::memset(&servertime_, 0, reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&servertime_) + sizeof(sceneid_));
}

SC_MOVE_SYNC::~SC_MOVE_SYNC() {
  // @@protoc_insertion_point(destructor:SC_MOVE_SYNC)
  SharedDtor();
}

void SC_MOVE_SYNC::SharedDtor() {
  if (this != &SC_MOVE_SYNC_default_instance_.get()) {
    delete syncpostion_;
  }
}

void SC_MOVE_SYNC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_MOVE_SYNC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_MOVE_SYNC_descriptor_;
}

const SC_MOVE_SYNC& SC_MOVE_SYNC::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_MOVE_SYNC> SC_MOVE_SYNC_default_instance_;

SC_MOVE_SYNC* SC_MOVE_SYNC::New(::google::protobuf::Arena* arena) const {
  SC_MOVE_SYNC* n = new SC_MOVE_SYNC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_MOVE_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_MOVE_SYNC)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_MOVE_SYNC, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_MOVE_SYNC*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(servertime_, sceneid_);
    if (has_syncpostion()) {
      if (syncpostion_ != NULL) syncpostion_->::Position::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_MOVE_SYNC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_MOVE_SYNC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Position SyncPostion = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncpostion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_servertime;
        break;
      }

      // required uint64 servertime = 2;
      case 2: {
        if (tag == 16) {
         parse_servertime:
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 5;
      case 5: {
        if (tag == 40) {
         parse_SceneID:
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_MOVE_SYNC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_MOVE_SYNC)
  return false;
#undef DO_
}

void SC_MOVE_SYNC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_MOVE_SYNC)
  // required .Position SyncPostion = 1;
  if (has_syncpostion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->syncpostion_, output);
  }

  // required uint64 servertime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->servertime(), output);
  }

  // required uint32 SceneID = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_MOVE_SYNC)
}

::google::protobuf::uint8* SC_MOVE_SYNC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_MOVE_SYNC)
  // required .Position SyncPostion = 1;
  if (has_syncpostion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->syncpostion_, false, target);
  }

  // required uint64 servertime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->servertime(), target);
  }

  // required uint32 SceneID = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_MOVE_SYNC)
  return target;
}

size_t SC_MOVE_SYNC::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_MOVE_SYNC)
  size_t total_size = 0;

  if (has_syncpostion()) {
    // required .Position SyncPostion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->syncpostion_);
  }

  if (has_servertime()) {
    // required uint64 servertime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertime());
  }

  if (has_sceneid()) {
    // required uint32 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  return total_size;
}
size_t SC_MOVE_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_MOVE_SYNC)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Position SyncPostion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->syncpostion_);

    // required uint64 servertime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertime());

    // required uint32 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_MOVE_SYNC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_MOVE_SYNC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_MOVE_SYNC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_MOVE_SYNC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_MOVE_SYNC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_MOVE_SYNC)
    UnsafeMergeFrom(*source);
  }
}

void SC_MOVE_SYNC::MergeFrom(const SC_MOVE_SYNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_MOVE_SYNC)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_MOVE_SYNC::UnsafeMergeFrom(const SC_MOVE_SYNC& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syncpostion()) {
      mutable_syncpostion()->::Position::MergeFrom(from.syncpostion());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_MOVE_SYNC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_MOVE_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_MOVE_SYNC::CopyFrom(const SC_MOVE_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_MOVE_SYNC)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_MOVE_SYNC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_syncpostion()) {
    if (!this->syncpostion_->IsInitialized()) return false;
  }
  return true;
}

void SC_MOVE_SYNC::Swap(SC_MOVE_SYNC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_MOVE_SYNC::InternalSwap(SC_MOVE_SYNC* other) {
  std::swap(syncpostion_, other->syncpostion_);
  std::swap(servertime_, other->servertime_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_MOVE_SYNC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_MOVE_SYNC_descriptor_;
  metadata.reflection = SC_MOVE_SYNC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_MOVE_SYNC

// required .Position SyncPostion = 1;
bool SC_MOVE_SYNC::has_syncpostion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_MOVE_SYNC::set_has_syncpostion() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_MOVE_SYNC::clear_has_syncpostion() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_MOVE_SYNC::clear_syncpostion() {
  if (syncpostion_ != NULL) syncpostion_->::Position::Clear();
  clear_has_syncpostion();
}
const ::Position& SC_MOVE_SYNC::syncpostion() const {
  // @@protoc_insertion_point(field_get:SC_MOVE_SYNC.SyncPostion)
  return syncpostion_ != NULL ? *syncpostion_
                         : *::Position::internal_default_instance();
}
::Position* SC_MOVE_SYNC::mutable_syncpostion() {
  set_has_syncpostion();
  if (syncpostion_ == NULL) {
    syncpostion_ = new ::Position;
  }
  // @@protoc_insertion_point(field_mutable:SC_MOVE_SYNC.SyncPostion)
  return syncpostion_;
}
::Position* SC_MOVE_SYNC::release_syncpostion() {
  // @@protoc_insertion_point(field_release:SC_MOVE_SYNC.SyncPostion)
  clear_has_syncpostion();
  ::Position* temp = syncpostion_;
  syncpostion_ = NULL;
  return temp;
}
void SC_MOVE_SYNC::set_allocated_syncpostion(::Position* syncpostion) {
  delete syncpostion_;
  syncpostion_ = syncpostion;
  if (syncpostion) {
    set_has_syncpostion();
  } else {
    clear_has_syncpostion();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_MOVE_SYNC.SyncPostion)
}

// required uint64 servertime = 2;
bool SC_MOVE_SYNC::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_MOVE_SYNC::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_MOVE_SYNC::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_MOVE_SYNC::clear_servertime() {
  servertime_ = GOOGLE_ULONGLONG(0);
  clear_has_servertime();
}
::google::protobuf::uint64 SC_MOVE_SYNC::servertime() const {
  // @@protoc_insertion_point(field_get:SC_MOVE_SYNC.servertime)
  return servertime_;
}
void SC_MOVE_SYNC::set_servertime(::google::protobuf::uint64 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:SC_MOVE_SYNC.servertime)
}

// required uint32 SceneID = 5;
bool SC_MOVE_SYNC::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_MOVE_SYNC::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_MOVE_SYNC::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_MOVE_SYNC::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 SC_MOVE_SYNC::sceneid() const {
  // @@protoc_insertion_point(field_get:SC_MOVE_SYNC.SceneID)
  return sceneid_;
}
void SC_MOVE_SYNC::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:SC_MOVE_SYNC.SceneID)
}

inline const SC_MOVE_SYNC* SC_MOVE_SYNC::internal_default_instance() {
  return &SC_MOVE_SYNC_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_STOP_MOVE::kMyPostionFieldNumber;
const int CS_STOP_MOVE::kClienttimeFieldNumber;
const int CS_STOP_MOVE::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_STOP_MOVE::CS_STOP_MOVE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_STOP_MOVE)
}

void CS_STOP_MOVE::InitAsDefaultInstance() {
  mypostion_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
}

CS_STOP_MOVE::CS_STOP_MOVE(const CS_STOP_MOVE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_STOP_MOVE)
}

void CS_STOP_MOVE::SharedCtor() {
  _cached_size_ = 0;
  mypostion_ = NULL;
  ::memset(&clienttime_, 0, reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&clienttime_) + sizeof(sceneid_));
}

CS_STOP_MOVE::~CS_STOP_MOVE() {
  // @@protoc_insertion_point(destructor:CS_STOP_MOVE)
  SharedDtor();
}

void CS_STOP_MOVE::SharedDtor() {
  if (this != &CS_STOP_MOVE_default_instance_.get()) {
    delete mypostion_;
  }
}

void CS_STOP_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_STOP_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_STOP_MOVE_descriptor_;
}

const CS_STOP_MOVE& CS_STOP_MOVE::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_STOP_MOVE> CS_STOP_MOVE_default_instance_;

CS_STOP_MOVE* CS_STOP_MOVE::New(::google::protobuf::Arena* arena) const {
  CS_STOP_MOVE* n = new CS_STOP_MOVE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_STOP_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_STOP_MOVE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_STOP_MOVE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_STOP_MOVE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(clienttime_, sceneid_);
    if (has_mypostion()) {
      if (mypostion_ != NULL) mypostion_->::Position::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_STOP_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_STOP_MOVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Position MyPostion = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mypostion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clienttime;
        break;
      }

      // required uint64 clienttime = 2;
      case 2: {
        if (tag == 16) {
         parse_clienttime:
          set_has_clienttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clienttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 3;
      case 3: {
        if (tag == 24) {
         parse_SceneID:
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_STOP_MOVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_STOP_MOVE)
  return false;
#undef DO_
}

void CS_STOP_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_STOP_MOVE)
  // required .Position MyPostion = 1;
  if (has_mypostion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mypostion_, output);
  }

  // required uint64 clienttime = 2;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clienttime(), output);
  }

  // required uint32 SceneID = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_STOP_MOVE)
}

::google::protobuf::uint8* CS_STOP_MOVE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_STOP_MOVE)
  // required .Position MyPostion = 1;
  if (has_mypostion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mypostion_, false, target);
  }

  // required uint64 clienttime = 2;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clienttime(), target);
  }

  // required uint32 SceneID = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_STOP_MOVE)
  return target;
}

size_t CS_STOP_MOVE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_STOP_MOVE)
  size_t total_size = 0;

  if (has_mypostion()) {
    // required .Position MyPostion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mypostion_);
  }

  if (has_clienttime()) {
    // required uint64 clienttime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());
  }

  if (has_sceneid()) {
    // required uint32 SceneID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  return total_size;
}
size_t CS_STOP_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_STOP_MOVE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Position MyPostion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mypostion_);

    // required uint64 clienttime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());

    // required uint32 SceneID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_STOP_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_STOP_MOVE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_STOP_MOVE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_STOP_MOVE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_STOP_MOVE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_STOP_MOVE)
    UnsafeMergeFrom(*source);
  }
}

void CS_STOP_MOVE::MergeFrom(const CS_STOP_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_STOP_MOVE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_STOP_MOVE::UnsafeMergeFrom(const CS_STOP_MOVE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mypostion()) {
      mutable_mypostion()->::Position::MergeFrom(from.mypostion());
    }
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_STOP_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_STOP_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_STOP_MOVE::CopyFrom(const CS_STOP_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_STOP_MOVE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_STOP_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_mypostion()) {
    if (!this->mypostion_->IsInitialized()) return false;
  }
  return true;
}

void CS_STOP_MOVE::Swap(CS_STOP_MOVE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_STOP_MOVE::InternalSwap(CS_STOP_MOVE* other) {
  std::swap(mypostion_, other->mypostion_);
  std::swap(clienttime_, other->clienttime_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_STOP_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_STOP_MOVE_descriptor_;
  metadata.reflection = CS_STOP_MOVE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_STOP_MOVE

// required .Position MyPostion = 1;
bool CS_STOP_MOVE::has_mypostion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_STOP_MOVE::set_has_mypostion() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_STOP_MOVE::clear_has_mypostion() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_STOP_MOVE::clear_mypostion() {
  if (mypostion_ != NULL) mypostion_->::Position::Clear();
  clear_has_mypostion();
}
const ::Position& CS_STOP_MOVE::mypostion() const {
  // @@protoc_insertion_point(field_get:CS_STOP_MOVE.MyPostion)
  return mypostion_ != NULL ? *mypostion_
                         : *::Position::internal_default_instance();
}
::Position* CS_STOP_MOVE::mutable_mypostion() {
  set_has_mypostion();
  if (mypostion_ == NULL) {
    mypostion_ = new ::Position;
  }
  // @@protoc_insertion_point(field_mutable:CS_STOP_MOVE.MyPostion)
  return mypostion_;
}
::Position* CS_STOP_MOVE::release_mypostion() {
  // @@protoc_insertion_point(field_release:CS_STOP_MOVE.MyPostion)
  clear_has_mypostion();
  ::Position* temp = mypostion_;
  mypostion_ = NULL;
  return temp;
}
void CS_STOP_MOVE::set_allocated_mypostion(::Position* mypostion) {
  delete mypostion_;
  mypostion_ = mypostion;
  if (mypostion) {
    set_has_mypostion();
  } else {
    clear_has_mypostion();
  }
  // @@protoc_insertion_point(field_set_allocated:CS_STOP_MOVE.MyPostion)
}

// required uint64 clienttime = 2;
bool CS_STOP_MOVE::has_clienttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_STOP_MOVE::set_has_clienttime() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_STOP_MOVE::clear_has_clienttime() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_STOP_MOVE::clear_clienttime() {
  clienttime_ = GOOGLE_ULONGLONG(0);
  clear_has_clienttime();
}
::google::protobuf::uint64 CS_STOP_MOVE::clienttime() const {
  // @@protoc_insertion_point(field_get:CS_STOP_MOVE.clienttime)
  return clienttime_;
}
void CS_STOP_MOVE::set_clienttime(::google::protobuf::uint64 value) {
  set_has_clienttime();
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:CS_STOP_MOVE.clienttime)
}

// required uint32 SceneID = 3;
bool CS_STOP_MOVE::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_STOP_MOVE::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_STOP_MOVE::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_STOP_MOVE::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 CS_STOP_MOVE::sceneid() const {
  // @@protoc_insertion_point(field_get:CS_STOP_MOVE.SceneID)
  return sceneid_;
}
void CS_STOP_MOVE::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:CS_STOP_MOVE.SceneID)
}

inline const CS_STOP_MOVE* CS_STOP_MOVE::internal_default_instance() {
  return &CS_STOP_MOVE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_STOP_MOVE_SYNC::kSyncPostionFieldNumber;
const int SC_STOP_MOVE_SYNC::kServertimeFieldNumber;
const int SC_STOP_MOVE_SYNC::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_STOP_MOVE_SYNC::SC_STOP_MOVE_SYNC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STOP_MOVE_SYNC)
}

void SC_STOP_MOVE_SYNC::InitAsDefaultInstance() {
}

SC_STOP_MOVE_SYNC::SC_STOP_MOVE_SYNC(const SC_STOP_MOVE_SYNC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_STOP_MOVE_SYNC)
}

void SC_STOP_MOVE_SYNC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&servertime_, 0, reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&servertime_) + sizeof(sceneid_));
}

SC_STOP_MOVE_SYNC::~SC_STOP_MOVE_SYNC() {
  // @@protoc_insertion_point(destructor:SC_STOP_MOVE_SYNC)
  SharedDtor();
}

void SC_STOP_MOVE_SYNC::SharedDtor() {
}

void SC_STOP_MOVE_SYNC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_STOP_MOVE_SYNC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_STOP_MOVE_SYNC_descriptor_;
}

const SC_STOP_MOVE_SYNC& SC_STOP_MOVE_SYNC::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_STOP_MOVE_SYNC> SC_STOP_MOVE_SYNC_default_instance_;

SC_STOP_MOVE_SYNC* SC_STOP_MOVE_SYNC::New(::google::protobuf::Arena* arena) const {
  SC_STOP_MOVE_SYNC* n = new SC_STOP_MOVE_SYNC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_STOP_MOVE_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STOP_MOVE_SYNC)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_STOP_MOVE_SYNC, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_STOP_MOVE_SYNC*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(servertime_, sceneid_);

#undef ZR_HELPER_
#undef ZR_

  syncpostion_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_STOP_MOVE_SYNC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_STOP_MOVE_SYNC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Position SyncPostion = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_SyncPostion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_syncpostion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_SyncPostion;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_servertime;
        break;
      }

      // required uint64 servertime = 2;
      case 2: {
        if (tag == 16) {
         parse_servertime:
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 3;
      case 3: {
        if (tag == 24) {
         parse_SceneID:
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_STOP_MOVE_SYNC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_STOP_MOVE_SYNC)
  return false;
#undef DO_
}

void SC_STOP_MOVE_SYNC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_STOP_MOVE_SYNC)
  // repeated .Position SyncPostion = 1;
  for (unsigned int i = 0, n = this->syncpostion_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->syncpostion(i), output);
  }

  // required uint64 servertime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->servertime(), output);
  }

  // required uint32 SceneID = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_STOP_MOVE_SYNC)
}

::google::protobuf::uint8* SC_STOP_MOVE_SYNC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_STOP_MOVE_SYNC)
  // repeated .Position SyncPostion = 1;
  for (unsigned int i = 0, n = this->syncpostion_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->syncpostion(i), false, target);
  }

  // required uint64 servertime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->servertime(), target);
  }

  // required uint32 SceneID = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_STOP_MOVE_SYNC)
  return target;
}

size_t SC_STOP_MOVE_SYNC::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_STOP_MOVE_SYNC)
  size_t total_size = 0;

  if (has_servertime()) {
    // required uint64 servertime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertime());
  }

  if (has_sceneid()) {
    // required uint32 SceneID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  return total_size;
}
size_t SC_STOP_MOVE_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STOP_MOVE_SYNC)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint64 servertime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertime());

    // required uint32 SceneID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Position SyncPostion = 1;
  {
    unsigned int count = this->syncpostion_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncpostion(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_STOP_MOVE_SYNC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STOP_MOVE_SYNC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_STOP_MOVE_SYNC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_STOP_MOVE_SYNC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STOP_MOVE_SYNC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STOP_MOVE_SYNC)
    UnsafeMergeFrom(*source);
  }
}

void SC_STOP_MOVE_SYNC::MergeFrom(const SC_STOP_MOVE_SYNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STOP_MOVE_SYNC)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_STOP_MOVE_SYNC::UnsafeMergeFrom(const SC_STOP_MOVE_SYNC& from) {
  GOOGLE_DCHECK(&from != this);
  syncpostion_.MergeFrom(from.syncpostion_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_STOP_MOVE_SYNC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STOP_MOVE_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STOP_MOVE_SYNC::CopyFrom(const SC_STOP_MOVE_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STOP_MOVE_SYNC)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_STOP_MOVE_SYNC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->syncpostion())) return false;
  return true;
}

void SC_STOP_MOVE_SYNC::Swap(SC_STOP_MOVE_SYNC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_STOP_MOVE_SYNC::InternalSwap(SC_STOP_MOVE_SYNC* other) {
  syncpostion_.UnsafeArenaSwap(&other->syncpostion_);
  std::swap(servertime_, other->servertime_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_STOP_MOVE_SYNC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_STOP_MOVE_SYNC_descriptor_;
  metadata.reflection = SC_STOP_MOVE_SYNC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_STOP_MOVE_SYNC

// repeated .Position SyncPostion = 1;
int SC_STOP_MOVE_SYNC::syncpostion_size() const {
  return syncpostion_.size();
}
void SC_STOP_MOVE_SYNC::clear_syncpostion() {
  syncpostion_.Clear();
}
const ::Position& SC_STOP_MOVE_SYNC::syncpostion(int index) const {
  // @@protoc_insertion_point(field_get:SC_STOP_MOVE_SYNC.SyncPostion)
  return syncpostion_.Get(index);
}
::Position* SC_STOP_MOVE_SYNC::mutable_syncpostion(int index) {
  // @@protoc_insertion_point(field_mutable:SC_STOP_MOVE_SYNC.SyncPostion)
  return syncpostion_.Mutable(index);
}
::Position* SC_STOP_MOVE_SYNC::add_syncpostion() {
  // @@protoc_insertion_point(field_add:SC_STOP_MOVE_SYNC.SyncPostion)
  return syncpostion_.Add();
}
::google::protobuf::RepeatedPtrField< ::Position >*
SC_STOP_MOVE_SYNC::mutable_syncpostion() {
  // @@protoc_insertion_point(field_mutable_list:SC_STOP_MOVE_SYNC.SyncPostion)
  return &syncpostion_;
}
const ::google::protobuf::RepeatedPtrField< ::Position >&
SC_STOP_MOVE_SYNC::syncpostion() const {
  // @@protoc_insertion_point(field_list:SC_STOP_MOVE_SYNC.SyncPostion)
  return syncpostion_;
}

// required uint64 servertime = 2;
bool SC_STOP_MOVE_SYNC::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_STOP_MOVE_SYNC::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_STOP_MOVE_SYNC::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_STOP_MOVE_SYNC::clear_servertime() {
  servertime_ = GOOGLE_ULONGLONG(0);
  clear_has_servertime();
}
::google::protobuf::uint64 SC_STOP_MOVE_SYNC::servertime() const {
  // @@protoc_insertion_point(field_get:SC_STOP_MOVE_SYNC.servertime)
  return servertime_;
}
void SC_STOP_MOVE_SYNC::set_servertime(::google::protobuf::uint64 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:SC_STOP_MOVE_SYNC.servertime)
}

// required uint32 SceneID = 3;
bool SC_STOP_MOVE_SYNC::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_STOP_MOVE_SYNC::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_STOP_MOVE_SYNC::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_STOP_MOVE_SYNC::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 SC_STOP_MOVE_SYNC::sceneid() const {
  // @@protoc_insertion_point(field_get:SC_STOP_MOVE_SYNC.SceneID)
  return sceneid_;
}
void SC_STOP_MOVE_SYNC::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:SC_STOP_MOVE_SYNC.SceneID)
}

inline const SC_STOP_MOVE_SYNC* SC_STOP_MOVE_SYNC::internal_default_instance() {
  return &SC_STOP_MOVE_SYNC_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_FORCE_MOVE::kEntityidFieldNumber;
const int CS_FORCE_MOVE::kDestXFieldNumber;
const int CS_FORCE_MOVE::kDestYFieldNumber;
const int CS_FORCE_MOVE::kDestZFieldNumber;
const int CS_FORCE_MOVE::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_FORCE_MOVE::CS_FORCE_MOVE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_FORCE_MOVE)
}

void CS_FORCE_MOVE::InitAsDefaultInstance() {
}

CS_FORCE_MOVE::CS_FORCE_MOVE(const CS_FORCE_MOVE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_FORCE_MOVE)
}

void CS_FORCE_MOVE::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&destx_, 0, reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&destx_) + sizeof(sceneid_));
}

CS_FORCE_MOVE::~CS_FORCE_MOVE() {
  // @@protoc_insertion_point(destructor:CS_FORCE_MOVE)
  SharedDtor();
}

void CS_FORCE_MOVE::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_FORCE_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FORCE_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FORCE_MOVE_descriptor_;
}

const CS_FORCE_MOVE& CS_FORCE_MOVE::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_FORCE_MOVE> CS_FORCE_MOVE_default_instance_;

CS_FORCE_MOVE* CS_FORCE_MOVE::New(::google::protobuf::Arena* arena) const {
  CS_FORCE_MOVE* n = new CS_FORCE_MOVE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_FORCE_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_FORCE_MOVE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_FORCE_MOVE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_FORCE_MOVE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(destx_, sceneid_);
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_FORCE_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_FORCE_MOVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_DestX;
        break;
      }

      // required float DestX = 2;
      case 2: {
        if (tag == 21) {
         parse_DestX:
          set_has_destx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_DestY;
        break;
      }

      // required float DestY = 3;
      case 3: {
        if (tag == 29) {
         parse_DestY:
          set_has_desty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_DestZ;
        break;
      }

      // required float DestZ = 4;
      case 4: {
        if (tag == 37) {
         parse_DestZ:
          set_has_destz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destz_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 5;
      case 5: {
        if (tag == 40) {
         parse_SceneID:
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_FORCE_MOVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_FORCE_MOVE)
  return false;
#undef DO_
}

void CS_FORCE_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_FORCE_MOVE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required float DestX = 2;
  if (has_destx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->destx(), output);
  }

  // required float DestY = 3;
  if (has_desty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->desty(), output);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->destz(), output);
  }

  // required uint32 SceneID = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_FORCE_MOVE)
}

::google::protobuf::uint8* CS_FORCE_MOVE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_FORCE_MOVE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required float DestX = 2;
  if (has_destx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->destx(), target);
  }

  // required float DestY = 3;
  if (has_desty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->desty(), target);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->destz(), target);
  }

  // required uint32 SceneID = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_FORCE_MOVE)
  return target;
}

size_t CS_FORCE_MOVE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_FORCE_MOVE)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_destx()) {
    // required float DestX = 2;
    total_size += 1 + 4;
  }

  if (has_desty()) {
    // required float DestY = 3;
    total_size += 1 + 4;
  }

  if (has_destz()) {
    // required float DestZ = 4;
    total_size += 1 + 4;
  }

  if (has_sceneid()) {
    // required uint32 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  return total_size;
}
size_t CS_FORCE_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_FORCE_MOVE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required float DestX = 2;
    total_size += 1 + 4;

    // required float DestY = 3;
    total_size += 1 + 4;

    // required float DestZ = 4;
    total_size += 1 + 4;

    // required uint32 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FORCE_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_FORCE_MOVE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_FORCE_MOVE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_FORCE_MOVE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_FORCE_MOVE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_FORCE_MOVE)
    UnsafeMergeFrom(*source);
  }
}

void CS_FORCE_MOVE::MergeFrom(const CS_FORCE_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_FORCE_MOVE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_FORCE_MOVE::UnsafeMergeFrom(const CS_FORCE_MOVE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_destx()) {
      set_destx(from.destx());
    }
    if (from.has_desty()) {
      set_desty(from.desty());
    }
    if (from.has_destz()) {
      set_destz(from.destz());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_FORCE_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_FORCE_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FORCE_MOVE::CopyFrom(const CS_FORCE_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_FORCE_MOVE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_FORCE_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CS_FORCE_MOVE::Swap(CS_FORCE_MOVE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_FORCE_MOVE::InternalSwap(CS_FORCE_MOVE* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(destx_, other->destx_);
  std::swap(desty_, other->desty_);
  std::swap(destz_, other->destz_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_FORCE_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FORCE_MOVE_descriptor_;
  metadata.reflection = CS_FORCE_MOVE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_FORCE_MOVE

// required bytes entityid = 1;
bool CS_FORCE_MOVE::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_FORCE_MOVE::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_FORCE_MOVE::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_FORCE_MOVE::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& CS_FORCE_MOVE::entityid() const {
  // @@protoc_insertion_point(field_get:CS_FORCE_MOVE.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_FORCE_MOVE::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_FORCE_MOVE.entityid)
}
void CS_FORCE_MOVE::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_FORCE_MOVE.entityid)
}
void CS_FORCE_MOVE::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_FORCE_MOVE.entityid)
}
::std::string* CS_FORCE_MOVE::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:CS_FORCE_MOVE.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_FORCE_MOVE::release_entityid() {
  // @@protoc_insertion_point(field_release:CS_FORCE_MOVE.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_FORCE_MOVE::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:CS_FORCE_MOVE.entityid)
}

// required float DestX = 2;
bool CS_FORCE_MOVE::has_destx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_FORCE_MOVE::set_has_destx() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_FORCE_MOVE::clear_has_destx() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_FORCE_MOVE::clear_destx() {
  destx_ = 0;
  clear_has_destx();
}
float CS_FORCE_MOVE::destx() const {
  // @@protoc_insertion_point(field_get:CS_FORCE_MOVE.DestX)
  return destx_;
}
void CS_FORCE_MOVE::set_destx(float value) {
  set_has_destx();
  destx_ = value;
  // @@protoc_insertion_point(field_set:CS_FORCE_MOVE.DestX)
}

// required float DestY = 3;
bool CS_FORCE_MOVE::has_desty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_FORCE_MOVE::set_has_desty() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_FORCE_MOVE::clear_has_desty() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_FORCE_MOVE::clear_desty() {
  desty_ = 0;
  clear_has_desty();
}
float CS_FORCE_MOVE::desty() const {
  // @@protoc_insertion_point(field_get:CS_FORCE_MOVE.DestY)
  return desty_;
}
void CS_FORCE_MOVE::set_desty(float value) {
  set_has_desty();
  desty_ = value;
  // @@protoc_insertion_point(field_set:CS_FORCE_MOVE.DestY)
}

// required float DestZ = 4;
bool CS_FORCE_MOVE::has_destz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CS_FORCE_MOVE::set_has_destz() {
  _has_bits_[0] |= 0x00000008u;
}
void CS_FORCE_MOVE::clear_has_destz() {
  _has_bits_[0] &= ~0x00000008u;
}
void CS_FORCE_MOVE::clear_destz() {
  destz_ = 0;
  clear_has_destz();
}
float CS_FORCE_MOVE::destz() const {
  // @@protoc_insertion_point(field_get:CS_FORCE_MOVE.DestZ)
  return destz_;
}
void CS_FORCE_MOVE::set_destz(float value) {
  set_has_destz();
  destz_ = value;
  // @@protoc_insertion_point(field_set:CS_FORCE_MOVE.DestZ)
}

// required uint32 SceneID = 5;
bool CS_FORCE_MOVE::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CS_FORCE_MOVE::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
void CS_FORCE_MOVE::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CS_FORCE_MOVE::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 CS_FORCE_MOVE::sceneid() const {
  // @@protoc_insertion_point(field_get:CS_FORCE_MOVE.SceneID)
  return sceneid_;
}
void CS_FORCE_MOVE::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:CS_FORCE_MOVE.SceneID)
}

inline const CS_FORCE_MOVE* CS_FORCE_MOVE::internal_default_instance() {
  return &CS_FORCE_MOVE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_FORCE_MOVE::kEntityidFieldNumber;
const int SC_FORCE_MOVE::kDestXFieldNumber;
const int SC_FORCE_MOVE::kDestYFieldNumber;
const int SC_FORCE_MOVE::kDestZFieldNumber;
const int SC_FORCE_MOVE::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_FORCE_MOVE::SC_FORCE_MOVE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_FORCE_MOVE)
}

void SC_FORCE_MOVE::InitAsDefaultInstance() {
}

SC_FORCE_MOVE::SC_FORCE_MOVE(const SC_FORCE_MOVE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_FORCE_MOVE)
}

void SC_FORCE_MOVE::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&destx_, 0, reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&destx_) + sizeof(sceneid_));
}

SC_FORCE_MOVE::~SC_FORCE_MOVE() {
  // @@protoc_insertion_point(destructor:SC_FORCE_MOVE)
  SharedDtor();
}

void SC_FORCE_MOVE::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_FORCE_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FORCE_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FORCE_MOVE_descriptor_;
}

const SC_FORCE_MOVE& SC_FORCE_MOVE::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_FORCE_MOVE> SC_FORCE_MOVE_default_instance_;

SC_FORCE_MOVE* SC_FORCE_MOVE::New(::google::protobuf::Arena* arena) const {
  SC_FORCE_MOVE* n = new SC_FORCE_MOVE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_FORCE_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_FORCE_MOVE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_FORCE_MOVE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_FORCE_MOVE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(destx_, sceneid_);
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_FORCE_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_FORCE_MOVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_DestX;
        break;
      }

      // required float DestX = 2;
      case 2: {
        if (tag == 21) {
         parse_DestX:
          set_has_destx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_DestY;
        break;
      }

      // required float DestY = 3;
      case 3: {
        if (tag == 29) {
         parse_DestY:
          set_has_desty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_DestZ;
        break;
      }

      // required float DestZ = 4;
      case 4: {
        if (tag == 37) {
         parse_DestZ:
          set_has_destz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destz_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 5;
      case 5: {
        if (tag == 40) {
         parse_SceneID:
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_FORCE_MOVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_FORCE_MOVE)
  return false;
#undef DO_
}

void SC_FORCE_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_FORCE_MOVE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required float DestX = 2;
  if (has_destx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->destx(), output);
  }

  // required float DestY = 3;
  if (has_desty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->desty(), output);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->destz(), output);
  }

  // required uint32 SceneID = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_FORCE_MOVE)
}

::google::protobuf::uint8* SC_FORCE_MOVE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_FORCE_MOVE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required float DestX = 2;
  if (has_destx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->destx(), target);
  }

  // required float DestY = 3;
  if (has_desty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->desty(), target);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->destz(), target);
  }

  // required uint32 SceneID = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_FORCE_MOVE)
  return target;
}

size_t SC_FORCE_MOVE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_FORCE_MOVE)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_destx()) {
    // required float DestX = 2;
    total_size += 1 + 4;
  }

  if (has_desty()) {
    // required float DestY = 3;
    total_size += 1 + 4;
  }

  if (has_destz()) {
    // required float DestZ = 4;
    total_size += 1 + 4;
  }

  if (has_sceneid()) {
    // required uint32 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  return total_size;
}
size_t SC_FORCE_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_FORCE_MOVE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required float DestX = 2;
    total_size += 1 + 4;

    // required float DestY = 3;
    total_size += 1 + 4;

    // required float DestZ = 4;
    total_size += 1 + 4;

    // required uint32 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FORCE_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_FORCE_MOVE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_FORCE_MOVE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_FORCE_MOVE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_FORCE_MOVE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_FORCE_MOVE)
    UnsafeMergeFrom(*source);
  }
}

void SC_FORCE_MOVE::MergeFrom(const SC_FORCE_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_FORCE_MOVE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_FORCE_MOVE::UnsafeMergeFrom(const SC_FORCE_MOVE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_destx()) {
      set_destx(from.destx());
    }
    if (from.has_desty()) {
      set_desty(from.desty());
    }
    if (from.has_destz()) {
      set_destz(from.destz());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_FORCE_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_FORCE_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FORCE_MOVE::CopyFrom(const SC_FORCE_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_FORCE_MOVE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_FORCE_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SC_FORCE_MOVE::Swap(SC_FORCE_MOVE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_FORCE_MOVE::InternalSwap(SC_FORCE_MOVE* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(destx_, other->destx_);
  std::swap(desty_, other->desty_);
  std::swap(destz_, other->destz_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_FORCE_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FORCE_MOVE_descriptor_;
  metadata.reflection = SC_FORCE_MOVE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_FORCE_MOVE

// required bytes entityid = 1;
bool SC_FORCE_MOVE::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_FORCE_MOVE::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_FORCE_MOVE::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_FORCE_MOVE::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& SC_FORCE_MOVE::entityid() const {
  // @@protoc_insertion_point(field_get:SC_FORCE_MOVE.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_FORCE_MOVE::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_FORCE_MOVE.entityid)
}
void SC_FORCE_MOVE::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_FORCE_MOVE.entityid)
}
void SC_FORCE_MOVE::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_FORCE_MOVE.entityid)
}
::std::string* SC_FORCE_MOVE::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:SC_FORCE_MOVE.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_FORCE_MOVE::release_entityid() {
  // @@protoc_insertion_point(field_release:SC_FORCE_MOVE.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_FORCE_MOVE::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:SC_FORCE_MOVE.entityid)
}

// required float DestX = 2;
bool SC_FORCE_MOVE::has_destx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_FORCE_MOVE::set_has_destx() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_FORCE_MOVE::clear_has_destx() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_FORCE_MOVE::clear_destx() {
  destx_ = 0;
  clear_has_destx();
}
float SC_FORCE_MOVE::destx() const {
  // @@protoc_insertion_point(field_get:SC_FORCE_MOVE.DestX)
  return destx_;
}
void SC_FORCE_MOVE::set_destx(float value) {
  set_has_destx();
  destx_ = value;
  // @@protoc_insertion_point(field_set:SC_FORCE_MOVE.DestX)
}

// required float DestY = 3;
bool SC_FORCE_MOVE::has_desty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_FORCE_MOVE::set_has_desty() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_FORCE_MOVE::clear_has_desty() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_FORCE_MOVE::clear_desty() {
  desty_ = 0;
  clear_has_desty();
}
float SC_FORCE_MOVE::desty() const {
  // @@protoc_insertion_point(field_get:SC_FORCE_MOVE.DestY)
  return desty_;
}
void SC_FORCE_MOVE::set_desty(float value) {
  set_has_desty();
  desty_ = value;
  // @@protoc_insertion_point(field_set:SC_FORCE_MOVE.DestY)
}

// required float DestZ = 4;
bool SC_FORCE_MOVE::has_destz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_FORCE_MOVE::set_has_destz() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_FORCE_MOVE::clear_has_destz() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_FORCE_MOVE::clear_destz() {
  destz_ = 0;
  clear_has_destz();
}
float SC_FORCE_MOVE::destz() const {
  // @@protoc_insertion_point(field_get:SC_FORCE_MOVE.DestZ)
  return destz_;
}
void SC_FORCE_MOVE::set_destz(float value) {
  set_has_destz();
  destz_ = value;
  // @@protoc_insertion_point(field_set:SC_FORCE_MOVE.DestZ)
}

// required uint32 SceneID = 5;
bool SC_FORCE_MOVE::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_FORCE_MOVE::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_FORCE_MOVE::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_FORCE_MOVE::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 SC_FORCE_MOVE::sceneid() const {
  // @@protoc_insertion_point(field_get:SC_FORCE_MOVE.SceneID)
  return sceneid_;
}
void SC_FORCE_MOVE::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:SC_FORCE_MOVE.SceneID)
}

inline const SC_FORCE_MOVE* SC_FORCE_MOVE::internal_default_instance() {
  return &SC_FORCE_MOVE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_TURN_DIRECTION::kEntityidFieldNumber;
const int CS_TURN_DIRECTION::kDestXFieldNumber;
const int CS_TURN_DIRECTION::kDestYFieldNumber;
const int CS_TURN_DIRECTION::kDestZFieldNumber;
const int CS_TURN_DIRECTION::kDirectionFieldNumber;
const int CS_TURN_DIRECTION::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_TURN_DIRECTION::CS_TURN_DIRECTION()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TURN_DIRECTION)
}

void CS_TURN_DIRECTION::InitAsDefaultInstance() {
}

CS_TURN_DIRECTION::CS_TURN_DIRECTION(const CS_TURN_DIRECTION& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_TURN_DIRECTION)
}

void CS_TURN_DIRECTION::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&destx_, 0, reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&destx_) + sizeof(sceneid_));
}

CS_TURN_DIRECTION::~CS_TURN_DIRECTION() {
  // @@protoc_insertion_point(destructor:CS_TURN_DIRECTION)
  SharedDtor();
}

void CS_TURN_DIRECTION::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_TURN_DIRECTION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_TURN_DIRECTION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_TURN_DIRECTION_descriptor_;
}

const CS_TURN_DIRECTION& CS_TURN_DIRECTION::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_TURN_DIRECTION> CS_TURN_DIRECTION_default_instance_;

CS_TURN_DIRECTION* CS_TURN_DIRECTION::New(::google::protobuf::Arena* arena) const {
  CS_TURN_DIRECTION* n = new CS_TURN_DIRECTION;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_TURN_DIRECTION::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TURN_DIRECTION)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_TURN_DIRECTION, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_TURN_DIRECTION*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(destx_, sceneid_);
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_TURN_DIRECTION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_TURN_DIRECTION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_DestX;
        break;
      }

      // required float DestX = 2;
      case 2: {
        if (tag == 21) {
         parse_DestX:
          set_has_destx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_DestY;
        break;
      }

      // required float DestY = 3;
      case 3: {
        if (tag == 29) {
         parse_DestY:
          set_has_desty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_DestZ;
        break;
      }

      // required float DestZ = 4;
      case 4: {
        if (tag == 37) {
         parse_DestZ:
          set_has_destz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destz_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Direction;
        break;
      }

      // required float Direction = 5;
      case 5: {
        if (tag == 45) {
         parse_Direction:
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 6;
      case 6: {
        if (tag == 48) {
         parse_SceneID:
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_TURN_DIRECTION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_TURN_DIRECTION)
  return false;
#undef DO_
}

void CS_TURN_DIRECTION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_TURN_DIRECTION)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required float DestX = 2;
  if (has_destx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->destx(), output);
  }

  // required float DestY = 3;
  if (has_desty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->desty(), output);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->destz(), output);
  }

  // required float Direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->direction(), output);
  }

  // required uint32 SceneID = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sceneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_TURN_DIRECTION)
}

::google::protobuf::uint8* CS_TURN_DIRECTION::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_TURN_DIRECTION)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required float DestX = 2;
  if (has_destx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->destx(), target);
  }

  // required float DestY = 3;
  if (has_desty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->desty(), target);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->destz(), target);
  }

  // required float Direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->direction(), target);
  }

  // required uint32 SceneID = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sceneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TURN_DIRECTION)
  return target;
}

size_t CS_TURN_DIRECTION::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_TURN_DIRECTION)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_destx()) {
    // required float DestX = 2;
    total_size += 1 + 4;
  }

  if (has_desty()) {
    // required float DestY = 3;
    total_size += 1 + 4;
  }

  if (has_destz()) {
    // required float DestZ = 4;
    total_size += 1 + 4;
  }

  if (has_direction()) {
    // required float Direction = 5;
    total_size += 1 + 4;
  }

  if (has_sceneid()) {
    // required uint32 SceneID = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  return total_size;
}
size_t CS_TURN_DIRECTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TURN_DIRECTION)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required float DestX = 2;
    total_size += 1 + 4;

    // required float DestY = 3;
    total_size += 1 + 4;

    // required float DestZ = 4;
    total_size += 1 + 4;

    // required float Direction = 5;
    total_size += 1 + 4;

    // required uint32 SceneID = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_TURN_DIRECTION::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TURN_DIRECTION)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_TURN_DIRECTION* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_TURN_DIRECTION>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TURN_DIRECTION)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TURN_DIRECTION)
    UnsafeMergeFrom(*source);
  }
}

void CS_TURN_DIRECTION::MergeFrom(const CS_TURN_DIRECTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TURN_DIRECTION)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_TURN_DIRECTION::UnsafeMergeFrom(const CS_TURN_DIRECTION& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_destx()) {
      set_destx(from.destx());
    }
    if (from.has_desty()) {
      set_desty(from.desty());
    }
    if (from.has_destz()) {
      set_destz(from.destz());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_TURN_DIRECTION::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TURN_DIRECTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TURN_DIRECTION::CopyFrom(const CS_TURN_DIRECTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TURN_DIRECTION)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_TURN_DIRECTION::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CS_TURN_DIRECTION::Swap(CS_TURN_DIRECTION* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_TURN_DIRECTION::InternalSwap(CS_TURN_DIRECTION* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(destx_, other->destx_);
  std::swap(desty_, other->desty_);
  std::swap(destz_, other->destz_);
  std::swap(direction_, other->direction_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_TURN_DIRECTION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_TURN_DIRECTION_descriptor_;
  metadata.reflection = CS_TURN_DIRECTION_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_TURN_DIRECTION

// required bytes entityid = 1;
bool CS_TURN_DIRECTION::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_TURN_DIRECTION::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_TURN_DIRECTION::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_TURN_DIRECTION::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& CS_TURN_DIRECTION::entityid() const {
  // @@protoc_insertion_point(field_get:CS_TURN_DIRECTION.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_TURN_DIRECTION::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_TURN_DIRECTION.entityid)
}
void CS_TURN_DIRECTION::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_TURN_DIRECTION.entityid)
}
void CS_TURN_DIRECTION::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_TURN_DIRECTION.entityid)
}
::std::string* CS_TURN_DIRECTION::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:CS_TURN_DIRECTION.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_TURN_DIRECTION::release_entityid() {
  // @@protoc_insertion_point(field_release:CS_TURN_DIRECTION.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_TURN_DIRECTION::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:CS_TURN_DIRECTION.entityid)
}

// required float DestX = 2;
bool CS_TURN_DIRECTION::has_destx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_TURN_DIRECTION::set_has_destx() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_TURN_DIRECTION::clear_has_destx() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_TURN_DIRECTION::clear_destx() {
  destx_ = 0;
  clear_has_destx();
}
float CS_TURN_DIRECTION::destx() const {
  // @@protoc_insertion_point(field_get:CS_TURN_DIRECTION.DestX)
  return destx_;
}
void CS_TURN_DIRECTION::set_destx(float value) {
  set_has_destx();
  destx_ = value;
  // @@protoc_insertion_point(field_set:CS_TURN_DIRECTION.DestX)
}

// required float DestY = 3;
bool CS_TURN_DIRECTION::has_desty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CS_TURN_DIRECTION::set_has_desty() {
  _has_bits_[0] |= 0x00000004u;
}
void CS_TURN_DIRECTION::clear_has_desty() {
  _has_bits_[0] &= ~0x00000004u;
}
void CS_TURN_DIRECTION::clear_desty() {
  desty_ = 0;
  clear_has_desty();
}
float CS_TURN_DIRECTION::desty() const {
  // @@protoc_insertion_point(field_get:CS_TURN_DIRECTION.DestY)
  return desty_;
}
void CS_TURN_DIRECTION::set_desty(float value) {
  set_has_desty();
  desty_ = value;
  // @@protoc_insertion_point(field_set:CS_TURN_DIRECTION.DestY)
}

// required float DestZ = 4;
bool CS_TURN_DIRECTION::has_destz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CS_TURN_DIRECTION::set_has_destz() {
  _has_bits_[0] |= 0x00000008u;
}
void CS_TURN_DIRECTION::clear_has_destz() {
  _has_bits_[0] &= ~0x00000008u;
}
void CS_TURN_DIRECTION::clear_destz() {
  destz_ = 0;
  clear_has_destz();
}
float CS_TURN_DIRECTION::destz() const {
  // @@protoc_insertion_point(field_get:CS_TURN_DIRECTION.DestZ)
  return destz_;
}
void CS_TURN_DIRECTION::set_destz(float value) {
  set_has_destz();
  destz_ = value;
  // @@protoc_insertion_point(field_set:CS_TURN_DIRECTION.DestZ)
}

// required float Direction = 5;
bool CS_TURN_DIRECTION::has_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CS_TURN_DIRECTION::set_has_direction() {
  _has_bits_[0] |= 0x00000010u;
}
void CS_TURN_DIRECTION::clear_has_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
void CS_TURN_DIRECTION::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
float CS_TURN_DIRECTION::direction() const {
  // @@protoc_insertion_point(field_get:CS_TURN_DIRECTION.Direction)
  return direction_;
}
void CS_TURN_DIRECTION::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:CS_TURN_DIRECTION.Direction)
}

// required uint32 SceneID = 6;
bool CS_TURN_DIRECTION::has_sceneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CS_TURN_DIRECTION::set_has_sceneid() {
  _has_bits_[0] |= 0x00000020u;
}
void CS_TURN_DIRECTION::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CS_TURN_DIRECTION::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 CS_TURN_DIRECTION::sceneid() const {
  // @@protoc_insertion_point(field_get:CS_TURN_DIRECTION.SceneID)
  return sceneid_;
}
void CS_TURN_DIRECTION::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:CS_TURN_DIRECTION.SceneID)
}

inline const CS_TURN_DIRECTION* CS_TURN_DIRECTION::internal_default_instance() {
  return &CS_TURN_DIRECTION_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_TURN_DIRECTION::kEntityidFieldNumber;
const int SC_TURN_DIRECTION::kDestXFieldNumber;
const int SC_TURN_DIRECTION::kDestYFieldNumber;
const int SC_TURN_DIRECTION::kDestZFieldNumber;
const int SC_TURN_DIRECTION::kDirectionFieldNumber;
const int SC_TURN_DIRECTION::kSceneIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_TURN_DIRECTION::SC_TURN_DIRECTION()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TURN_DIRECTION)
}

void SC_TURN_DIRECTION::InitAsDefaultInstance() {
}

SC_TURN_DIRECTION::SC_TURN_DIRECTION(const SC_TURN_DIRECTION& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_TURN_DIRECTION)
}

void SC_TURN_DIRECTION::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&destx_, 0, reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&destx_) + sizeof(sceneid_));
}

SC_TURN_DIRECTION::~SC_TURN_DIRECTION() {
  // @@protoc_insertion_point(destructor:SC_TURN_DIRECTION)
  SharedDtor();
}

void SC_TURN_DIRECTION::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_TURN_DIRECTION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_TURN_DIRECTION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_TURN_DIRECTION_descriptor_;
}

const SC_TURN_DIRECTION& SC_TURN_DIRECTION::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_TURN_DIRECTION> SC_TURN_DIRECTION_default_instance_;

SC_TURN_DIRECTION* SC_TURN_DIRECTION::New(::google::protobuf::Arena* arena) const {
  SC_TURN_DIRECTION* n = new SC_TURN_DIRECTION;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_TURN_DIRECTION::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TURN_DIRECTION)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_TURN_DIRECTION, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_TURN_DIRECTION*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(destx_, sceneid_);
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_TURN_DIRECTION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_TURN_DIRECTION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_DestX;
        break;
      }

      // required float DestX = 2;
      case 2: {
        if (tag == 21) {
         parse_DestX:
          set_has_destx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_DestY;
        break;
      }

      // required float DestY = 3;
      case 3: {
        if (tag == 29) {
         parse_DestY:
          set_has_desty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_DestZ;
        break;
      }

      // required float DestZ = 4;
      case 4: {
        if (tag == 37) {
         parse_DestZ:
          set_has_destz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destz_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Direction;
        break;
      }

      // required float Direction = 5;
      case 5: {
        if (tag == 45) {
         parse_Direction:
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 6;
      case 6: {
        if (tag == 48) {
         parse_SceneID:
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_TURN_DIRECTION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_TURN_DIRECTION)
  return false;
#undef DO_
}

void SC_TURN_DIRECTION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_TURN_DIRECTION)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required float DestX = 2;
  if (has_destx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->destx(), output);
  }

  // required float DestY = 3;
  if (has_desty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->desty(), output);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->destz(), output);
  }

  // required float Direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->direction(), output);
  }

  // required uint32 SceneID = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sceneid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_TURN_DIRECTION)
}

::google::protobuf::uint8* SC_TURN_DIRECTION::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_TURN_DIRECTION)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required float DestX = 2;
  if (has_destx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->destx(), target);
  }

  // required float DestY = 3;
  if (has_desty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->desty(), target);
  }

  // required float DestZ = 4;
  if (has_destz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->destz(), target);
  }

  // required float Direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->direction(), target);
  }

  // required uint32 SceneID = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sceneid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TURN_DIRECTION)
  return target;
}

size_t SC_TURN_DIRECTION::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_TURN_DIRECTION)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_destx()) {
    // required float DestX = 2;
    total_size += 1 + 4;
  }

  if (has_desty()) {
    // required float DestY = 3;
    total_size += 1 + 4;
  }

  if (has_destz()) {
    // required float DestZ = 4;
    total_size += 1 + 4;
  }

  if (has_direction()) {
    // required float Direction = 5;
    total_size += 1 + 4;
  }

  if (has_sceneid()) {
    // required uint32 SceneID = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  return total_size;
}
size_t SC_TURN_DIRECTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TURN_DIRECTION)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required float DestX = 2;
    total_size += 1 + 4;

    // required float DestY = 3;
    total_size += 1 + 4;

    // required float DestZ = 4;
    total_size += 1 + 4;

    // required float Direction = 5;
    total_size += 1 + 4;

    // required uint32 SceneID = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_TURN_DIRECTION::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TURN_DIRECTION)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_TURN_DIRECTION* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_TURN_DIRECTION>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TURN_DIRECTION)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TURN_DIRECTION)
    UnsafeMergeFrom(*source);
  }
}

void SC_TURN_DIRECTION::MergeFrom(const SC_TURN_DIRECTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TURN_DIRECTION)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_TURN_DIRECTION::UnsafeMergeFrom(const SC_TURN_DIRECTION& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_destx()) {
      set_destx(from.destx());
    }
    if (from.has_desty()) {
      set_desty(from.desty());
    }
    if (from.has_destz()) {
      set_destz(from.destz());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_TURN_DIRECTION::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TURN_DIRECTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TURN_DIRECTION::CopyFrom(const SC_TURN_DIRECTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TURN_DIRECTION)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_TURN_DIRECTION::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SC_TURN_DIRECTION::Swap(SC_TURN_DIRECTION* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_TURN_DIRECTION::InternalSwap(SC_TURN_DIRECTION* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(destx_, other->destx_);
  std::swap(desty_, other->desty_);
  std::swap(destz_, other->destz_);
  std::swap(direction_, other->direction_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_TURN_DIRECTION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_TURN_DIRECTION_descriptor_;
  metadata.reflection = SC_TURN_DIRECTION_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_TURN_DIRECTION

// required bytes entityid = 1;
bool SC_TURN_DIRECTION::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_TURN_DIRECTION::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_TURN_DIRECTION::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_TURN_DIRECTION::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& SC_TURN_DIRECTION::entityid() const {
  // @@protoc_insertion_point(field_get:SC_TURN_DIRECTION.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TURN_DIRECTION::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_TURN_DIRECTION.entityid)
}
void SC_TURN_DIRECTION::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_TURN_DIRECTION.entityid)
}
void SC_TURN_DIRECTION::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_TURN_DIRECTION.entityid)
}
::std::string* SC_TURN_DIRECTION::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:SC_TURN_DIRECTION.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_TURN_DIRECTION::release_entityid() {
  // @@protoc_insertion_point(field_release:SC_TURN_DIRECTION.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_TURN_DIRECTION::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:SC_TURN_DIRECTION.entityid)
}

// required float DestX = 2;
bool SC_TURN_DIRECTION::has_destx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_TURN_DIRECTION::set_has_destx() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_TURN_DIRECTION::clear_has_destx() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_TURN_DIRECTION::clear_destx() {
  destx_ = 0;
  clear_has_destx();
}
float SC_TURN_DIRECTION::destx() const {
  // @@protoc_insertion_point(field_get:SC_TURN_DIRECTION.DestX)
  return destx_;
}
void SC_TURN_DIRECTION::set_destx(float value) {
  set_has_destx();
  destx_ = value;
  // @@protoc_insertion_point(field_set:SC_TURN_DIRECTION.DestX)
}

// required float DestY = 3;
bool SC_TURN_DIRECTION::has_desty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_TURN_DIRECTION::set_has_desty() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_TURN_DIRECTION::clear_has_desty() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_TURN_DIRECTION::clear_desty() {
  desty_ = 0;
  clear_has_desty();
}
float SC_TURN_DIRECTION::desty() const {
  // @@protoc_insertion_point(field_get:SC_TURN_DIRECTION.DestY)
  return desty_;
}
void SC_TURN_DIRECTION::set_desty(float value) {
  set_has_desty();
  desty_ = value;
  // @@protoc_insertion_point(field_set:SC_TURN_DIRECTION.DestY)
}

// required float DestZ = 4;
bool SC_TURN_DIRECTION::has_destz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SC_TURN_DIRECTION::set_has_destz() {
  _has_bits_[0] |= 0x00000008u;
}
void SC_TURN_DIRECTION::clear_has_destz() {
  _has_bits_[0] &= ~0x00000008u;
}
void SC_TURN_DIRECTION::clear_destz() {
  destz_ = 0;
  clear_has_destz();
}
float SC_TURN_DIRECTION::destz() const {
  // @@protoc_insertion_point(field_get:SC_TURN_DIRECTION.DestZ)
  return destz_;
}
void SC_TURN_DIRECTION::set_destz(float value) {
  set_has_destz();
  destz_ = value;
  // @@protoc_insertion_point(field_set:SC_TURN_DIRECTION.DestZ)
}

// required float Direction = 5;
bool SC_TURN_DIRECTION::has_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SC_TURN_DIRECTION::set_has_direction() {
  _has_bits_[0] |= 0x00000010u;
}
void SC_TURN_DIRECTION::clear_has_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
void SC_TURN_DIRECTION::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
float SC_TURN_DIRECTION::direction() const {
  // @@protoc_insertion_point(field_get:SC_TURN_DIRECTION.Direction)
  return direction_;
}
void SC_TURN_DIRECTION::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:SC_TURN_DIRECTION.Direction)
}

// required uint32 SceneID = 6;
bool SC_TURN_DIRECTION::has_sceneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SC_TURN_DIRECTION::set_has_sceneid() {
  _has_bits_[0] |= 0x00000020u;
}
void SC_TURN_DIRECTION::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000020u;
}
void SC_TURN_DIRECTION::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 SC_TURN_DIRECTION::sceneid() const {
  // @@protoc_insertion_point(field_get:SC_TURN_DIRECTION.SceneID)
  return sceneid_;
}
void SC_TURN_DIRECTION::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:SC_TURN_DIRECTION.SceneID)
}

inline const SC_TURN_DIRECTION* SC_TURN_DIRECTION::internal_default_instance() {
  return &SC_TURN_DIRECTION_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_CREATE_ENTITY_Entity::kEntityIDFieldNumber;
const int SC_CREATE_ENTITY_Entity::kEntityInfoFieldNumber;
const int SC_CREATE_ENTITY_Entity::kEntityPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_CREATE_ENTITY_Entity::SC_CREATE_ENTITY_Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CREATE_ENTITY.Entity)
}

void SC_CREATE_ENTITY_Entity::InitAsDefaultInstance() {
  entitypos_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
}

SC_CREATE_ENTITY_Entity::SC_CREATE_ENTITY_Entity(const SC_CREATE_ENTITY_Entity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_CREATE_ENTITY.Entity)
}

void SC_CREATE_ENTITY_Entity::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entityinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entitypos_ = NULL;
}

SC_CREATE_ENTITY_Entity::~SC_CREATE_ENTITY_Entity() {
  // @@protoc_insertion_point(destructor:SC_CREATE_ENTITY.Entity)
  SharedDtor();
}

void SC_CREATE_ENTITY_Entity::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entityinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &SC_CREATE_ENTITY_Entity_default_instance_.get()) {
    delete entitypos_;
  }
}

void SC_CREATE_ENTITY_Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_CREATE_ENTITY_Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_CREATE_ENTITY_Entity_descriptor_;
}

const SC_CREATE_ENTITY_Entity& SC_CREATE_ENTITY_Entity::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_CREATE_ENTITY_Entity> SC_CREATE_ENTITY_Entity_default_instance_;

SC_CREATE_ENTITY_Entity* SC_CREATE_ENTITY_Entity::New(::google::protobuf::Arena* arena) const {
  SC_CREATE_ENTITY_Entity* n = new SC_CREATE_ENTITY_Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_CREATE_ENTITY_Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CREATE_ENTITY.Entity)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_entityinfo()) {
      entityinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_entitypos()) {
      if (entitypos_ != NULL) entitypos_->::Position::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_CREATE_ENTITY_Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_CREATE_ENTITY.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes EntityID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EntityInfo;
        break;
      }

      // required bytes EntityInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_EntityInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_EntityPos;
        break;
      }

      // required .Position EntityPos = 3;
      case 3: {
        if (tag == 26) {
         parse_EntityPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entitypos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_CREATE_ENTITY.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_CREATE_ENTITY.Entity)
  return false;
#undef DO_
}

void SC_CREATE_ENTITY_Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_CREATE_ENTITY.Entity)
  // required bytes EntityID = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required bytes EntityInfo = 2;
  if (has_entityinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->entityinfo(), output);
  }

  // required .Position EntityPos = 3;
  if (has_entitypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->entitypos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_CREATE_ENTITY.Entity)
}

::google::protobuf::uint8* SC_CREATE_ENTITY_Entity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_CREATE_ENTITY.Entity)
  // required bytes EntityID = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required bytes EntityInfo = 2;
  if (has_entityinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->entityinfo(), target);
  }

  // required .Position EntityPos = 3;
  if (has_entitypos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->entitypos_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CREATE_ENTITY.Entity)
  return target;
}

size_t SC_CREATE_ENTITY_Entity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_CREATE_ENTITY.Entity)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes EntityID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_entityinfo()) {
    // required bytes EntityInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityinfo());
  }

  if (has_entitypos()) {
    // required .Position EntityPos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entitypos_);
  }

  return total_size;
}
size_t SC_CREATE_ENTITY_Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CREATE_ENTITY.Entity)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes EntityID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required bytes EntityInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityinfo());

    // required .Position EntityPos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entitypos_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_CREATE_ENTITY_Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CREATE_ENTITY.Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_CREATE_ENTITY_Entity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_CREATE_ENTITY_Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CREATE_ENTITY.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CREATE_ENTITY.Entity)
    UnsafeMergeFrom(*source);
  }
}

void SC_CREATE_ENTITY_Entity::MergeFrom(const SC_CREATE_ENTITY_Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CREATE_ENTITY.Entity)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_CREATE_ENTITY_Entity::UnsafeMergeFrom(const SC_CREATE_ENTITY_Entity& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_entityinfo()) {
      set_has_entityinfo();
      entityinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityinfo_);
    }
    if (from.has_entitypos()) {
      mutable_entitypos()->::Position::MergeFrom(from.entitypos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_CREATE_ENTITY_Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CREATE_ENTITY.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CREATE_ENTITY_Entity::CopyFrom(const SC_CREATE_ENTITY_Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CREATE_ENTITY.Entity)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_CREATE_ENTITY_Entity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_entitypos()) {
    if (!this->entitypos_->IsInitialized()) return false;
  }
  return true;
}

void SC_CREATE_ENTITY_Entity::Swap(SC_CREATE_ENTITY_Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_CREATE_ENTITY_Entity::InternalSwap(SC_CREATE_ENTITY_Entity* other) {
  entityid_.Swap(&other->entityid_);
  entityinfo_.Swap(&other->entityinfo_);
  std::swap(entitypos_, other->entitypos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_CREATE_ENTITY_Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_CREATE_ENTITY_Entity_descriptor_;
  metadata.reflection = SC_CREATE_ENTITY_Entity_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_CREATE_ENTITY::kSceneIDFieldNumber;
const int SC_CREATE_ENTITY::kEntitiesCreateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_CREATE_ENTITY::SC_CREATE_ENTITY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CREATE_ENTITY)
}

void SC_CREATE_ENTITY::InitAsDefaultInstance() {
}

SC_CREATE_ENTITY::SC_CREATE_ENTITY(const SC_CREATE_ENTITY& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_CREATE_ENTITY)
}

void SC_CREATE_ENTITY::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
}

SC_CREATE_ENTITY::~SC_CREATE_ENTITY() {
  // @@protoc_insertion_point(destructor:SC_CREATE_ENTITY)
  SharedDtor();
}

void SC_CREATE_ENTITY::SharedDtor() {
}

void SC_CREATE_ENTITY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_CREATE_ENTITY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_CREATE_ENTITY_descriptor_;
}

const SC_CREATE_ENTITY& SC_CREATE_ENTITY::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_CREATE_ENTITY> SC_CREATE_ENTITY_default_instance_;

SC_CREATE_ENTITY* SC_CREATE_ENTITY::New(::google::protobuf::Arena* arena) const {
  SC_CREATE_ENTITY* n = new SC_CREATE_ENTITY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_CREATE_ENTITY::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CREATE_ENTITY)
  sceneid_ = 0u;
  entitiescreate_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_CREATE_ENTITY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_CREATE_ENTITY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SceneID = 1;
      case 1: {
        if (tag == 8) {
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EntitiesCreate;
        break;
      }

      // repeated .SC_CREATE_ENTITY.Entity EntitiesCreate = 2;
      case 2: {
        if (tag == 18) {
         parse_EntitiesCreate:
          DO_(input->IncrementRecursionDepth());
         parse_loop_EntitiesCreate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entitiescreate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_EntitiesCreate;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_CREATE_ENTITY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_CREATE_ENTITY)
  return false;
#undef DO_
}

void SC_CREATE_ENTITY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_CREATE_ENTITY)
  // required uint32 SceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }

  // repeated .SC_CREATE_ENTITY.Entity EntitiesCreate = 2;
  for (unsigned int i = 0, n = this->entitiescreate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entitiescreate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_CREATE_ENTITY)
}

::google::protobuf::uint8* SC_CREATE_ENTITY::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_CREATE_ENTITY)
  // required uint32 SceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }

  // repeated .SC_CREATE_ENTITY.Entity EntitiesCreate = 2;
  for (unsigned int i = 0, n = this->entitiescreate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->entitiescreate(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CREATE_ENTITY)
  return target;
}

size_t SC_CREATE_ENTITY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CREATE_ENTITY)
  size_t total_size = 0;

  // required uint32 SceneID = 1;
  if (has_sceneid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }
  // repeated .SC_CREATE_ENTITY.Entity EntitiesCreate = 2;
  {
    unsigned int count = this->entitiescreate_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entitiescreate(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_CREATE_ENTITY::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CREATE_ENTITY)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_CREATE_ENTITY* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_CREATE_ENTITY>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CREATE_ENTITY)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CREATE_ENTITY)
    UnsafeMergeFrom(*source);
  }
}

void SC_CREATE_ENTITY::MergeFrom(const SC_CREATE_ENTITY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CREATE_ENTITY)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_CREATE_ENTITY::UnsafeMergeFrom(const SC_CREATE_ENTITY& from) {
  GOOGLE_DCHECK(&from != this);
  entitiescreate_.MergeFrom(from.entitiescreate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_CREATE_ENTITY::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CREATE_ENTITY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CREATE_ENTITY::CopyFrom(const SC_CREATE_ENTITY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CREATE_ENTITY)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_CREATE_ENTITY::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->entitiescreate())) return false;
  return true;
}

void SC_CREATE_ENTITY::Swap(SC_CREATE_ENTITY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_CREATE_ENTITY::InternalSwap(SC_CREATE_ENTITY* other) {
  std::swap(sceneid_, other->sceneid_);
  entitiescreate_.UnsafeArenaSwap(&other->entitiescreate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_CREATE_ENTITY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_CREATE_ENTITY_descriptor_;
  metadata.reflection = SC_CREATE_ENTITY_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_CREATE_ENTITY_Entity

// required bytes EntityID = 1;
bool SC_CREATE_ENTITY_Entity::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_CREATE_ENTITY_Entity::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_CREATE_ENTITY_Entity::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_CREATE_ENTITY_Entity::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& SC_CREATE_ENTITY_Entity::entityid() const {
  // @@protoc_insertion_point(field_get:SC_CREATE_ENTITY.Entity.EntityID)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_CREATE_ENTITY_Entity::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_CREATE_ENTITY.Entity.EntityID)
}
void SC_CREATE_ENTITY_Entity::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_CREATE_ENTITY.Entity.EntityID)
}
void SC_CREATE_ENTITY_Entity::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_CREATE_ENTITY.Entity.EntityID)
}
::std::string* SC_CREATE_ENTITY_Entity::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:SC_CREATE_ENTITY.Entity.EntityID)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_CREATE_ENTITY_Entity::release_entityid() {
  // @@protoc_insertion_point(field_release:SC_CREATE_ENTITY.Entity.EntityID)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_CREATE_ENTITY_Entity::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:SC_CREATE_ENTITY.Entity.EntityID)
}

// required bytes EntityInfo = 2;
bool SC_CREATE_ENTITY_Entity::has_entityinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_CREATE_ENTITY_Entity::set_has_entityinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_CREATE_ENTITY_Entity::clear_has_entityinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_CREATE_ENTITY_Entity::clear_entityinfo() {
  entityinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityinfo();
}
const ::std::string& SC_CREATE_ENTITY_Entity::entityinfo() const {
  // @@protoc_insertion_point(field_get:SC_CREATE_ENTITY.Entity.EntityInfo)
  return entityinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_CREATE_ENTITY_Entity::set_entityinfo(const ::std::string& value) {
  set_has_entityinfo();
  entityinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_CREATE_ENTITY.Entity.EntityInfo)
}
void SC_CREATE_ENTITY_Entity::set_entityinfo(const char* value) {
  set_has_entityinfo();
  entityinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_CREATE_ENTITY.Entity.EntityInfo)
}
void SC_CREATE_ENTITY_Entity::set_entityinfo(const void* value, size_t size) {
  set_has_entityinfo();
  entityinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_CREATE_ENTITY.Entity.EntityInfo)
}
::std::string* SC_CREATE_ENTITY_Entity::mutable_entityinfo() {
  set_has_entityinfo();
  // @@protoc_insertion_point(field_mutable:SC_CREATE_ENTITY.Entity.EntityInfo)
  return entityinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_CREATE_ENTITY_Entity::release_entityinfo() {
  // @@protoc_insertion_point(field_release:SC_CREATE_ENTITY.Entity.EntityInfo)
  clear_has_entityinfo();
  return entityinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_CREATE_ENTITY_Entity::set_allocated_entityinfo(::std::string* entityinfo) {
  if (entityinfo != NULL) {
    set_has_entityinfo();
  } else {
    clear_has_entityinfo();
  }
  entityinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityinfo);
  // @@protoc_insertion_point(field_set_allocated:SC_CREATE_ENTITY.Entity.EntityInfo)
}

// required .Position EntityPos = 3;
bool SC_CREATE_ENTITY_Entity::has_entitypos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SC_CREATE_ENTITY_Entity::set_has_entitypos() {
  _has_bits_[0] |= 0x00000004u;
}
void SC_CREATE_ENTITY_Entity::clear_has_entitypos() {
  _has_bits_[0] &= ~0x00000004u;
}
void SC_CREATE_ENTITY_Entity::clear_entitypos() {
  if (entitypos_ != NULL) entitypos_->::Position::Clear();
  clear_has_entitypos();
}
const ::Position& SC_CREATE_ENTITY_Entity::entitypos() const {
  // @@protoc_insertion_point(field_get:SC_CREATE_ENTITY.Entity.EntityPos)
  return entitypos_ != NULL ? *entitypos_
                         : *::Position::internal_default_instance();
}
::Position* SC_CREATE_ENTITY_Entity::mutable_entitypos() {
  set_has_entitypos();
  if (entitypos_ == NULL) {
    entitypos_ = new ::Position;
  }
  // @@protoc_insertion_point(field_mutable:SC_CREATE_ENTITY.Entity.EntityPos)
  return entitypos_;
}
::Position* SC_CREATE_ENTITY_Entity::release_entitypos() {
  // @@protoc_insertion_point(field_release:SC_CREATE_ENTITY.Entity.EntityPos)
  clear_has_entitypos();
  ::Position* temp = entitypos_;
  entitypos_ = NULL;
  return temp;
}
void SC_CREATE_ENTITY_Entity::set_allocated_entitypos(::Position* entitypos) {
  delete entitypos_;
  entitypos_ = entitypos;
  if (entitypos) {
    set_has_entitypos();
  } else {
    clear_has_entitypos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC_CREATE_ENTITY.Entity.EntityPos)
}

inline const SC_CREATE_ENTITY_Entity* SC_CREATE_ENTITY_Entity::internal_default_instance() {
  return &SC_CREATE_ENTITY_Entity_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_CREATE_ENTITY

// required uint32 SceneID = 1;
bool SC_CREATE_ENTITY::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_CREATE_ENTITY::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_CREATE_ENTITY::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_CREATE_ENTITY::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 SC_CREATE_ENTITY::sceneid() const {
  // @@protoc_insertion_point(field_get:SC_CREATE_ENTITY.SceneID)
  return sceneid_;
}
void SC_CREATE_ENTITY::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:SC_CREATE_ENTITY.SceneID)
}

// repeated .SC_CREATE_ENTITY.Entity EntitiesCreate = 2;
int SC_CREATE_ENTITY::entitiescreate_size() const {
  return entitiescreate_.size();
}
void SC_CREATE_ENTITY::clear_entitiescreate() {
  entitiescreate_.Clear();
}
const ::SC_CREATE_ENTITY_Entity& SC_CREATE_ENTITY::entitiescreate(int index) const {
  // @@protoc_insertion_point(field_get:SC_CREATE_ENTITY.EntitiesCreate)
  return entitiescreate_.Get(index);
}
::SC_CREATE_ENTITY_Entity* SC_CREATE_ENTITY::mutable_entitiescreate(int index) {
  // @@protoc_insertion_point(field_mutable:SC_CREATE_ENTITY.EntitiesCreate)
  return entitiescreate_.Mutable(index);
}
::SC_CREATE_ENTITY_Entity* SC_CREATE_ENTITY::add_entitiescreate() {
  // @@protoc_insertion_point(field_add:SC_CREATE_ENTITY.EntitiesCreate)
  return entitiescreate_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC_CREATE_ENTITY_Entity >*
SC_CREATE_ENTITY::mutable_entitiescreate() {
  // @@protoc_insertion_point(field_mutable_list:SC_CREATE_ENTITY.EntitiesCreate)
  return &entitiescreate_;
}
const ::google::protobuf::RepeatedPtrField< ::SC_CREATE_ENTITY_Entity >&
SC_CREATE_ENTITY::entitiescreate() const {
  // @@protoc_insertion_point(field_list:SC_CREATE_ENTITY.EntitiesCreate)
  return entitiescreate_;
}

inline const SC_CREATE_ENTITY* SC_CREATE_ENTITY::internal_default_instance() {
  return &SC_CREATE_ENTITY_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_DESTROY_ENTITY::kSceneIDFieldNumber;
const int SC_DESTROY_ENTITY::kEntitiesDestroyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_DESTROY_ENTITY::SC_DESTROY_ENTITY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DESTROY_ENTITY)
}

void SC_DESTROY_ENTITY::InitAsDefaultInstance() {
}

SC_DESTROY_ENTITY::SC_DESTROY_ENTITY(const SC_DESTROY_ENTITY& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_DESTROY_ENTITY)
}

void SC_DESTROY_ENTITY::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
}

SC_DESTROY_ENTITY::~SC_DESTROY_ENTITY() {
  // @@protoc_insertion_point(destructor:SC_DESTROY_ENTITY)
  SharedDtor();
}

void SC_DESTROY_ENTITY::SharedDtor() {
}

void SC_DESTROY_ENTITY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_DESTROY_ENTITY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_DESTROY_ENTITY_descriptor_;
}

const SC_DESTROY_ENTITY& SC_DESTROY_ENTITY::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_DESTROY_ENTITY> SC_DESTROY_ENTITY_default_instance_;

SC_DESTROY_ENTITY* SC_DESTROY_ENTITY::New(::google::protobuf::Arena* arena) const {
  SC_DESTROY_ENTITY* n = new SC_DESTROY_ENTITY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_DESTROY_ENTITY::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DESTROY_ENTITY)
  sceneid_ = 0u;
  entitiesdestroy_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_DESTROY_ENTITY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_DESTROY_ENTITY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SceneID = 1;
      case 1: {
        if (tag == 8) {
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EntitiesDestroy;
        break;
      }

      // repeated bytes EntitiesDestroy = 2;
      case 2: {
        if (tag == 18) {
         parse_EntitiesDestroy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_entitiesdestroy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EntitiesDestroy;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_DESTROY_ENTITY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_DESTROY_ENTITY)
  return false;
#undef DO_
}

void SC_DESTROY_ENTITY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_DESTROY_ENTITY)
  // required uint32 SceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }

  // repeated bytes EntitiesDestroy = 2;
  for (int i = 0; i < this->entitiesdestroy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->entitiesdestroy(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_DESTROY_ENTITY)
}

::google::protobuf::uint8* SC_DESTROY_ENTITY::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_DESTROY_ENTITY)
  // required uint32 SceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }

  // repeated bytes EntitiesDestroy = 2;
  for (int i = 0; i < this->entitiesdestroy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->entitiesdestroy(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_DESTROY_ENTITY)
  return target;
}

size_t SC_DESTROY_ENTITY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DESTROY_ENTITY)
  size_t total_size = 0;

  // required uint32 SceneID = 1;
  if (has_sceneid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }
  // repeated bytes EntitiesDestroy = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entitiesdestroy_size());
  for (int i = 0; i < this->entitiesdestroy_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->entitiesdestroy(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_DESTROY_ENTITY::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DESTROY_ENTITY)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_DESTROY_ENTITY* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_DESTROY_ENTITY>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DESTROY_ENTITY)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DESTROY_ENTITY)
    UnsafeMergeFrom(*source);
  }
}

void SC_DESTROY_ENTITY::MergeFrom(const SC_DESTROY_ENTITY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DESTROY_ENTITY)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_DESTROY_ENTITY::UnsafeMergeFrom(const SC_DESTROY_ENTITY& from) {
  GOOGLE_DCHECK(&from != this);
  entitiesdestroy_.UnsafeMergeFrom(from.entitiesdestroy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_DESTROY_ENTITY::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DESTROY_ENTITY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DESTROY_ENTITY::CopyFrom(const SC_DESTROY_ENTITY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DESTROY_ENTITY)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_DESTROY_ENTITY::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_DESTROY_ENTITY::Swap(SC_DESTROY_ENTITY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_DESTROY_ENTITY::InternalSwap(SC_DESTROY_ENTITY* other) {
  std::swap(sceneid_, other->sceneid_);
  entitiesdestroy_.UnsafeArenaSwap(&other->entitiesdestroy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_DESTROY_ENTITY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_DESTROY_ENTITY_descriptor_;
  metadata.reflection = SC_DESTROY_ENTITY_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_DESTROY_ENTITY

// required uint32 SceneID = 1;
bool SC_DESTROY_ENTITY::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_DESTROY_ENTITY::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_DESTROY_ENTITY::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_DESTROY_ENTITY::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
::google::protobuf::uint32 SC_DESTROY_ENTITY::sceneid() const {
  // @@protoc_insertion_point(field_get:SC_DESTROY_ENTITY.SceneID)
  return sceneid_;
}
void SC_DESTROY_ENTITY::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:SC_DESTROY_ENTITY.SceneID)
}

// repeated bytes EntitiesDestroy = 2;
int SC_DESTROY_ENTITY::entitiesdestroy_size() const {
  return entitiesdestroy_.size();
}
void SC_DESTROY_ENTITY::clear_entitiesdestroy() {
  entitiesdestroy_.Clear();
}
const ::std::string& SC_DESTROY_ENTITY::entitiesdestroy(int index) const {
  // @@protoc_insertion_point(field_get:SC_DESTROY_ENTITY.EntitiesDestroy)
  return entitiesdestroy_.Get(index);
}
::std::string* SC_DESTROY_ENTITY::mutable_entitiesdestroy(int index) {
  // @@protoc_insertion_point(field_mutable:SC_DESTROY_ENTITY.EntitiesDestroy)
  return entitiesdestroy_.Mutable(index);
}
void SC_DESTROY_ENTITY::set_entitiesdestroy(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC_DESTROY_ENTITY.EntitiesDestroy)
  entitiesdestroy_.Mutable(index)->assign(value);
}
void SC_DESTROY_ENTITY::set_entitiesdestroy(int index, const char* value) {
  entitiesdestroy_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC_DESTROY_ENTITY.EntitiesDestroy)
}
void SC_DESTROY_ENTITY::set_entitiesdestroy(int index, const void* value, size_t size) {
  entitiesdestroy_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC_DESTROY_ENTITY.EntitiesDestroy)
}
::std::string* SC_DESTROY_ENTITY::add_entitiesdestroy() {
  // @@protoc_insertion_point(field_add_mutable:SC_DESTROY_ENTITY.EntitiesDestroy)
  return entitiesdestroy_.Add();
}
void SC_DESTROY_ENTITY::add_entitiesdestroy(const ::std::string& value) {
  entitiesdestroy_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC_DESTROY_ENTITY.EntitiesDestroy)
}
void SC_DESTROY_ENTITY::add_entitiesdestroy(const char* value) {
  entitiesdestroy_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC_DESTROY_ENTITY.EntitiesDestroy)
}
void SC_DESTROY_ENTITY::add_entitiesdestroy(const void* value, size_t size) {
  entitiesdestroy_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC_DESTROY_ENTITY.EntitiesDestroy)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SC_DESTROY_ENTITY::entitiesdestroy() const {
  // @@protoc_insertion_point(field_list:SC_DESTROY_ENTITY.EntitiesDestroy)
  return entitiesdestroy_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SC_DESTROY_ENTITY::mutable_entitiesdestroy() {
  // @@protoc_insertion_point(field_mutable_list:SC_DESTROY_ENTITY.EntitiesDestroy)
  return &entitiesdestroy_;
}

inline const SC_DESTROY_ENTITY* SC_DESTROY_ENTITY::internal_default_instance() {
  return &SC_DESTROY_ENTITY_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_PING::kClienttimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_PING::CS_PING()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_PING)
}

void CS_PING::InitAsDefaultInstance() {
}

CS_PING::CS_PING(const CS_PING& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_PING)
}

void CS_PING::SharedCtor() {
  _cached_size_ = 0;
  clienttime_ = GOOGLE_ULONGLONG(0);
}

CS_PING::~CS_PING() {
  // @@protoc_insertion_point(destructor:CS_PING)
  SharedDtor();
}

void CS_PING::SharedDtor() {
}

void CS_PING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_PING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_PING_descriptor_;
}

const CS_PING& CS_PING::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_PING> CS_PING_default_instance_;

CS_PING* CS_PING::New(::google::protobuf::Arena* arena) const {
  CS_PING* n = new CS_PING;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_PING::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_PING)
  clienttime_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_PING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_PING)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 clienttime = 1;
      case 1: {
        if (tag == 8) {
          set_has_clienttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clienttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_PING)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_PING)
  return false;
#undef DO_
}

void CS_PING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_PING)
  // required uint64 clienttime = 1;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clienttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_PING)
}

::google::protobuf::uint8* CS_PING::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_PING)
  // required uint64 clienttime = 1;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clienttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_PING)
  return target;
}

size_t CS_PING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_PING)
  size_t total_size = 0;

  // required uint64 clienttime = 1;
  if (has_clienttime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_PING::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_PING)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_PING* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_PING>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_PING)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_PING)
    UnsafeMergeFrom(*source);
  }
}

void CS_PING::MergeFrom(const CS_PING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_PING)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_PING::UnsafeMergeFrom(const CS_PING& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_PING::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_PING::CopyFrom(const CS_PING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_PING)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_PING::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_PING::Swap(CS_PING* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_PING::InternalSwap(CS_PING* other) {
  std::swap(clienttime_, other->clienttime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_PING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_PING_descriptor_;
  metadata.reflection = CS_PING_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_PING

// required uint64 clienttime = 1;
bool CS_PING::has_clienttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_PING::set_has_clienttime() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_PING::clear_has_clienttime() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_PING::clear_clienttime() {
  clienttime_ = GOOGLE_ULONGLONG(0);
  clear_has_clienttime();
}
::google::protobuf::uint64 CS_PING::clienttime() const {
  // @@protoc_insertion_point(field_get:CS_PING.clienttime)
  return clienttime_;
}
void CS_PING::set_clienttime(::google::protobuf::uint64 value) {
  set_has_clienttime();
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:CS_PING.clienttime)
}

inline const CS_PING* CS_PING::internal_default_instance() {
  return &CS_PING_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_PING_BACK::kClienttimeFieldNumber;
const int SC_PING_BACK::kServertimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_PING_BACK::SC_PING_BACK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_PING_BACK)
}

void SC_PING_BACK::InitAsDefaultInstance() {
}

SC_PING_BACK::SC_PING_BACK(const SC_PING_BACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_PING_BACK)
}

void SC_PING_BACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&clienttime_, 0, reinterpret_cast<char*>(&servertime_) -
    reinterpret_cast<char*>(&clienttime_) + sizeof(servertime_));
}

SC_PING_BACK::~SC_PING_BACK() {
  // @@protoc_insertion_point(destructor:SC_PING_BACK)
  SharedDtor();
}

void SC_PING_BACK::SharedDtor() {
}

void SC_PING_BACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_PING_BACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_PING_BACK_descriptor_;
}

const SC_PING_BACK& SC_PING_BACK::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_PING_BACK> SC_PING_BACK_default_instance_;

SC_PING_BACK* SC_PING_BACK::New(::google::protobuf::Arena* arena) const {
  SC_PING_BACK* n = new SC_PING_BACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_PING_BACK::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_PING_BACK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SC_PING_BACK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SC_PING_BACK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(clienttime_, servertime_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_PING_BACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_PING_BACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 clienttime = 1;
      case 1: {
        if (tag == 8) {
          set_has_clienttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clienttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_servertime;
        break;
      }

      // required uint64 servertime = 2;
      case 2: {
        if (tag == 16) {
         parse_servertime:
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_PING_BACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_PING_BACK)
  return false;
#undef DO_
}

void SC_PING_BACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_PING_BACK)
  // required uint64 clienttime = 1;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clienttime(), output);
  }

  // required uint64 servertime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->servertime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_PING_BACK)
}

::google::protobuf::uint8* SC_PING_BACK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_PING_BACK)
  // required uint64 clienttime = 1;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clienttime(), target);
  }

  // required uint64 servertime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->servertime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_PING_BACK)
  return target;
}

size_t SC_PING_BACK::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_PING_BACK)
  size_t total_size = 0;

  if (has_clienttime()) {
    // required uint64 clienttime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());
  }

  if (has_servertime()) {
    // required uint64 servertime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertime());
  }

  return total_size;
}
size_t SC_PING_BACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_PING_BACK)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 clienttime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());

    // required uint64 servertime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_PING_BACK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_PING_BACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_PING_BACK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_PING_BACK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_PING_BACK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_PING_BACK)
    UnsafeMergeFrom(*source);
  }
}

void SC_PING_BACK::MergeFrom(const SC_PING_BACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_PING_BACK)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_PING_BACK::UnsafeMergeFrom(const SC_PING_BACK& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_PING_BACK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_PING_BACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_PING_BACK::CopyFrom(const SC_PING_BACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_PING_BACK)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_PING_BACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_PING_BACK::Swap(SC_PING_BACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_PING_BACK::InternalSwap(SC_PING_BACK* other) {
  std::swap(clienttime_, other->clienttime_);
  std::swap(servertime_, other->servertime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_PING_BACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_PING_BACK_descriptor_;
  metadata.reflection = SC_PING_BACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_PING_BACK

// required uint64 clienttime = 1;
bool SC_PING_BACK::has_clienttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_PING_BACK::set_has_clienttime() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_PING_BACK::clear_has_clienttime() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_PING_BACK::clear_clienttime() {
  clienttime_ = GOOGLE_ULONGLONG(0);
  clear_has_clienttime();
}
::google::protobuf::uint64 SC_PING_BACK::clienttime() const {
  // @@protoc_insertion_point(field_get:SC_PING_BACK.clienttime)
  return clienttime_;
}
void SC_PING_BACK::set_clienttime(::google::protobuf::uint64 value) {
  set_has_clienttime();
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:SC_PING_BACK.clienttime)
}

// required uint64 servertime = 2;
bool SC_PING_BACK::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_PING_BACK::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_PING_BACK::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_PING_BACK::clear_servertime() {
  servertime_ = GOOGLE_ULONGLONG(0);
  clear_has_servertime();
}
::google::protobuf::uint64 SC_PING_BACK::servertime() const {
  // @@protoc_insertion_point(field_get:SC_PING_BACK.servertime)
  return servertime_;
}
void SC_PING_BACK::set_servertime(::google::protobuf::uint64 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:SC_PING_BACK.servertime)
}

inline const SC_PING_BACK* SC_PING_BACK::internal_default_instance() {
  return &SC_PING_BACK_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_PING_BACK_BACK::kClienttimeFieldNumber;
const int CS_PING_BACK_BACK::kServertimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_PING_BACK_BACK::CS_PING_BACK_BACK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_PING_BACK_BACK)
}

void CS_PING_BACK_BACK::InitAsDefaultInstance() {
}

CS_PING_BACK_BACK::CS_PING_BACK_BACK(const CS_PING_BACK_BACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_PING_BACK_BACK)
}

void CS_PING_BACK_BACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&clienttime_, 0, reinterpret_cast<char*>(&servertime_) -
    reinterpret_cast<char*>(&clienttime_) + sizeof(servertime_));
}

CS_PING_BACK_BACK::~CS_PING_BACK_BACK() {
  // @@protoc_insertion_point(destructor:CS_PING_BACK_BACK)
  SharedDtor();
}

void CS_PING_BACK_BACK::SharedDtor() {
}

void CS_PING_BACK_BACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_PING_BACK_BACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_PING_BACK_BACK_descriptor_;
}

const CS_PING_BACK_BACK& CS_PING_BACK_BACK::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_PING_BACK_BACK> CS_PING_BACK_BACK_default_instance_;

CS_PING_BACK_BACK* CS_PING_BACK_BACK::New(::google::protobuf::Arena* arena) const {
  CS_PING_BACK_BACK* n = new CS_PING_BACK_BACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_PING_BACK_BACK::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_PING_BACK_BACK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CS_PING_BACK_BACK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CS_PING_BACK_BACK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(clienttime_, servertime_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_PING_BACK_BACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_PING_BACK_BACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 clienttime = 1;
      case 1: {
        if (tag == 8) {
          set_has_clienttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clienttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_servertime;
        break;
      }

      // required uint64 servertime = 2;
      case 2: {
        if (tag == 16) {
         parse_servertime:
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_PING_BACK_BACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_PING_BACK_BACK)
  return false;
#undef DO_
}

void CS_PING_BACK_BACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_PING_BACK_BACK)
  // required uint64 clienttime = 1;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clienttime(), output);
  }

  // required uint64 servertime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->servertime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_PING_BACK_BACK)
}

::google::protobuf::uint8* CS_PING_BACK_BACK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_PING_BACK_BACK)
  // required uint64 clienttime = 1;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clienttime(), target);
  }

  // required uint64 servertime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->servertime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_PING_BACK_BACK)
  return target;
}

size_t CS_PING_BACK_BACK::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_PING_BACK_BACK)
  size_t total_size = 0;

  if (has_clienttime()) {
    // required uint64 clienttime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());
  }

  if (has_servertime()) {
    // required uint64 servertime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertime());
  }

  return total_size;
}
size_t CS_PING_BACK_BACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_PING_BACK_BACK)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 clienttime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clienttime());

    // required uint64 servertime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_PING_BACK_BACK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_PING_BACK_BACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_PING_BACK_BACK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_PING_BACK_BACK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_PING_BACK_BACK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_PING_BACK_BACK)
    UnsafeMergeFrom(*source);
  }
}

void CS_PING_BACK_BACK::MergeFrom(const CS_PING_BACK_BACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_PING_BACK_BACK)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_PING_BACK_BACK::UnsafeMergeFrom(const CS_PING_BACK_BACK& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_PING_BACK_BACK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_PING_BACK_BACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_PING_BACK_BACK::CopyFrom(const CS_PING_BACK_BACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_PING_BACK_BACK)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_PING_BACK_BACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_PING_BACK_BACK::Swap(CS_PING_BACK_BACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_PING_BACK_BACK::InternalSwap(CS_PING_BACK_BACK* other) {
  std::swap(clienttime_, other->clienttime_);
  std::swap(servertime_, other->servertime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_PING_BACK_BACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_PING_BACK_BACK_descriptor_;
  metadata.reflection = CS_PING_BACK_BACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_PING_BACK_BACK

// required uint64 clienttime = 1;
bool CS_PING_BACK_BACK::has_clienttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_PING_BACK_BACK::set_has_clienttime() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_PING_BACK_BACK::clear_has_clienttime() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_PING_BACK_BACK::clear_clienttime() {
  clienttime_ = GOOGLE_ULONGLONG(0);
  clear_has_clienttime();
}
::google::protobuf::uint64 CS_PING_BACK_BACK::clienttime() const {
  // @@protoc_insertion_point(field_get:CS_PING_BACK_BACK.clienttime)
  return clienttime_;
}
void CS_PING_BACK_BACK::set_clienttime(::google::protobuf::uint64 value) {
  set_has_clienttime();
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:CS_PING_BACK_BACK.clienttime)
}

// required uint64 servertime = 2;
bool CS_PING_BACK_BACK::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_PING_BACK_BACK::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_PING_BACK_BACK::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_PING_BACK_BACK::clear_servertime() {
  servertime_ = GOOGLE_ULONGLONG(0);
  clear_has_servertime();
}
::google::protobuf::uint64 CS_PING_BACK_BACK::servertime() const {
  // @@protoc_insertion_point(field_get:CS_PING_BACK_BACK.servertime)
  return servertime_;
}
void CS_PING_BACK_BACK::set_servertime(::google::protobuf::uint64 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:CS_PING_BACK_BACK.servertime)
}

inline const CS_PING_BACK_BACK* CS_PING_BACK_BACK::internal_default_instance() {
  return &CS_PING_BACK_BACK_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ConnectServerRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectServerRequest_RequestType_descriptor_;
}
bool ConnectServerRequest_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConnectServerRequest_RequestType ConnectServerRequest::NEW_CONNECTION;
const ConnectServerRequest_RequestType ConnectServerRequest::RE_CONNECTION;
const ConnectServerRequest_RequestType ConnectServerRequest::RequestType_MIN;
const ConnectServerRequest_RequestType ConnectServerRequest::RequestType_MAX;
const int ConnectServerRequest::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectServerRequest::kTypeFieldNumber;
const int ConnectServerRequest::kDeviceidFieldNumber;
const int ConnectServerRequest::kEntityidFieldNumber;
const int ConnectServerRequest::kAuthmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectServerRequest::ConnectServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnectServerRequest)
}

void ConnectServerRequest::InitAsDefaultInstance() {
}

ConnectServerRequest::ConnectServerRequest(const ConnectServerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConnectServerRequest)
}

void ConnectServerRequest::SharedCtor() {
  _cached_size_ = 0;
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

ConnectServerRequest::~ConnectServerRequest() {
  // @@protoc_insertion_point(destructor:ConnectServerRequest)
  SharedDtor();
}

void ConnectServerRequest::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectServerRequest_descriptor_;
}

const ConnectServerRequest& ConnectServerRequest::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConnectServerRequest> ConnectServerRequest_default_instance_;

ConnectServerRequest* ConnectServerRequest::New(::google::protobuf::Arena* arena) const {
  ConnectServerRequest* n = new ConnectServerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectServerRequest)
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 0;
    if (has_deviceid()) {
      deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_authmsg()) {
      authmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnectServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnectServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConnectServerRequest.RequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ConnectServerRequest_RequestType_IsValid(value)) {
            set_type(static_cast< ::ConnectServerRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceid;
        break;
      }

      // required bytes deviceid = 2;
      case 2: {
        if (tag == 18) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_entityid;
        break;
      }

      // optional bytes entityid = 3;
      case 3: {
        if (tag == 26) {
         parse_entityid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_authmsg;
        break;
      }

      // optional bytes authmsg = 4;
      case 4: {
        if (tag == 34) {
         parse_authmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_authmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnectServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnectServerRequest)
  return false;
#undef DO_
}

void ConnectServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnectServerRequest)
  // required .ConnectServerRequest.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->deviceid(), output);
  }

  // optional bytes entityid = 3;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->entityid(), output);
  }

  // optional bytes authmsg = 4;
  if (has_authmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->authmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnectServerRequest)
}

::google::protobuf::uint8* ConnectServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ConnectServerRequest)
  // required .ConnectServerRequest.RequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes deviceid = 2;
  if (has_deviceid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->deviceid(), target);
  }

  // optional bytes entityid = 3;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->entityid(), target);
  }

  // optional bytes authmsg = 4;
  if (has_authmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->authmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectServerRequest)
  return target;
}

size_t ConnectServerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ConnectServerRequest)
  size_t total_size = 0;

  if (has_type()) {
    // required .ConnectServerRequest.RequestType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_deviceid()) {
    // required bytes deviceid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deviceid());
  }

  return total_size;
}
size_t ConnectServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectServerRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ConnectServerRequest.RequestType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required bytes deviceid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deviceid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional bytes entityid = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entityid());
    }

    // optional bytes authmsg = 4;
    if (has_authmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->authmsg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectServerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectServerRequest)
    UnsafeMergeFrom(*source);
  }
}

void ConnectServerRequest::MergeFrom(const ConnectServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectServerRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConnectServerRequest::UnsafeMergeFrom(const ConnectServerRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_deviceid()) {
      set_has_deviceid();
      deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
    }
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_authmsg()) {
      set_has_authmsg();
      authmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authmsg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConnectServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectServerRequest::CopyFrom(const ConnectServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectServerRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConnectServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConnectServerRequest::Swap(ConnectServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectServerRequest::InternalSwap(ConnectServerRequest* other) {
  std::swap(type_, other->type_);
  deviceid_.Swap(&other->deviceid_);
  entityid_.Swap(&other->entityid_);
  authmsg_.Swap(&other->authmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectServerRequest_descriptor_;
  metadata.reflection = ConnectServerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectServerRequest

// required .ConnectServerRequest.RequestType type = 1;
bool ConnectServerRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnectServerRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnectServerRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectServerRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ConnectServerRequest_RequestType ConnectServerRequest::type() const {
  // @@protoc_insertion_point(field_get:ConnectServerRequest.type)
  return static_cast< ::ConnectServerRequest_RequestType >(type_);
}
void ConnectServerRequest::set_type(::ConnectServerRequest_RequestType value) {
  assert(::ConnectServerRequest_RequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConnectServerRequest.type)
}

// required bytes deviceid = 2;
bool ConnectServerRequest::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConnectServerRequest::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
void ConnectServerRequest::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConnectServerRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
const ::std::string& ConnectServerRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:ConnectServerRequest.deviceid)
  return deviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectServerRequest::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectServerRequest.deviceid)
}
void ConnectServerRequest::set_deviceid(const char* value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectServerRequest.deviceid)
}
void ConnectServerRequest::set_deviceid(const void* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectServerRequest.deviceid)
}
::std::string* ConnectServerRequest::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:ConnectServerRequest.deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectServerRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:ConnectServerRequest.deviceid)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectServerRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:ConnectServerRequest.deviceid)
}

// optional bytes entityid = 3;
bool ConnectServerRequest::has_entityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConnectServerRequest::set_has_entityid() {
  _has_bits_[0] |= 0x00000004u;
}
void ConnectServerRequest::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConnectServerRequest::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& ConnectServerRequest::entityid() const {
  // @@protoc_insertion_point(field_get:ConnectServerRequest.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectServerRequest::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectServerRequest.entityid)
}
void ConnectServerRequest::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectServerRequest.entityid)
}
void ConnectServerRequest::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectServerRequest.entityid)
}
::std::string* ConnectServerRequest::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:ConnectServerRequest.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectServerRequest::release_entityid() {
  // @@protoc_insertion_point(field_release:ConnectServerRequest.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectServerRequest::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:ConnectServerRequest.entityid)
}

// optional bytes authmsg = 4;
bool ConnectServerRequest::has_authmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConnectServerRequest::set_has_authmsg() {
  _has_bits_[0] |= 0x00000008u;
}
void ConnectServerRequest::clear_has_authmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConnectServerRequest::clear_authmsg() {
  authmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authmsg();
}
const ::std::string& ConnectServerRequest::authmsg() const {
  // @@protoc_insertion_point(field_get:ConnectServerRequest.authmsg)
  return authmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectServerRequest::set_authmsg(const ::std::string& value) {
  set_has_authmsg();
  authmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectServerRequest.authmsg)
}
void ConnectServerRequest::set_authmsg(const char* value) {
  set_has_authmsg();
  authmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectServerRequest.authmsg)
}
void ConnectServerRequest::set_authmsg(const void* value, size_t size) {
  set_has_authmsg();
  authmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectServerRequest.authmsg)
}
::std::string* ConnectServerRequest::mutable_authmsg() {
  set_has_authmsg();
  // @@protoc_insertion_point(field_mutable:ConnectServerRequest.authmsg)
  return authmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectServerRequest::release_authmsg() {
  // @@protoc_insertion_point(field_release:ConnectServerRequest.authmsg)
  clear_has_authmsg();
  return authmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectServerRequest::set_allocated_authmsg(::std::string* authmsg) {
  if (authmsg != NULL) {
    set_has_authmsg();
  } else {
    clear_has_authmsg();
  }
  authmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authmsg);
  // @@protoc_insertion_point(field_set_allocated:ConnectServerRequest.authmsg)
}

inline const ConnectServerRequest* ConnectServerRequest::internal_default_instance() {
  return &ConnectServerRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ConnectServerReply_ReplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectServerReply_ReplyType_descriptor_;
}
bool ConnectServerReply_ReplyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConnectServerReply_ReplyType ConnectServerReply::BUSY;
const ConnectServerReply_ReplyType ConnectServerReply::CONNECTED;
const ConnectServerReply_ReplyType ConnectServerReply::RECONNECT_SUCCEEDED;
const ConnectServerReply_ReplyType ConnectServerReply::RECONNECT_FAILED;
const ConnectServerReply_ReplyType ConnectServerReply::FORBIDDEN;
const ConnectServerReply_ReplyType ConnectServerReply::MAX_CONNECTION;
const ConnectServerReply_ReplyType ConnectServerReply::ReplyType_MIN;
const ConnectServerReply_ReplyType ConnectServerReply::ReplyType_MAX;
const int ConnectServerReply::ReplyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectServerReply::kTypeFieldNumber;
const int ConnectServerReply::kExtramsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectServerReply::ConnectServerReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnectServerReply)
}

void ConnectServerReply::InitAsDefaultInstance() {
}

ConnectServerReply::ConnectServerReply(const ConnectServerReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConnectServerReply)
}

void ConnectServerReply::SharedCtor() {
  _cached_size_ = 0;
  extramsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

ConnectServerReply::~ConnectServerReply() {
  // @@protoc_insertion_point(destructor:ConnectServerReply)
  SharedDtor();
}

void ConnectServerReply::SharedDtor() {
  extramsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectServerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectServerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectServerReply_descriptor_;
}

const ConnectServerReply& ConnectServerReply::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConnectServerReply> ConnectServerReply_default_instance_;

ConnectServerReply* ConnectServerReply::New(::google::protobuf::Arena* arena) const {
  ConnectServerReply* n = new ConnectServerReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectServerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectServerReply)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 0;
    if (has_extramsg()) {
      extramsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnectServerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnectServerReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConnectServerReply.ReplyType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ConnectServerReply_ReplyType_IsValid(value)) {
            set_type(static_cast< ::ConnectServerReply_ReplyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extramsg;
        break;
      }

      // optional bytes extramsg = 2;
      case 2: {
        if (tag == 18) {
         parse_extramsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extramsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnectServerReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnectServerReply)
  return false;
#undef DO_
}

void ConnectServerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnectServerReply)
  // required .ConnectServerReply.ReplyType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes extramsg = 2;
  if (has_extramsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->extramsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnectServerReply)
}

::google::protobuf::uint8* ConnectServerReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ConnectServerReply)
  // required .ConnectServerReply.ReplyType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes extramsg = 2;
  if (has_extramsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->extramsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectServerReply)
  return target;
}

size_t ConnectServerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectServerReply)
  size_t total_size = 0;

  // required .ConnectServerReply.ReplyType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional bytes extramsg = 2;
  if (has_extramsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extramsg());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectServerReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectServerReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectServerReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectServerReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectServerReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectServerReply)
    UnsafeMergeFrom(*source);
  }
}

void ConnectServerReply::MergeFrom(const ConnectServerReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectServerReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConnectServerReply::UnsafeMergeFrom(const ConnectServerReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_extramsg()) {
      set_has_extramsg();
      extramsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extramsg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConnectServerReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectServerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectServerReply::CopyFrom(const ConnectServerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectServerReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConnectServerReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectServerReply::Swap(ConnectServerReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectServerReply::InternalSwap(ConnectServerReply* other) {
  std::swap(type_, other->type_);
  extramsg_.Swap(&other->extramsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectServerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectServerReply_descriptor_;
  metadata.reflection = ConnectServerReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectServerReply

// required .ConnectServerReply.ReplyType type = 1;
bool ConnectServerReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnectServerReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnectServerReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectServerReply::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ConnectServerReply_ReplyType ConnectServerReply::type() const {
  // @@protoc_insertion_point(field_get:ConnectServerReply.type)
  return static_cast< ::ConnectServerReply_ReplyType >(type_);
}
void ConnectServerReply::set_type(::ConnectServerReply_ReplyType value) {
  assert(::ConnectServerReply_ReplyType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConnectServerReply.type)
}

// optional bytes extramsg = 2;
bool ConnectServerReply::has_extramsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConnectServerReply::set_has_extramsg() {
  _has_bits_[0] |= 0x00000002u;
}
void ConnectServerReply::clear_has_extramsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConnectServerReply::clear_extramsg() {
  extramsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extramsg();
}
const ::std::string& ConnectServerReply::extramsg() const {
  // @@protoc_insertion_point(field_get:ConnectServerReply.extramsg)
  return extramsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectServerReply::set_extramsg(const ::std::string& value) {
  set_has_extramsg();
  extramsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectServerReply.extramsg)
}
void ConnectServerReply::set_extramsg(const char* value) {
  set_has_extramsg();
  extramsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectServerReply.extramsg)
}
void ConnectServerReply::set_extramsg(const void* value, size_t size) {
  set_has_extramsg();
  extramsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectServerReply.extramsg)
}
::std::string* ConnectServerReply::mutable_extramsg() {
  set_has_extramsg();
  // @@protoc_insertion_point(field_mutable:ConnectServerReply.extramsg)
  return extramsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectServerReply::release_extramsg() {
  // @@protoc_insertion_point(field_release:ConnectServerReply.extramsg)
  clear_has_extramsg();
  return extramsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectServerReply::set_allocated_extramsg(::std::string* extramsg) {
  if (extramsg != NULL) {
    set_has_extramsg();
  } else {
    clear_has_extramsg();
  }
  extramsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extramsg);
  // @@protoc_insertion_point(field_set_allocated:ConnectServerReply.extramsg)
}

inline const ConnectServerReply* ConnectServerReply::internal_default_instance() {
  return &ConnectServerReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_RUN_STATE_CHANGE::kEntityidFieldNumber;
const int CS_RUN_STATE_CHANGE::kIsrunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_RUN_STATE_CHANGE::CS_RUN_STATE_CHANGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_RUN_STATE_CHANGE)
}

void CS_RUN_STATE_CHANGE::InitAsDefaultInstance() {
}

CS_RUN_STATE_CHANGE::CS_RUN_STATE_CHANGE(const CS_RUN_STATE_CHANGE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_RUN_STATE_CHANGE)
}

void CS_RUN_STATE_CHANGE::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isrunning_ = false;
}

CS_RUN_STATE_CHANGE::~CS_RUN_STATE_CHANGE() {
  // @@protoc_insertion_point(destructor:CS_RUN_STATE_CHANGE)
  SharedDtor();
}

void CS_RUN_STATE_CHANGE::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_RUN_STATE_CHANGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_RUN_STATE_CHANGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_RUN_STATE_CHANGE_descriptor_;
}

const CS_RUN_STATE_CHANGE& CS_RUN_STATE_CHANGE::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_RUN_STATE_CHANGE> CS_RUN_STATE_CHANGE_default_instance_;

CS_RUN_STATE_CHANGE* CS_RUN_STATE_CHANGE::New(::google::protobuf::Arena* arena) const {
  CS_RUN_STATE_CHANGE* n = new CS_RUN_STATE_CHANGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_RUN_STATE_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_RUN_STATE_CHANGE)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    isrunning_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_RUN_STATE_CHANGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_RUN_STATE_CHANGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isrunning;
        break;
      }

      // required bool isrunning = 2;
      case 2: {
        if (tag == 16) {
         parse_isrunning:
          set_has_isrunning();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrunning_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_RUN_STATE_CHANGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_RUN_STATE_CHANGE)
  return false;
#undef DO_
}

void CS_RUN_STATE_CHANGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_RUN_STATE_CHANGE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required bool isrunning = 2;
  if (has_isrunning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isrunning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_RUN_STATE_CHANGE)
}

::google::protobuf::uint8* CS_RUN_STATE_CHANGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_RUN_STATE_CHANGE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required bool isrunning = 2;
  if (has_isrunning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isrunning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_RUN_STATE_CHANGE)
  return target;
}

size_t CS_RUN_STATE_CHANGE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_RUN_STATE_CHANGE)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_isrunning()) {
    // required bool isrunning = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CS_RUN_STATE_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_RUN_STATE_CHANGE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required bool isrunning = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_RUN_STATE_CHANGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_RUN_STATE_CHANGE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_RUN_STATE_CHANGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_RUN_STATE_CHANGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_RUN_STATE_CHANGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_RUN_STATE_CHANGE)
    UnsafeMergeFrom(*source);
  }
}

void CS_RUN_STATE_CHANGE::MergeFrom(const CS_RUN_STATE_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_RUN_STATE_CHANGE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_RUN_STATE_CHANGE::UnsafeMergeFrom(const CS_RUN_STATE_CHANGE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_isrunning()) {
      set_isrunning(from.isrunning());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_RUN_STATE_CHANGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_RUN_STATE_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_RUN_STATE_CHANGE::CopyFrom(const CS_RUN_STATE_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_RUN_STATE_CHANGE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_RUN_STATE_CHANGE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_RUN_STATE_CHANGE::Swap(CS_RUN_STATE_CHANGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_RUN_STATE_CHANGE::InternalSwap(CS_RUN_STATE_CHANGE* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(isrunning_, other->isrunning_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_RUN_STATE_CHANGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_RUN_STATE_CHANGE_descriptor_;
  metadata.reflection = CS_RUN_STATE_CHANGE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_RUN_STATE_CHANGE

// required bytes entityid = 1;
bool CS_RUN_STATE_CHANGE::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_RUN_STATE_CHANGE::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_RUN_STATE_CHANGE::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_RUN_STATE_CHANGE::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& CS_RUN_STATE_CHANGE::entityid() const {
  // @@protoc_insertion_point(field_get:CS_RUN_STATE_CHANGE.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_RUN_STATE_CHANGE::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_RUN_STATE_CHANGE.entityid)
}
void CS_RUN_STATE_CHANGE::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_RUN_STATE_CHANGE.entityid)
}
void CS_RUN_STATE_CHANGE::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_RUN_STATE_CHANGE.entityid)
}
::std::string* CS_RUN_STATE_CHANGE::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:CS_RUN_STATE_CHANGE.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_RUN_STATE_CHANGE::release_entityid() {
  // @@protoc_insertion_point(field_release:CS_RUN_STATE_CHANGE.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_RUN_STATE_CHANGE::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:CS_RUN_STATE_CHANGE.entityid)
}

// required bool isrunning = 2;
bool CS_RUN_STATE_CHANGE::has_isrunning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_RUN_STATE_CHANGE::set_has_isrunning() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_RUN_STATE_CHANGE::clear_has_isrunning() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_RUN_STATE_CHANGE::clear_isrunning() {
  isrunning_ = false;
  clear_has_isrunning();
}
bool CS_RUN_STATE_CHANGE::isrunning() const {
  // @@protoc_insertion_point(field_get:CS_RUN_STATE_CHANGE.isrunning)
  return isrunning_;
}
void CS_RUN_STATE_CHANGE::set_isrunning(bool value) {
  set_has_isrunning();
  isrunning_ = value;
  // @@protoc_insertion_point(field_set:CS_RUN_STATE_CHANGE.isrunning)
}

inline const CS_RUN_STATE_CHANGE* CS_RUN_STATE_CHANGE::internal_default_instance() {
  return &CS_RUN_STATE_CHANGE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_ROTATE_CHANGE::kEntityidFieldNumber;
const int CS_ROTATE_CHANGE::kRotationYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_ROTATE_CHANGE::CS_ROTATE_CHANGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ROTATE_CHANGE)
}

void CS_ROTATE_CHANGE::InitAsDefaultInstance() {
}

CS_ROTATE_CHANGE::CS_ROTATE_CHANGE(const CS_ROTATE_CHANGE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_ROTATE_CHANGE)
}

void CS_ROTATE_CHANGE::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotationy_ = 0;
}

CS_ROTATE_CHANGE::~CS_ROTATE_CHANGE() {
  // @@protoc_insertion_point(destructor:CS_ROTATE_CHANGE)
  SharedDtor();
}

void CS_ROTATE_CHANGE::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_ROTATE_CHANGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ROTATE_CHANGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ROTATE_CHANGE_descriptor_;
}

const CS_ROTATE_CHANGE& CS_ROTATE_CHANGE::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CS_ROTATE_CHANGE> CS_ROTATE_CHANGE_default_instance_;

CS_ROTATE_CHANGE* CS_ROTATE_CHANGE::New(::google::protobuf::Arena* arena) const {
  CS_ROTATE_CHANGE* n = new CS_ROTATE_CHANGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_ROTATE_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ROTATE_CHANGE)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    rotationy_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CS_ROTATE_CHANGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_ROTATE_CHANGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_rotationY;
        break;
      }

      // required float rotationY = 2;
      case 2: {
        if (tag == 21) {
         parse_rotationY:
          set_has_rotationy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CS_ROTATE_CHANGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_ROTATE_CHANGE)
  return false;
#undef DO_
}

void CS_ROTATE_CHANGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_ROTATE_CHANGE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required float rotationY = 2;
  if (has_rotationy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rotationy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CS_ROTATE_CHANGE)
}

::google::protobuf::uint8* CS_ROTATE_CHANGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CS_ROTATE_CHANGE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required float rotationY = 2;
  if (has_rotationy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rotationy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ROTATE_CHANGE)
  return target;
}

size_t CS_ROTATE_CHANGE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CS_ROTATE_CHANGE)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_rotationy()) {
    // required float rotationY = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CS_ROTATE_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ROTATE_CHANGE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required float rotationY = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ROTATE_CHANGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ROTATE_CHANGE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CS_ROTATE_CHANGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_ROTATE_CHANGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ROTATE_CHANGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ROTATE_CHANGE)
    UnsafeMergeFrom(*source);
  }
}

void CS_ROTATE_CHANGE::MergeFrom(const CS_ROTATE_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ROTATE_CHANGE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CS_ROTATE_CHANGE::UnsafeMergeFrom(const CS_ROTATE_CHANGE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_rotationy()) {
      set_rotationy(from.rotationy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CS_ROTATE_CHANGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ROTATE_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ROTATE_CHANGE::CopyFrom(const CS_ROTATE_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ROTATE_CHANGE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CS_ROTATE_CHANGE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_ROTATE_CHANGE::Swap(CS_ROTATE_CHANGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_ROTATE_CHANGE::InternalSwap(CS_ROTATE_CHANGE* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(rotationy_, other->rotationy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_ROTATE_CHANGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ROTATE_CHANGE_descriptor_;
  metadata.reflection = CS_ROTATE_CHANGE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_ROTATE_CHANGE

// required bytes entityid = 1;
bool CS_ROTATE_CHANGE::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CS_ROTATE_CHANGE::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void CS_ROTATE_CHANGE::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CS_ROTATE_CHANGE::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& CS_ROTATE_CHANGE::entityid() const {
  // @@protoc_insertion_point(field_get:CS_ROTATE_CHANGE.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_ROTATE_CHANGE::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_ROTATE_CHANGE.entityid)
}
void CS_ROTATE_CHANGE::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_ROTATE_CHANGE.entityid)
}
void CS_ROTATE_CHANGE::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_ROTATE_CHANGE.entityid)
}
::std::string* CS_ROTATE_CHANGE::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:CS_ROTATE_CHANGE.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_ROTATE_CHANGE::release_entityid() {
  // @@protoc_insertion_point(field_release:CS_ROTATE_CHANGE.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_ROTATE_CHANGE::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:CS_ROTATE_CHANGE.entityid)
}

// required float rotationY = 2;
bool CS_ROTATE_CHANGE::has_rotationy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CS_ROTATE_CHANGE::set_has_rotationy() {
  _has_bits_[0] |= 0x00000002u;
}
void CS_ROTATE_CHANGE::clear_has_rotationy() {
  _has_bits_[0] &= ~0x00000002u;
}
void CS_ROTATE_CHANGE::clear_rotationy() {
  rotationy_ = 0;
  clear_has_rotationy();
}
float CS_ROTATE_CHANGE::rotationy() const {
  // @@protoc_insertion_point(field_get:CS_ROTATE_CHANGE.rotationY)
  return rotationy_;
}
void CS_ROTATE_CHANGE::set_rotationy(float value) {
  set_has_rotationy();
  rotationy_ = value;
  // @@protoc_insertion_point(field_set:CS_ROTATE_CHANGE.rotationY)
}

inline const CS_ROTATE_CHANGE* CS_ROTATE_CHANGE::internal_default_instance() {
  return &CS_ROTATE_CHANGE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_RUN_STATE_CHANGE::kEntityidFieldNumber;
const int SC_RUN_STATE_CHANGE::kIsrunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_RUN_STATE_CHANGE::SC_RUN_STATE_CHANGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_RUN_STATE_CHANGE)
}

void SC_RUN_STATE_CHANGE::InitAsDefaultInstance() {
}

SC_RUN_STATE_CHANGE::SC_RUN_STATE_CHANGE(const SC_RUN_STATE_CHANGE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_RUN_STATE_CHANGE)
}

void SC_RUN_STATE_CHANGE::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isrunning_ = false;
}

SC_RUN_STATE_CHANGE::~SC_RUN_STATE_CHANGE() {
  // @@protoc_insertion_point(destructor:SC_RUN_STATE_CHANGE)
  SharedDtor();
}

void SC_RUN_STATE_CHANGE::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_RUN_STATE_CHANGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_RUN_STATE_CHANGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_RUN_STATE_CHANGE_descriptor_;
}

const SC_RUN_STATE_CHANGE& SC_RUN_STATE_CHANGE::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_RUN_STATE_CHANGE> SC_RUN_STATE_CHANGE_default_instance_;

SC_RUN_STATE_CHANGE* SC_RUN_STATE_CHANGE::New(::google::protobuf::Arena* arena) const {
  SC_RUN_STATE_CHANGE* n = new SC_RUN_STATE_CHANGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_RUN_STATE_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_RUN_STATE_CHANGE)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    isrunning_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_RUN_STATE_CHANGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_RUN_STATE_CHANGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isrunning;
        break;
      }

      // required bool isrunning = 2;
      case 2: {
        if (tag == 16) {
         parse_isrunning:
          set_has_isrunning();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrunning_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_RUN_STATE_CHANGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_RUN_STATE_CHANGE)
  return false;
#undef DO_
}

void SC_RUN_STATE_CHANGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_RUN_STATE_CHANGE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required bool isrunning = 2;
  if (has_isrunning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isrunning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_RUN_STATE_CHANGE)
}

::google::protobuf::uint8* SC_RUN_STATE_CHANGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_RUN_STATE_CHANGE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required bool isrunning = 2;
  if (has_isrunning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isrunning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_RUN_STATE_CHANGE)
  return target;
}

size_t SC_RUN_STATE_CHANGE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_RUN_STATE_CHANGE)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_isrunning()) {
    // required bool isrunning = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SC_RUN_STATE_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_RUN_STATE_CHANGE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required bool isrunning = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_RUN_STATE_CHANGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_RUN_STATE_CHANGE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_RUN_STATE_CHANGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_RUN_STATE_CHANGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_RUN_STATE_CHANGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_RUN_STATE_CHANGE)
    UnsafeMergeFrom(*source);
  }
}

void SC_RUN_STATE_CHANGE::MergeFrom(const SC_RUN_STATE_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_RUN_STATE_CHANGE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_RUN_STATE_CHANGE::UnsafeMergeFrom(const SC_RUN_STATE_CHANGE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_isrunning()) {
      set_isrunning(from.isrunning());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_RUN_STATE_CHANGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_RUN_STATE_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_RUN_STATE_CHANGE::CopyFrom(const SC_RUN_STATE_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_RUN_STATE_CHANGE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_RUN_STATE_CHANGE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_RUN_STATE_CHANGE::Swap(SC_RUN_STATE_CHANGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_RUN_STATE_CHANGE::InternalSwap(SC_RUN_STATE_CHANGE* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(isrunning_, other->isrunning_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_RUN_STATE_CHANGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_RUN_STATE_CHANGE_descriptor_;
  metadata.reflection = SC_RUN_STATE_CHANGE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_RUN_STATE_CHANGE

// required bytes entityid = 1;
bool SC_RUN_STATE_CHANGE::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_RUN_STATE_CHANGE::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_RUN_STATE_CHANGE::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_RUN_STATE_CHANGE::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& SC_RUN_STATE_CHANGE::entityid() const {
  // @@protoc_insertion_point(field_get:SC_RUN_STATE_CHANGE.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_RUN_STATE_CHANGE::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_RUN_STATE_CHANGE.entityid)
}
void SC_RUN_STATE_CHANGE::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_RUN_STATE_CHANGE.entityid)
}
void SC_RUN_STATE_CHANGE::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_RUN_STATE_CHANGE.entityid)
}
::std::string* SC_RUN_STATE_CHANGE::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:SC_RUN_STATE_CHANGE.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_RUN_STATE_CHANGE::release_entityid() {
  // @@protoc_insertion_point(field_release:SC_RUN_STATE_CHANGE.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_RUN_STATE_CHANGE::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:SC_RUN_STATE_CHANGE.entityid)
}

// required bool isrunning = 2;
bool SC_RUN_STATE_CHANGE::has_isrunning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_RUN_STATE_CHANGE::set_has_isrunning() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_RUN_STATE_CHANGE::clear_has_isrunning() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_RUN_STATE_CHANGE::clear_isrunning() {
  isrunning_ = false;
  clear_has_isrunning();
}
bool SC_RUN_STATE_CHANGE::isrunning() const {
  // @@protoc_insertion_point(field_get:SC_RUN_STATE_CHANGE.isrunning)
  return isrunning_;
}
void SC_RUN_STATE_CHANGE::set_isrunning(bool value) {
  set_has_isrunning();
  isrunning_ = value;
  // @@protoc_insertion_point(field_set:SC_RUN_STATE_CHANGE.isrunning)
}

inline const SC_RUN_STATE_CHANGE* SC_RUN_STATE_CHANGE::internal_default_instance() {
  return &SC_RUN_STATE_CHANGE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_ROTATE_CHANGE::kEntityidFieldNumber;
const int SC_ROTATE_CHANGE::kRotationYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_ROTATE_CHANGE::SC_ROTATE_CHANGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_LuaMessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ROTATE_CHANGE)
}

void SC_ROTATE_CHANGE::InitAsDefaultInstance() {
}

SC_ROTATE_CHANGE::SC_ROTATE_CHANGE(const SC_ROTATE_CHANGE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_ROTATE_CHANGE)
}

void SC_ROTATE_CHANGE::SharedCtor() {
  _cached_size_ = 0;
  entityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotationy_ = 0;
}

SC_ROTATE_CHANGE::~SC_ROTATE_CHANGE() {
  // @@protoc_insertion_point(destructor:SC_ROTATE_CHANGE)
  SharedDtor();
}

void SC_ROTATE_CHANGE::SharedDtor() {
  entityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_ROTATE_CHANGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ROTATE_CHANGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ROTATE_CHANGE_descriptor_;
}

const SC_ROTATE_CHANGE& SC_ROTATE_CHANGE::default_instance() {
  protobuf_InitDefaults_LuaMessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SC_ROTATE_CHANGE> SC_ROTATE_CHANGE_default_instance_;

SC_ROTATE_CHANGE* SC_ROTATE_CHANGE::New(::google::protobuf::Arena* arena) const {
  SC_ROTATE_CHANGE* n = new SC_ROTATE_CHANGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_ROTATE_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ROTATE_CHANGE)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_entityid()) {
      entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    rotationy_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SC_ROTATE_CHANGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_ROTATE_CHANGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entityid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entityid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_rotationY;
        break;
      }

      // required float rotationY = 2;
      case 2: {
        if (tag == 21) {
         parse_rotationY:
          set_has_rotationy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC_ROTATE_CHANGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_ROTATE_CHANGE)
  return false;
#undef DO_
}

void SC_ROTATE_CHANGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_ROTATE_CHANGE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entityid(), output);
  }

  // required float rotationY = 2;
  if (has_rotationy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rotationy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC_ROTATE_CHANGE)
}

::google::protobuf::uint8* SC_ROTATE_CHANGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC_ROTATE_CHANGE)
  // required bytes entityid = 1;
  if (has_entityid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entityid(), target);
  }

  // required float rotationY = 2;
  if (has_rotationy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rotationy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ROTATE_CHANGE)
  return target;
}

size_t SC_ROTATE_CHANGE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SC_ROTATE_CHANGE)
  size_t total_size = 0;

  if (has_entityid()) {
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());
  }

  if (has_rotationy()) {
    // required float rotationY = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SC_ROTATE_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ROTATE_CHANGE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes entityid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entityid());

    // required float rotationY = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ROTATE_CHANGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ROTATE_CHANGE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SC_ROTATE_CHANGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_ROTATE_CHANGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ROTATE_CHANGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ROTATE_CHANGE)
    UnsafeMergeFrom(*source);
  }
}

void SC_ROTATE_CHANGE::MergeFrom(const SC_ROTATE_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ROTATE_CHANGE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SC_ROTATE_CHANGE::UnsafeMergeFrom(const SC_ROTATE_CHANGE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_has_entityid();
      entityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entityid_);
    }
    if (from.has_rotationy()) {
      set_rotationy(from.rotationy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SC_ROTATE_CHANGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ROTATE_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ROTATE_CHANGE::CopyFrom(const SC_ROTATE_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ROTATE_CHANGE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SC_ROTATE_CHANGE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_ROTATE_CHANGE::Swap(SC_ROTATE_CHANGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_ROTATE_CHANGE::InternalSwap(SC_ROTATE_CHANGE* other) {
  entityid_.Swap(&other->entityid_);
  std::swap(rotationy_, other->rotationy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_ROTATE_CHANGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ROTATE_CHANGE_descriptor_;
  metadata.reflection = SC_ROTATE_CHANGE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_ROTATE_CHANGE

// required bytes entityid = 1;
bool SC_ROTATE_CHANGE::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SC_ROTATE_CHANGE::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
void SC_ROTATE_CHANGE::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SC_ROTATE_CHANGE::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
const ::std::string& SC_ROTATE_CHANGE::entityid() const {
  // @@protoc_insertion_point(field_get:SC_ROTATE_CHANGE.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_ROTATE_CHANGE::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_ROTATE_CHANGE.entityid)
}
void SC_ROTATE_CHANGE::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_ROTATE_CHANGE.entityid)
}
void SC_ROTATE_CHANGE::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_ROTATE_CHANGE.entityid)
}
::std::string* SC_ROTATE_CHANGE::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:SC_ROTATE_CHANGE.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_ROTATE_CHANGE::release_entityid() {
  // @@protoc_insertion_point(field_release:SC_ROTATE_CHANGE.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_ROTATE_CHANGE::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:SC_ROTATE_CHANGE.entityid)
}

// required float rotationY = 2;
bool SC_ROTATE_CHANGE::has_rotationy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SC_ROTATE_CHANGE::set_has_rotationy() {
  _has_bits_[0] |= 0x00000002u;
}
void SC_ROTATE_CHANGE::clear_has_rotationy() {
  _has_bits_[0] &= ~0x00000002u;
}
void SC_ROTATE_CHANGE::clear_rotationy() {
  rotationy_ = 0;
  clear_has_rotationy();
}
float SC_ROTATE_CHANGE::rotationy() const {
  // @@protoc_insertion_point(field_get:SC_ROTATE_CHANGE.rotationY)
  return rotationy_;
}
void SC_ROTATE_CHANGE::set_rotationy(float value) {
  set_has_rotationy();
  rotationy_ = value;
  // @@protoc_insertion_point(field_set:SC_ROTATE_CHANGE.rotationY)
}

inline const SC_ROTATE_CHANGE* SC_ROTATE_CHANGE::internal_default_instance() {
  return &SC_ROTATE_CHANGE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
