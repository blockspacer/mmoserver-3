// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servermessage.proto

#ifndef PROTOBUF_servermessage_2eproto__INCLUDED
#define PROTOBUF_servermessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_servermessage_2eproto();
void protobuf_InitDefaults_servermessage_2eproto();
void protobuf_AssignDesc_servermessage_2eproto();
void protobuf_ShutdownFile_servermessage_2eproto();

class AvatarChangeGame;
class AvatarInfo;
class GS_CLIENT_DISCONNECT;
class GS_REGISTER_SERVER;
class GameServerInfos;
class LUA_SCRIPT;
class SG_KICK_CLIENT;
class SG_REGISTER_SERVICE;
class ServerInfo;
class TestPing;
class TestPingReply;

enum SERVER_MESSAGE_OPCODE {
  SERVER_OPCODE_AVATAR_CHANGER_GAME = 200
};
bool SERVER_MESSAGE_OPCODE_IsValid(int value);
const SERVER_MESSAGE_OPCODE SERVER_MESSAGE_OPCODE_MIN = SERVER_OPCODE_AVATAR_CHANGER_GAME;
const SERVER_MESSAGE_OPCODE SERVER_MESSAGE_OPCODE_MAX = SERVER_OPCODE_AVATAR_CHANGER_GAME;
const int SERVER_MESSAGE_OPCODE_ARRAYSIZE = SERVER_MESSAGE_OPCODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_MESSAGE_OPCODE_descriptor();
inline const ::std::string& SERVER_MESSAGE_OPCODE_Name(SERVER_MESSAGE_OPCODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_MESSAGE_OPCODE_descriptor(), value);
}
inline bool SERVER_MESSAGE_OPCODE_Parse(
    const ::std::string& name, SERVER_MESSAGE_OPCODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_MESSAGE_OPCODE>(
    SERVER_MESSAGE_OPCODE_descriptor(), name, value);
}
// ===================================================================

class GS_REGISTER_SERVER : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GS_REGISTER_SERVER) */ {
 public:
  GS_REGISTER_SERVER();
  virtual ~GS_REGISTER_SERVER();

  GS_REGISTER_SERVER(const GS_REGISTER_SERVER& from);

  inline GS_REGISTER_SERVER& operator=(const GS_REGISTER_SERVER& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS_REGISTER_SERVER& default_instance();

  static const GS_REGISTER_SERVER* internal_default_instance();

  void Swap(GS_REGISTER_SERVER* other);

  // implements Message ----------------------------------------------

  inline GS_REGISTER_SERVER* New() const { return New(NULL); }

  GS_REGISTER_SERVER* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS_REGISTER_SERVER& from);
  void MergeFrom(const GS_REGISTER_SERVER& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GS_REGISTER_SERVER* other);
  void UnsafeMergeFrom(const GS_REGISTER_SERVER& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serverid = 1;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // required int32 servertype = 2;
  bool has_servertype() const;
  void clear_servertype();
  static const int kServertypeFieldNumber = 2;
  ::google::protobuf::int32 servertype() const;
  void set_servertype(::google::protobuf::int32 value);

  // required bytes ip = 3;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required int32 port = 4;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GS_REGISTER_SERVER)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 servertype_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GS_REGISTER_SERVER> GS_REGISTER_SERVER_default_instance_;

// -------------------------------------------------------------------

class SG_REGISTER_SERVICE : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SG_REGISTER_SERVICE) */ {
 public:
  SG_REGISTER_SERVICE();
  virtual ~SG_REGISTER_SERVICE();

  SG_REGISTER_SERVICE(const SG_REGISTER_SERVICE& from);

  inline SG_REGISTER_SERVICE& operator=(const SG_REGISTER_SERVICE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG_REGISTER_SERVICE& default_instance();

  static const SG_REGISTER_SERVICE* internal_default_instance();

  void Swap(SG_REGISTER_SERVICE* other);

  // implements Message ----------------------------------------------

  inline SG_REGISTER_SERVICE* New() const { return New(NULL); }

  SG_REGISTER_SERVICE* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG_REGISTER_SERVICE& from);
  void MergeFrom(const SG_REGISTER_SERVICE& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SG_REGISTER_SERVICE* other);
  void UnsafeMergeFrom(const SG_REGISTER_SERVICE& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 servicetype = 1;
  bool has_servicetype() const;
  void clear_servicetype();
  static const int kServicetypeFieldNumber = 1;
  ::google::protobuf::int32 servicetype() const;
  void set_servicetype(::google::protobuf::int32 value);

  // required int32 serverid = 2;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 2;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SG_REGISTER_SERVICE)
 private:
  inline void set_has_servicetype();
  inline void clear_has_servicetype();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 servicetype_;
  ::google::protobuf::int32 serverid_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SG_REGISTER_SERVICE> SG_REGISTER_SERVICE_default_instance_;

// -------------------------------------------------------------------

class GS_CLIENT_DISCONNECT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GS_CLIENT_DISCONNECT) */ {
 public:
  GS_CLIENT_DISCONNECT();
  virtual ~GS_CLIENT_DISCONNECT();

  GS_CLIENT_DISCONNECT(const GS_CLIENT_DISCONNECT& from);

  inline GS_CLIENT_DISCONNECT& operator=(const GS_CLIENT_DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS_CLIENT_DISCONNECT& default_instance();

  static const GS_CLIENT_DISCONNECT* internal_default_instance();

  void Swap(GS_CLIENT_DISCONNECT* other);

  // implements Message ----------------------------------------------

  inline GS_CLIENT_DISCONNECT* New() const { return New(NULL); }

  GS_CLIENT_DISCONNECT* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS_CLIENT_DISCONNECT& from);
  void MergeFrom(const GS_CLIENT_DISCONNECT& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GS_CLIENT_DISCONNECT* other);
  void UnsafeMergeFrom(const GS_CLIENT_DISCONNECT& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sessionid = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GS_CLIENT_DISCONNECT)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 sessionid_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GS_CLIENT_DISCONNECT> GS_CLIENT_DISCONNECT_default_instance_;

// -------------------------------------------------------------------

class SG_KICK_CLIENT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SG_KICK_CLIENT) */ {
 public:
  SG_KICK_CLIENT();
  virtual ~SG_KICK_CLIENT();

  SG_KICK_CLIENT(const SG_KICK_CLIENT& from);

  inline SG_KICK_CLIENT& operator=(const SG_KICK_CLIENT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG_KICK_CLIENT& default_instance();

  static const SG_KICK_CLIENT* internal_default_instance();

  void Swap(SG_KICK_CLIENT* other);

  // implements Message ----------------------------------------------

  inline SG_KICK_CLIENT* New() const { return New(NULL); }

  SG_KICK_CLIENT* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG_KICK_CLIENT& from);
  void MergeFrom(const SG_KICK_CLIENT& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SG_KICK_CLIENT* other);
  void UnsafeMergeFrom(const SG_KICK_CLIENT& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sessionid = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SG_KICK_CLIENT)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 sessionid_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SG_KICK_CLIENT> SG_KICK_CLIENT_default_instance_;

// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static const ServerInfo* internal_default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const { return New(NULL); }

  ServerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerInfo* other);
  void UnsafeMergeFrom(const ServerInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // optional int32 sid = 3;
  bool has_sid() const;
  void clear_sid();
  static const int kSidFieldNumber = 3;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // optional bool banclient = 4;
  bool has_banclient() const;
  void clear_banclient();
  static const int kBanclientFieldNumber = 4;
  bool banclient() const;
  void set_banclient(bool value);

  // optional int32 svrtype = 5;
  bool has_svrtype() const;
  void clear_svrtype();
  static const int kSvrtypeFieldNumber = 5;
  ::google::protobuf::int32 svrtype() const;
  void set_svrtype(::google::protobuf::int32 value);

  // optional int32 line_scene_type = 6;
  bool has_line_scene_type() const;
  void clear_line_scene_type();
  static const int kLineSceneTypeFieldNumber = 6;
  ::google::protobuf::int32 line_scene_type() const;
  void set_line_scene_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_banclient();
  inline void clear_has_banclient();
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_line_scene_type();
  inline void clear_has_line_scene_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 sid_;
  bool banclient_;
  ::google::protobuf::int32 svrtype_;
  ::google::protobuf::int32 line_scene_type_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServerInfo> ServerInfo_default_instance_;

// -------------------------------------------------------------------

class GameServerInfos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameServerInfos) */ {
 public:
  GameServerInfos();
  virtual ~GameServerInfos();

  GameServerInfos(const GameServerInfos& from);

  inline GameServerInfos& operator=(const GameServerInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServerInfos& default_instance();

  static const GameServerInfos* internal_default_instance();

  void Swap(GameServerInfos* other);

  // implements Message ----------------------------------------------

  inline GameServerInfos* New() const { return New(NULL); }

  GameServerInfos* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameServerInfos& from);
  void MergeFrom(const GameServerInfos& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameServerInfos* other);
  void UnsafeMergeFrom(const GameServerInfos& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerInfo gameservers = 1;
  int gameservers_size() const;
  void clear_gameservers();
  static const int kGameserversFieldNumber = 1;
  const ::ServerInfo& gameservers(int index) const;
  ::ServerInfo* mutable_gameservers(int index);
  ::ServerInfo* add_gameservers();
  ::google::protobuf::RepeatedPtrField< ::ServerInfo >*
      mutable_gameservers();
  const ::google::protobuf::RepeatedPtrField< ::ServerInfo >&
      gameservers() const;

  // @@protoc_insertion_point(class_scope:GameServerInfos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ServerInfo > gameservers_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GameServerInfos> GameServerInfos_default_instance_;

// -------------------------------------------------------------------

class LUA_SCRIPT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LUA_SCRIPT) */ {
 public:
  LUA_SCRIPT();
  virtual ~LUA_SCRIPT();

  LUA_SCRIPT(const LUA_SCRIPT& from);

  inline LUA_SCRIPT& operator=(const LUA_SCRIPT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LUA_SCRIPT& default_instance();

  static const LUA_SCRIPT* internal_default_instance();

  void Swap(LUA_SCRIPT* other);

  // implements Message ----------------------------------------------

  inline LUA_SCRIPT* New() const { return New(NULL); }

  LUA_SCRIPT* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LUA_SCRIPT& from);
  void MergeFrom(const LUA_SCRIPT& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LUA_SCRIPT* other);
  void UnsafeMergeFrom(const LUA_SCRIPT& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes script_content = 1;
  bool has_script_content() const;
  void clear_script_content();
  static const int kScriptContentFieldNumber = 1;
  const ::std::string& script_content() const;
  void set_script_content(const ::std::string& value);
  void set_script_content(const char* value);
  void set_script_content(const void* value, size_t size);
  ::std::string* mutable_script_content();
  ::std::string* release_script_content();
  void set_allocated_script_content(::std::string* script_content);

  // required int32 clientsock = 2;
  bool has_clientsock() const;
  void clear_clientsock();
  static const int kClientsockFieldNumber = 2;
  ::google::protobuf::int32 clientsock() const;
  void set_clientsock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LUA_SCRIPT)
 private:
  inline void set_has_script_content();
  inline void clear_has_script_content();
  inline void set_has_clientsock();
  inline void clear_has_clientsock();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr script_content_;
  ::google::protobuf::int32 clientsock_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LUA_SCRIPT> LUA_SCRIPT_default_instance_;

// -------------------------------------------------------------------

class TestPing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestPing) */ {
 public:
  TestPing();
  virtual ~TestPing();

  TestPing(const TestPing& from);

  inline TestPing& operator=(const TestPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestPing& default_instance();

  static const TestPing* internal_default_instance();

  void Swap(TestPing* other);

  // implements Message ----------------------------------------------

  inline TestPing* New() const { return New(NULL); }

  TestPing* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestPing& from);
  void MergeFrom(const TestPing& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestPing* other);
  void UnsafeMergeFrom(const TestPing& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // required int32 serverid = 2;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 2;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TestPing)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 serverid_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TestPing> TestPing_default_instance_;

// -------------------------------------------------------------------

class TestPingReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestPingReply) */ {
 public:
  TestPingReply();
  virtual ~TestPingReply();

  TestPingReply(const TestPingReply& from);

  inline TestPingReply& operator=(const TestPingReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestPingReply& default_instance();

  static const TestPingReply* internal_default_instance();

  void Swap(TestPingReply* other);

  // implements Message ----------------------------------------------

  inline TestPingReply* New() const { return New(NULL); }

  TestPingReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestPingReply& from);
  void MergeFrom(const TestPingReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestPingReply* other);
  void UnsafeMergeFrom(const TestPingReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // required int32 serverid = 2;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 2;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TestPingReply)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 serverid_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TestPingReply> TestPingReply_default_instance_;

// -------------------------------------------------------------------

class AvatarChangeGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AvatarChangeGame) */ {
 public:
  AvatarChangeGame();
  virtual ~AvatarChangeGame();

  AvatarChangeGame(const AvatarChangeGame& from);

  inline AvatarChangeGame& operator=(const AvatarChangeGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvatarChangeGame& default_instance();

  static const AvatarChangeGame* internal_default_instance();

  void Swap(AvatarChangeGame* other);

  // implements Message ----------------------------------------------

  inline AvatarChangeGame* New() const { return New(NULL); }

  AvatarChangeGame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvatarChangeGame& from);
  void MergeFrom(const AvatarChangeGame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AvatarChangeGame* other);
  void UnsafeMergeFrom(const AvatarChangeGame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sessionid = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // required int32 gameid = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 2;
  ::google::protobuf::int32 gameid() const;
  void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AvatarChangeGame)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::int32 gameid_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AvatarChangeGame> AvatarChangeGame_default_instance_;

// -------------------------------------------------------------------

class AvatarInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AvatarInfo) */ {
 public:
  AvatarInfo();
  virtual ~AvatarInfo();

  AvatarInfo(const AvatarInfo& from);

  inline AvatarInfo& operator=(const AvatarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvatarInfo& default_instance();

  static const AvatarInfo* internal_default_instance();

  void Swap(AvatarInfo* other);

  // implements Message ----------------------------------------------

  inline AvatarInfo* New() const { return New(NULL); }

  AvatarInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvatarInfo& from);
  void MergeFrom(const AvatarInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AvatarInfo* other);
  void UnsafeMergeFrom(const AvatarInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sessionid = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // required bytes avatarID = 2;
  bool has_avatarid() const;
  void clear_avatarid();
  static const int kAvatarIDFieldNumber = 2;
  const ::std::string& avatarid() const;
  void set_avatarid(const ::std::string& value);
  void set_avatarid(const char* value);
  void set_avatarid(const void* value, size_t size);
  ::std::string* mutable_avatarid();
  ::std::string* release_avatarid();
  void set_allocated_avatarid(::std::string* avatarid);

  // required int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AvatarInfo)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_state();
  inline void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr avatarid_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_InitDefaults_servermessage_2eproto_impl();
  friend void  protobuf_AddDesc_servermessage_2eproto_impl();
  friend void protobuf_AssignDesc_servermessage_2eproto();
  friend void protobuf_ShutdownFile_servermessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AvatarInfo> AvatarInfo_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GS_REGISTER_SERVER

// required int32 serverid = 1;
inline bool GS_REGISTER_SERVER::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS_REGISTER_SERVER::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS_REGISTER_SERVER::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS_REGISTER_SERVER::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GS_REGISTER_SERVER::serverid() const {
  // @@protoc_insertion_point(field_get:GS_REGISTER_SERVER.serverid)
  return serverid_;
}
inline void GS_REGISTER_SERVER::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:GS_REGISTER_SERVER.serverid)
}

// required int32 servertype = 2;
inline bool GS_REGISTER_SERVER::has_servertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS_REGISTER_SERVER::set_has_servertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS_REGISTER_SERVER::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS_REGISTER_SERVER::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 GS_REGISTER_SERVER::servertype() const {
  // @@protoc_insertion_point(field_get:GS_REGISTER_SERVER.servertype)
  return servertype_;
}
inline void GS_REGISTER_SERVER::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
  // @@protoc_insertion_point(field_set:GS_REGISTER_SERVER.servertype)
}

// required bytes ip = 3;
inline bool GS_REGISTER_SERVER::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS_REGISTER_SERVER::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS_REGISTER_SERVER::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS_REGISTER_SERVER::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& GS_REGISTER_SERVER::ip() const {
  // @@protoc_insertion_point(field_get:GS_REGISTER_SERVER.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GS_REGISTER_SERVER::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GS_REGISTER_SERVER.ip)
}
inline void GS_REGISTER_SERVER::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GS_REGISTER_SERVER.ip)
}
inline void GS_REGISTER_SERVER::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GS_REGISTER_SERVER.ip)
}
inline ::std::string* GS_REGISTER_SERVER::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:GS_REGISTER_SERVER.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GS_REGISTER_SERVER::release_ip() {
  // @@protoc_insertion_point(field_release:GS_REGISTER_SERVER.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GS_REGISTER_SERVER::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:GS_REGISTER_SERVER.ip)
}

// required int32 port = 4;
inline bool GS_REGISTER_SERVER::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS_REGISTER_SERVER::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS_REGISTER_SERVER::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS_REGISTER_SERVER::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GS_REGISTER_SERVER::port() const {
  // @@protoc_insertion_point(field_get:GS_REGISTER_SERVER.port)
  return port_;
}
inline void GS_REGISTER_SERVER::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:GS_REGISTER_SERVER.port)
}

inline const GS_REGISTER_SERVER* GS_REGISTER_SERVER::internal_default_instance() {
  return &GS_REGISTER_SERVER_default_instance_.get();
}
// -------------------------------------------------------------------

// SG_REGISTER_SERVICE

// required int32 servicetype = 1;
inline bool SG_REGISTER_SERVICE::has_servicetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG_REGISTER_SERVICE::set_has_servicetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG_REGISTER_SERVICE::clear_has_servicetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG_REGISTER_SERVICE::clear_servicetype() {
  servicetype_ = 0;
  clear_has_servicetype();
}
inline ::google::protobuf::int32 SG_REGISTER_SERVICE::servicetype() const {
  // @@protoc_insertion_point(field_get:SG_REGISTER_SERVICE.servicetype)
  return servicetype_;
}
inline void SG_REGISTER_SERVICE::set_servicetype(::google::protobuf::int32 value) {
  set_has_servicetype();
  servicetype_ = value;
  // @@protoc_insertion_point(field_set:SG_REGISTER_SERVICE.servicetype)
}

// required int32 serverid = 2;
inline bool SG_REGISTER_SERVICE::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG_REGISTER_SERVICE::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG_REGISTER_SERVICE::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG_REGISTER_SERVICE::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 SG_REGISTER_SERVICE::serverid() const {
  // @@protoc_insertion_point(field_get:SG_REGISTER_SERVICE.serverid)
  return serverid_;
}
inline void SG_REGISTER_SERVICE::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:SG_REGISTER_SERVICE.serverid)
}

inline const SG_REGISTER_SERVICE* SG_REGISTER_SERVICE::internal_default_instance() {
  return &SG_REGISTER_SERVICE_default_instance_.get();
}
// -------------------------------------------------------------------

// GS_CLIENT_DISCONNECT

// required uint64 sessionid = 1;
inline bool GS_CLIENT_DISCONNECT::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS_CLIENT_DISCONNECT::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS_CLIENT_DISCONNECT::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS_CLIENT_DISCONNECT::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 GS_CLIENT_DISCONNECT::sessionid() const {
  // @@protoc_insertion_point(field_get:GS_CLIENT_DISCONNECT.sessionid)
  return sessionid_;
}
inline void GS_CLIENT_DISCONNECT::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:GS_CLIENT_DISCONNECT.sessionid)
}

inline const GS_CLIENT_DISCONNECT* GS_CLIENT_DISCONNECT::internal_default_instance() {
  return &GS_CLIENT_DISCONNECT_default_instance_.get();
}
// -------------------------------------------------------------------

// SG_KICK_CLIENT

// required uint64 sessionid = 1;
inline bool SG_KICK_CLIENT::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG_KICK_CLIENT::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG_KICK_CLIENT::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG_KICK_CLIENT::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 SG_KICK_CLIENT::sessionid() const {
  // @@protoc_insertion_point(field_get:SG_KICK_CLIENT.sessionid)
  return sessionid_;
}
inline void SG_KICK_CLIENT::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:SG_KICK_CLIENT.sessionid)
}

inline const SG_KICK_CLIENT* SG_KICK_CLIENT::internal_default_instance() {
  return &SG_KICK_CLIENT_default_instance_.get();
}
// -------------------------------------------------------------------

// ServerInfo

// required bytes ip = 1;
inline bool ServerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:ServerInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerInfo.ip)
}
inline void ServerInfo::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerInfo.ip)
}
inline ::std::string* ServerInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ServerInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:ServerInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.ip)
}

// required int32 port = 2;
inline bool ServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:ServerInfo.port)
  return port_;
}
inline void ServerInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.port)
}

// optional int32 sid = 3;
inline bool ServerInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 ServerInfo::sid() const {
  // @@protoc_insertion_point(field_get:ServerInfo.sid)
  return sid_;
}
inline void ServerInfo::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.sid)
}

// optional bool banclient = 4;
inline bool ServerInfo::has_banclient() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_banclient() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfo::clear_has_banclient() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfo::clear_banclient() {
  banclient_ = false;
  clear_has_banclient();
}
inline bool ServerInfo::banclient() const {
  // @@protoc_insertion_point(field_get:ServerInfo.banclient)
  return banclient_;
}
inline void ServerInfo::set_banclient(bool value) {
  set_has_banclient();
  banclient_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.banclient)
}

// optional int32 svrtype = 5;
inline bool ServerInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerInfo::clear_svrtype() {
  svrtype_ = 0;
  clear_has_svrtype();
}
inline ::google::protobuf::int32 ServerInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:ServerInfo.svrtype)
  return svrtype_;
}
inline void ServerInfo::set_svrtype(::google::protobuf::int32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.svrtype)
}

// optional int32 line_scene_type = 6;
inline bool ServerInfo::has_line_scene_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerInfo::set_has_line_scene_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerInfo::clear_has_line_scene_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerInfo::clear_line_scene_type() {
  line_scene_type_ = 0;
  clear_has_line_scene_type();
}
inline ::google::protobuf::int32 ServerInfo::line_scene_type() const {
  // @@protoc_insertion_point(field_get:ServerInfo.line_scene_type)
  return line_scene_type_;
}
inline void ServerInfo::set_line_scene_type(::google::protobuf::int32 value) {
  set_has_line_scene_type();
  line_scene_type_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.line_scene_type)
}

inline const ServerInfo* ServerInfo::internal_default_instance() {
  return &ServerInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// GameServerInfos

// repeated .ServerInfo gameservers = 1;
inline int GameServerInfos::gameservers_size() const {
  return gameservers_.size();
}
inline void GameServerInfos::clear_gameservers() {
  gameservers_.Clear();
}
inline const ::ServerInfo& GameServerInfos::gameservers(int index) const {
  // @@protoc_insertion_point(field_get:GameServerInfos.gameservers)
  return gameservers_.Get(index);
}
inline ::ServerInfo* GameServerInfos::mutable_gameservers(int index) {
  // @@protoc_insertion_point(field_mutable:GameServerInfos.gameservers)
  return gameservers_.Mutable(index);
}
inline ::ServerInfo* GameServerInfos::add_gameservers() {
  // @@protoc_insertion_point(field_add:GameServerInfos.gameservers)
  return gameservers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ServerInfo >*
GameServerInfos::mutable_gameservers() {
  // @@protoc_insertion_point(field_mutable_list:GameServerInfos.gameservers)
  return &gameservers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerInfo >&
GameServerInfos::gameservers() const {
  // @@protoc_insertion_point(field_list:GameServerInfos.gameservers)
  return gameservers_;
}

inline const GameServerInfos* GameServerInfos::internal_default_instance() {
  return &GameServerInfos_default_instance_.get();
}
// -------------------------------------------------------------------

// LUA_SCRIPT

// required bytes script_content = 1;
inline bool LUA_SCRIPT::has_script_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LUA_SCRIPT::set_has_script_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LUA_SCRIPT::clear_has_script_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LUA_SCRIPT::clear_script_content() {
  script_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script_content();
}
inline const ::std::string& LUA_SCRIPT::script_content() const {
  // @@protoc_insertion_point(field_get:LUA_SCRIPT.script_content)
  return script_content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LUA_SCRIPT::set_script_content(const ::std::string& value) {
  set_has_script_content();
  script_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LUA_SCRIPT.script_content)
}
inline void LUA_SCRIPT::set_script_content(const char* value) {
  set_has_script_content();
  script_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LUA_SCRIPT.script_content)
}
inline void LUA_SCRIPT::set_script_content(const void* value, size_t size) {
  set_has_script_content();
  script_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LUA_SCRIPT.script_content)
}
inline ::std::string* LUA_SCRIPT::mutable_script_content() {
  set_has_script_content();
  // @@protoc_insertion_point(field_mutable:LUA_SCRIPT.script_content)
  return script_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LUA_SCRIPT::release_script_content() {
  // @@protoc_insertion_point(field_release:LUA_SCRIPT.script_content)
  clear_has_script_content();
  return script_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LUA_SCRIPT::set_allocated_script_content(::std::string* script_content) {
  if (script_content != NULL) {
    set_has_script_content();
  } else {
    clear_has_script_content();
  }
  script_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_content);
  // @@protoc_insertion_point(field_set_allocated:LUA_SCRIPT.script_content)
}

// required int32 clientsock = 2;
inline bool LUA_SCRIPT::has_clientsock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LUA_SCRIPT::set_has_clientsock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LUA_SCRIPT::clear_has_clientsock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LUA_SCRIPT::clear_clientsock() {
  clientsock_ = 0;
  clear_has_clientsock();
}
inline ::google::protobuf::int32 LUA_SCRIPT::clientsock() const {
  // @@protoc_insertion_point(field_get:LUA_SCRIPT.clientsock)
  return clientsock_;
}
inline void LUA_SCRIPT::set_clientsock(::google::protobuf::int32 value) {
  set_has_clientsock();
  clientsock_ = value;
  // @@protoc_insertion_point(field_set:LUA_SCRIPT.clientsock)
}

inline const LUA_SCRIPT* LUA_SCRIPT::internal_default_instance() {
  return &LUA_SCRIPT_default_instance_.get();
}
// -------------------------------------------------------------------

// TestPing

// required uint64 time = 1;
inline bool TestPing::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestPing::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestPing::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestPing::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 TestPing::time() const {
  // @@protoc_insertion_point(field_get:TestPing.time)
  return time_;
}
inline void TestPing::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:TestPing.time)
}

// required int32 serverid = 2;
inline bool TestPing::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestPing::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestPing::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestPing::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 TestPing::serverid() const {
  // @@protoc_insertion_point(field_get:TestPing.serverid)
  return serverid_;
}
inline void TestPing::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:TestPing.serverid)
}

inline const TestPing* TestPing::internal_default_instance() {
  return &TestPing_default_instance_.get();
}
// -------------------------------------------------------------------

// TestPingReply

// required uint64 time = 1;
inline bool TestPingReply::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestPingReply::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestPingReply::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestPingReply::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 TestPingReply::time() const {
  // @@protoc_insertion_point(field_get:TestPingReply.time)
  return time_;
}
inline void TestPingReply::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:TestPingReply.time)
}

// required int32 serverid = 2;
inline bool TestPingReply::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestPingReply::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestPingReply::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestPingReply::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 TestPingReply::serverid() const {
  // @@protoc_insertion_point(field_get:TestPingReply.serverid)
  return serverid_;
}
inline void TestPingReply::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:TestPingReply.serverid)
}

inline const TestPingReply* TestPingReply::internal_default_instance() {
  return &TestPingReply_default_instance_.get();
}
// -------------------------------------------------------------------

// AvatarChangeGame

// required uint64 sessionid = 1;
inline bool AvatarChangeGame::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvatarChangeGame::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AvatarChangeGame::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AvatarChangeGame::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 AvatarChangeGame::sessionid() const {
  // @@protoc_insertion_point(field_get:AvatarChangeGame.sessionid)
  return sessionid_;
}
inline void AvatarChangeGame::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:AvatarChangeGame.sessionid)
}

// required int32 gameid = 2;
inline bool AvatarChangeGame::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AvatarChangeGame::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AvatarChangeGame::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AvatarChangeGame::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 AvatarChangeGame::gameid() const {
  // @@protoc_insertion_point(field_get:AvatarChangeGame.gameid)
  return gameid_;
}
inline void AvatarChangeGame::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:AvatarChangeGame.gameid)
}

inline const AvatarChangeGame* AvatarChangeGame::internal_default_instance() {
  return &AvatarChangeGame_default_instance_.get();
}
// -------------------------------------------------------------------

// AvatarInfo

// required uint64 sessionid = 1;
inline bool AvatarInfo::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvatarInfo::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AvatarInfo::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AvatarInfo::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 AvatarInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:AvatarInfo.sessionid)
  return sessionid_;
}
inline void AvatarInfo::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:AvatarInfo.sessionid)
}

// required bytes avatarID = 2;
inline bool AvatarInfo::has_avatarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AvatarInfo::set_has_avatarid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AvatarInfo::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AvatarInfo::clear_avatarid() {
  avatarid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatarid();
}
inline const ::std::string& AvatarInfo::avatarid() const {
  // @@protoc_insertion_point(field_get:AvatarInfo.avatarID)
  return avatarid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvatarInfo::set_avatarid(const ::std::string& value) {
  set_has_avatarid();
  avatarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AvatarInfo.avatarID)
}
inline void AvatarInfo::set_avatarid(const char* value) {
  set_has_avatarid();
  avatarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AvatarInfo.avatarID)
}
inline void AvatarInfo::set_avatarid(const void* value, size_t size) {
  set_has_avatarid();
  avatarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AvatarInfo.avatarID)
}
inline ::std::string* AvatarInfo::mutable_avatarid() {
  set_has_avatarid();
  // @@protoc_insertion_point(field_mutable:AvatarInfo.avatarID)
  return avatarid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AvatarInfo::release_avatarid() {
  // @@protoc_insertion_point(field_release:AvatarInfo.avatarID)
  clear_has_avatarid();
  return avatarid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AvatarInfo::set_allocated_avatarid(::std::string* avatarid) {
  if (avatarid != NULL) {
    set_has_avatarid();
  } else {
    clear_has_avatarid();
  }
  avatarid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatarid);
  // @@protoc_insertion_point(field_set_allocated:AvatarInfo.avatarID)
}

// required int32 level = 3;
inline bool AvatarInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AvatarInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AvatarInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AvatarInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 AvatarInfo::level() const {
  // @@protoc_insertion_point(field_get:AvatarInfo.level)
  return level_;
}
inline void AvatarInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:AvatarInfo.level)
}

// required int32 state = 4;
inline bool AvatarInfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AvatarInfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AvatarInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AvatarInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 AvatarInfo::state() const {
  // @@protoc_insertion_point(field_get:AvatarInfo.state)
  return state_;
}
inline void AvatarInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:AvatarInfo.state)
}

inline const AvatarInfo* AvatarInfo::internal_default_instance() {
  return &AvatarInfo_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SERVER_MESSAGE_OPCODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SERVER_MESSAGE_OPCODE>() {
  return ::SERVER_MESSAGE_OPCODE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_servermessage_2eproto__INCLUDED
