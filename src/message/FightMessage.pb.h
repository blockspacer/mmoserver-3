// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightMessage.proto

#ifndef PROTOBUF_FightMessage_2eproto__INCLUDED
#define PROTOBUF_FightMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_FightMessage_2eproto();
void protobuf_InitDefaults_FightMessage_2eproto();
void protobuf_AssignDesc_FightMessage_2eproto();
void protobuf_ShutdownFile_FightMessage_2eproto();

class CS_CAST_SKILL;
class SC_CAST_SKILL;

// ===================================================================

class CS_CAST_SKILL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_CAST_SKILL) */ {
 public:
  CS_CAST_SKILL();
  virtual ~CS_CAST_SKILL();

  CS_CAST_SKILL(const CS_CAST_SKILL& from);

  inline CS_CAST_SKILL& operator=(const CS_CAST_SKILL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_CAST_SKILL& default_instance();

  static const CS_CAST_SKILL* internal_default_instance();

  void Swap(CS_CAST_SKILL* other);

  // implements Message ----------------------------------------------

  inline CS_CAST_SKILL* New() const { return New(NULL); }

  CS_CAST_SKILL* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_CAST_SKILL& from);
  void MergeFrom(const CS_CAST_SKILL& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CS_CAST_SKILL* other);
  void UnsafeMergeFrom(const CS_CAST_SKILL& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes entityid = 1;
  bool has_entityid() const;
  void clear_entityid();
  static const int kEntityidFieldNumber = 1;
  const ::std::string& entityid() const;
  void set_entityid(const ::std::string& value);
  void set_entityid(const char* value);
  void set_entityid(const void* value, size_t size);
  ::std::string* mutable_entityid();
  ::std::string* release_entityid();
  void set_allocated_entityid(::std::string* entityid);

  // required int32 slot_id = 2;
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 2;
  ::google::protobuf::int32 slot_id() const;
  void set_slot_id(::google::protobuf::int32 value);

  // optional bytes target_entity_id = 3;
  bool has_target_entity_id() const;
  void clear_target_entity_id();
  static const int kTargetEntityIdFieldNumber = 3;
  const ::std::string& target_entity_id() const;
  void set_target_entity_id(const ::std::string& value);
  void set_target_entity_id(const char* value);
  void set_target_entity_id(const void* value, size_t size);
  ::std::string* mutable_target_entity_id();
  ::std::string* release_target_entity_id();
  void set_allocated_target_entity_id(::std::string* target_entity_id);

  // @@protoc_insertion_point(class_scope:CS_CAST_SKILL)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_target_entity_id();
  inline void clear_has_target_entity_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr entityid_;
  ::google::protobuf::internal::ArenaStringPtr target_entity_id_;
  ::google::protobuf::int32 slot_id_;
  friend void  protobuf_InitDefaults_FightMessage_2eproto_impl();
  friend void  protobuf_AddDesc_FightMessage_2eproto_impl();
  friend void protobuf_AssignDesc_FightMessage_2eproto();
  friend void protobuf_ShutdownFile_FightMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CS_CAST_SKILL> CS_CAST_SKILL_default_instance_;

// -------------------------------------------------------------------

class SC_CAST_SKILL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_CAST_SKILL) */ {
 public:
  SC_CAST_SKILL();
  virtual ~SC_CAST_SKILL();

  SC_CAST_SKILL(const SC_CAST_SKILL& from);

  inline SC_CAST_SKILL& operator=(const SC_CAST_SKILL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_CAST_SKILL& default_instance();

  static const SC_CAST_SKILL* internal_default_instance();

  void Swap(SC_CAST_SKILL* other);

  // implements Message ----------------------------------------------

  inline SC_CAST_SKILL* New() const { return New(NULL); }

  SC_CAST_SKILL* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_CAST_SKILL& from);
  void MergeFrom(const SC_CAST_SKILL& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SC_CAST_SKILL* other);
  void UnsafeMergeFrom(const SC_CAST_SKILL& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes entityid = 1;
  bool has_entityid() const;
  void clear_entityid();
  static const int kEntityidFieldNumber = 1;
  const ::std::string& entityid() const;
  void set_entityid(const ::std::string& value);
  void set_entityid(const char* value);
  void set_entityid(const void* value, size_t size);
  ::std::string* mutable_entityid();
  ::std::string* release_entityid();
  void set_allocated_entityid(::std::string* entityid);

  // required string animation_name = 2;
  bool has_animation_name() const;
  void clear_animation_name();
  static const int kAnimationNameFieldNumber = 2;
  const ::std::string& animation_name() const;
  void set_animation_name(const ::std::string& value);
  void set_animation_name(const char* value);
  void set_animation_name(const char* value, size_t size);
  ::std::string* mutable_animation_name();
  ::std::string* release_animation_name();
  void set_allocated_animation_name(::std::string* animation_name);

  // @@protoc_insertion_point(class_scope:SC_CAST_SKILL)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_animation_name();
  inline void clear_has_animation_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr entityid_;
  ::google::protobuf::internal::ArenaStringPtr animation_name_;
  friend void  protobuf_InitDefaults_FightMessage_2eproto_impl();
  friend void  protobuf_AddDesc_FightMessage_2eproto_impl();
  friend void protobuf_AssignDesc_FightMessage_2eproto();
  friend void protobuf_ShutdownFile_FightMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SC_CAST_SKILL> SC_CAST_SKILL_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_CAST_SKILL

// required bytes entityid = 1;
inline bool CS_CAST_SKILL::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_CAST_SKILL::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_CAST_SKILL::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_CAST_SKILL::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
inline const ::std::string& CS_CAST_SKILL::entityid() const {
  // @@protoc_insertion_point(field_get:CS_CAST_SKILL.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CS_CAST_SKILL::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_CAST_SKILL.entityid)
}
inline void CS_CAST_SKILL::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_CAST_SKILL.entityid)
}
inline void CS_CAST_SKILL::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_CAST_SKILL.entityid)
}
inline ::std::string* CS_CAST_SKILL::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:CS_CAST_SKILL.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CS_CAST_SKILL::release_entityid() {
  // @@protoc_insertion_point(field_release:CS_CAST_SKILL.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CS_CAST_SKILL::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:CS_CAST_SKILL.entityid)
}

// required int32 slot_id = 2;
inline bool CS_CAST_SKILL::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_CAST_SKILL::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_CAST_SKILL::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_CAST_SKILL::clear_slot_id() {
  slot_id_ = 0;
  clear_has_slot_id();
}
inline ::google::protobuf::int32 CS_CAST_SKILL::slot_id() const {
  // @@protoc_insertion_point(field_get:CS_CAST_SKILL.slot_id)
  return slot_id_;
}
inline void CS_CAST_SKILL::set_slot_id(::google::protobuf::int32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CS_CAST_SKILL.slot_id)
}

// optional bytes target_entity_id = 3;
inline bool CS_CAST_SKILL::has_target_entity_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CS_CAST_SKILL::set_has_target_entity_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CS_CAST_SKILL::clear_has_target_entity_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CS_CAST_SKILL::clear_target_entity_id() {
  target_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_entity_id();
}
inline const ::std::string& CS_CAST_SKILL::target_entity_id() const {
  // @@protoc_insertion_point(field_get:CS_CAST_SKILL.target_entity_id)
  return target_entity_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CS_CAST_SKILL::set_target_entity_id(const ::std::string& value) {
  set_has_target_entity_id();
  target_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CS_CAST_SKILL.target_entity_id)
}
inline void CS_CAST_SKILL::set_target_entity_id(const char* value) {
  set_has_target_entity_id();
  target_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CS_CAST_SKILL.target_entity_id)
}
inline void CS_CAST_SKILL::set_target_entity_id(const void* value, size_t size) {
  set_has_target_entity_id();
  target_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CS_CAST_SKILL.target_entity_id)
}
inline ::std::string* CS_CAST_SKILL::mutable_target_entity_id() {
  set_has_target_entity_id();
  // @@protoc_insertion_point(field_mutable:CS_CAST_SKILL.target_entity_id)
  return target_entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CS_CAST_SKILL::release_target_entity_id() {
  // @@protoc_insertion_point(field_release:CS_CAST_SKILL.target_entity_id)
  clear_has_target_entity_id();
  return target_entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CS_CAST_SKILL::set_allocated_target_entity_id(::std::string* target_entity_id) {
  if (target_entity_id != NULL) {
    set_has_target_entity_id();
  } else {
    clear_has_target_entity_id();
  }
  target_entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_entity_id);
  // @@protoc_insertion_point(field_set_allocated:CS_CAST_SKILL.target_entity_id)
}

inline const CS_CAST_SKILL* CS_CAST_SKILL::internal_default_instance() {
  return &CS_CAST_SKILL_default_instance_.get();
}
// -------------------------------------------------------------------

// SC_CAST_SKILL

// required bytes entityid = 1;
inline bool SC_CAST_SKILL::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_CAST_SKILL::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_CAST_SKILL::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_CAST_SKILL::clear_entityid() {
  entityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entityid();
}
inline const ::std::string& SC_CAST_SKILL::entityid() const {
  // @@protoc_insertion_point(field_get:SC_CAST_SKILL.entityid)
  return entityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_CAST_SKILL::set_entityid(const ::std::string& value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_CAST_SKILL.entityid)
}
inline void SC_CAST_SKILL::set_entityid(const char* value) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_CAST_SKILL.entityid)
}
inline void SC_CAST_SKILL::set_entityid(const void* value, size_t size) {
  set_has_entityid();
  entityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_CAST_SKILL.entityid)
}
inline ::std::string* SC_CAST_SKILL::mutable_entityid() {
  set_has_entityid();
  // @@protoc_insertion_point(field_mutable:SC_CAST_SKILL.entityid)
  return entityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_CAST_SKILL::release_entityid() {
  // @@protoc_insertion_point(field_release:SC_CAST_SKILL.entityid)
  clear_has_entityid();
  return entityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_CAST_SKILL::set_allocated_entityid(::std::string* entityid) {
  if (entityid != NULL) {
    set_has_entityid();
  } else {
    clear_has_entityid();
  }
  entityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityid);
  // @@protoc_insertion_point(field_set_allocated:SC_CAST_SKILL.entityid)
}

// required string animation_name = 2;
inline bool SC_CAST_SKILL::has_animation_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_CAST_SKILL::set_has_animation_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_CAST_SKILL::clear_has_animation_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_CAST_SKILL::clear_animation_name() {
  animation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_animation_name();
}
inline const ::std::string& SC_CAST_SKILL::animation_name() const {
  // @@protoc_insertion_point(field_get:SC_CAST_SKILL.animation_name)
  return animation_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_CAST_SKILL::set_animation_name(const ::std::string& value) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC_CAST_SKILL.animation_name)
}
inline void SC_CAST_SKILL::set_animation_name(const char* value) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC_CAST_SKILL.animation_name)
}
inline void SC_CAST_SKILL::set_animation_name(const char* value, size_t size) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC_CAST_SKILL.animation_name)
}
inline ::std::string* SC_CAST_SKILL::mutable_animation_name() {
  set_has_animation_name();
  // @@protoc_insertion_point(field_mutable:SC_CAST_SKILL.animation_name)
  return animation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_CAST_SKILL::release_animation_name() {
  // @@protoc_insertion_point(field_release:SC_CAST_SKILL.animation_name)
  clear_has_animation_name();
  return animation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_CAST_SKILL::set_allocated_animation_name(::std::string* animation_name) {
  if (animation_name != NULL) {
    set_has_animation_name();
  } else {
    clear_has_animation_name();
  }
  animation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), animation_name);
  // @@protoc_insertion_point(field_set_allocated:SC_CAST_SKILL.animation_name)
}

inline const SC_CAST_SKILL* SC_CAST_SKILL::internal_default_instance() {
  return &SC_CAST_SKILL_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FightMessage_2eproto__INCLUDED
