// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servermessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "servermessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GS_REGISTER_SERVER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS_REGISTER_SERVER_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG_REGISTER_SERVICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG_REGISTER_SERVICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS_CLIENT_DISCONNECT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS_CLIENT_DISCONNECT_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG_KICK_CLIENT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG_KICK_CLIENT_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* LUA_SCRIPT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LUA_SCRIPT_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestPingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestPingReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarChangeGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarChangeGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SERVER_MESSAGE_OPCODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_servermessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_servermessage_2eproto() {
  protobuf_AddDesc_servermessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "servermessage.proto");
  GOOGLE_CHECK(file != NULL);
  GS_REGISTER_SERVER_descriptor_ = file->message_type(0);
  static const int GS_REGISTER_SERVER_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_REGISTER_SERVER, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_REGISTER_SERVER, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_REGISTER_SERVER, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_REGISTER_SERVER, port_),
  };
  GS_REGISTER_SERVER_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GS_REGISTER_SERVER_descriptor_,
      GS_REGISTER_SERVER::internal_default_instance(),
      GS_REGISTER_SERVER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_REGISTER_SERVER, _has_bits_),
      -1,
      -1,
      sizeof(GS_REGISTER_SERVER),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_REGISTER_SERVER, _internal_metadata_));
  SG_REGISTER_SERVICE_descriptor_ = file->message_type(1);
  static const int SG_REGISTER_SERVICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_REGISTER_SERVICE, servicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_REGISTER_SERVICE, serverid_),
  };
  SG_REGISTER_SERVICE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SG_REGISTER_SERVICE_descriptor_,
      SG_REGISTER_SERVICE::internal_default_instance(),
      SG_REGISTER_SERVICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_REGISTER_SERVICE, _has_bits_),
      -1,
      -1,
      sizeof(SG_REGISTER_SERVICE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_REGISTER_SERVICE, _internal_metadata_));
  GS_CLIENT_DISCONNECT_descriptor_ = file->message_type(2);
  static const int GS_CLIENT_DISCONNECT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_CLIENT_DISCONNECT, sessionid_),
  };
  GS_CLIENT_DISCONNECT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GS_CLIENT_DISCONNECT_descriptor_,
      GS_CLIENT_DISCONNECT::internal_default_instance(),
      GS_CLIENT_DISCONNECT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_CLIENT_DISCONNECT, _has_bits_),
      -1,
      -1,
      sizeof(GS_CLIENT_DISCONNECT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS_CLIENT_DISCONNECT, _internal_metadata_));
  SG_KICK_CLIENT_descriptor_ = file->message_type(3);
  static const int SG_KICK_CLIENT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_KICK_CLIENT, sessionid_),
  };
  SG_KICK_CLIENT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SG_KICK_CLIENT_descriptor_,
      SG_KICK_CLIENT::internal_default_instance(),
      SG_KICK_CLIENT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_KICK_CLIENT, _has_bits_),
      -1,
      -1,
      sizeof(SG_KICK_CLIENT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG_KICK_CLIENT, _internal_metadata_));
  ServerInfo_descriptor_ = file->message_type(4);
  static const int ServerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, banclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, line_scene_type_),
  };
  ServerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::internal_default_instance(),
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_),
      -1,
      -1,
      sizeof(ServerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _internal_metadata_));
  GameServerInfos_descriptor_ = file->message_type(5);
  static const int GameServerInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerInfos, gameservers_),
  };
  GameServerInfos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameServerInfos_descriptor_,
      GameServerInfos::internal_default_instance(),
      GameServerInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerInfos, _has_bits_),
      -1,
      -1,
      sizeof(GameServerInfos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerInfos, _internal_metadata_));
  LUA_SCRIPT_descriptor_ = file->message_type(6);
  static const int LUA_SCRIPT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUA_SCRIPT, script_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUA_SCRIPT, clientsock_),
  };
  LUA_SCRIPT_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LUA_SCRIPT_descriptor_,
      LUA_SCRIPT::internal_default_instance(),
      LUA_SCRIPT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUA_SCRIPT, _has_bits_),
      -1,
      -1,
      sizeof(LUA_SCRIPT),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUA_SCRIPT, _internal_metadata_));
  TestPing_descriptor_ = file->message_type(7);
  static const int TestPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPing, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPing, serverid_),
  };
  TestPing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestPing_descriptor_,
      TestPing::internal_default_instance(),
      TestPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPing, _has_bits_),
      -1,
      -1,
      sizeof(TestPing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPing, _internal_metadata_));
  TestPingReply_descriptor_ = file->message_type(8);
  static const int TestPingReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPingReply, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPingReply, serverid_),
  };
  TestPingReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestPingReply_descriptor_,
      TestPingReply::internal_default_instance(),
      TestPingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPingReply, _has_bits_),
      -1,
      -1,
      sizeof(TestPingReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPingReply, _internal_metadata_));
  AvatarChangeGame_descriptor_ = file->message_type(9);
  static const int AvatarChangeGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeGame, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeGame, gameid_),
  };
  AvatarChangeGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AvatarChangeGame_descriptor_,
      AvatarChangeGame::internal_default_instance(),
      AvatarChangeGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeGame, _has_bits_),
      -1,
      -1,
      sizeof(AvatarChangeGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeGame, _internal_metadata_));
  AvatarInfo_descriptor_ = file->message_type(10);
  static const int AvatarInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, avatarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, state_),
  };
  AvatarInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AvatarInfo_descriptor_,
      AvatarInfo::internal_default_instance(),
      AvatarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, _has_bits_),
      -1,
      -1,
      sizeof(AvatarInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarInfo, _internal_metadata_));
  SERVER_MESSAGE_OPCODE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_servermessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GS_REGISTER_SERVER_descriptor_, GS_REGISTER_SERVER::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SG_REGISTER_SERVICE_descriptor_, SG_REGISTER_SERVICE::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GS_CLIENT_DISCONNECT_descriptor_, GS_CLIENT_DISCONNECT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SG_KICK_CLIENT_descriptor_, SG_KICK_CLIENT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerInfo_descriptor_, ServerInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameServerInfos_descriptor_, GameServerInfos::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LUA_SCRIPT_descriptor_, LUA_SCRIPT::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestPing_descriptor_, TestPing::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestPingReply_descriptor_, TestPingReply::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AvatarChangeGame_descriptor_, AvatarChangeGame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AvatarInfo_descriptor_, AvatarInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_servermessage_2eproto() {
  GS_REGISTER_SERVER_default_instance_.Shutdown();
  delete GS_REGISTER_SERVER_reflection_;
  SG_REGISTER_SERVICE_default_instance_.Shutdown();
  delete SG_REGISTER_SERVICE_reflection_;
  GS_CLIENT_DISCONNECT_default_instance_.Shutdown();
  delete GS_CLIENT_DISCONNECT_reflection_;
  SG_KICK_CLIENT_default_instance_.Shutdown();
  delete SG_KICK_CLIENT_reflection_;
  ServerInfo_default_instance_.Shutdown();
  delete ServerInfo_reflection_;
  GameServerInfos_default_instance_.Shutdown();
  delete GameServerInfos_reflection_;
  LUA_SCRIPT_default_instance_.Shutdown();
  delete LUA_SCRIPT_reflection_;
  TestPing_default_instance_.Shutdown();
  delete TestPing_reflection_;
  TestPingReply_default_instance_.Shutdown();
  delete TestPingReply_reflection_;
  AvatarChangeGame_default_instance_.Shutdown();
  delete AvatarChangeGame_reflection_;
  AvatarInfo_default_instance_.Shutdown();
  delete AvatarInfo_reflection_;
}

void protobuf_InitDefaults_servermessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  GS_REGISTER_SERVER_default_instance_.DefaultConstruct();
  SG_REGISTER_SERVICE_default_instance_.DefaultConstruct();
  GS_CLIENT_DISCONNECT_default_instance_.DefaultConstruct();
  SG_KICK_CLIENT_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServerInfo_default_instance_.DefaultConstruct();
  GameServerInfos_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LUA_SCRIPT_default_instance_.DefaultConstruct();
  TestPing_default_instance_.DefaultConstruct();
  TestPingReply_default_instance_.DefaultConstruct();
  AvatarChangeGame_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AvatarInfo_default_instance_.DefaultConstruct();
  GS_REGISTER_SERVER_default_instance_.get_mutable()->InitAsDefaultInstance();
  SG_REGISTER_SERVICE_default_instance_.get_mutable()->InitAsDefaultInstance();
  GS_CLIENT_DISCONNECT_default_instance_.get_mutable()->InitAsDefaultInstance();
  SG_KICK_CLIENT_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameServerInfos_default_instance_.get_mutable()->InitAsDefaultInstance();
  LUA_SCRIPT_default_instance_.get_mutable()->InitAsDefaultInstance();
  TestPing_default_instance_.get_mutable()->InitAsDefaultInstance();
  TestPingReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  AvatarChangeGame_default_instance_.get_mutable()->InitAsDefaultInstance();
  AvatarInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_servermessage_2eproto_once_);
void protobuf_InitDefaults_servermessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_servermessage_2eproto_once_,
                 &protobuf_InitDefaults_servermessage_2eproto_impl);
}
void protobuf_AddDesc_servermessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_servermessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023servermessage.proto\"T\n\022GS_REGISTER_SER"
    "VER\022\020\n\010serverid\030\001 \002(\005\022\022\n\nservertype\030\002 \002("
    "\005\022\n\n\002ip\030\003 \002(\014\022\014\n\004port\030\004 \002(\005\"<\n\023SG_REGIST"
    "ER_SERVICE\022\023\n\013servicetype\030\001 \002(\005\022\020\n\010serve"
    "rid\030\002 \002(\005\")\n\024GS_CLIENT_DISCONNECT\022\021\n\tses"
    "sionid\030\001 \002(\004\"#\n\016SG_KICK_CLIENT\022\021\n\tsessio"
    "nid\030\001 \002(\004\"p\n\nServerInfo\022\n\n\002ip\030\001 \002(\014\022\014\n\004p"
    "ort\030\002 \002(\005\022\013\n\003sid\030\003 \001(\005\022\021\n\tbanclient\030\004 \001("
    "\010\022\017\n\007svrtype\030\005 \001(\005\022\027\n\017line_scene_type\030\006 "
    "\001(\005\"3\n\017GameServerInfos\022 \n\013gameservers\030\001 "
    "\003(\0132\013.ServerInfo\"8\n\nLUA_SCRIPT\022\026\n\016script"
    "_content\030\001 \002(\014\022\022\n\nclientsock\030\002 \002(\005\"*\n\010Te"
    "stPing\022\014\n\004time\030\001 \002(\004\022\020\n\010serverid\030\002 \002(\005\"/"
    "\n\rTestPingReply\022\014\n\004time\030\001 \002(\004\022\020\n\010serveri"
    "d\030\002 \002(\005\"5\n\020AvatarChangeGame\022\021\n\tsessionid"
    "\030\001 \002(\004\022\016\n\006gameid\030\002 \002(\005\"O\n\nAvatarInfo\022\021\n\t"
    "sessionid\030\001 \002(\004\022\020\n\010avatarID\030\002 \002(\014\022\r\n\005lev"
    "el\030\003 \002(\005\022\r\n\005state\030\004 \002(\005*\?\n\025SERVER_MESSAG"
    "E_OPCODE\022&\n!SERVER_OPCODE_AVATAR_CHANGER"
    "_GAME\020\310\001", 768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "servermessage.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_servermessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_servermessage_2eproto_once_);
void protobuf_AddDesc_servermessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_servermessage_2eproto_once_,
                 &protobuf_AddDesc_servermessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_servermessage_2eproto {
  StaticDescriptorInitializer_servermessage_2eproto() {
    protobuf_AddDesc_servermessage_2eproto();
  }
} static_descriptor_initializer_servermessage_2eproto_;
const ::google::protobuf::EnumDescriptor* SERVER_MESSAGE_OPCODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SERVER_MESSAGE_OPCODE_descriptor_;
}
bool SERVER_MESSAGE_OPCODE_IsValid(int value) {
  switch (value) {
    case 200:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS_REGISTER_SERVER::kServeridFieldNumber;
const int GS_REGISTER_SERVER::kServertypeFieldNumber;
const int GS_REGISTER_SERVER::kIpFieldNumber;
const int GS_REGISTER_SERVER::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS_REGISTER_SERVER::GS_REGISTER_SERVER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GS_REGISTER_SERVER)
}

void GS_REGISTER_SERVER::InitAsDefaultInstance() {
}

GS_REGISTER_SERVER::GS_REGISTER_SERVER(const GS_REGISTER_SERVER& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GS_REGISTER_SERVER)
}

void GS_REGISTER_SERVER::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&serverid_) + sizeof(port_));
}

GS_REGISTER_SERVER::~GS_REGISTER_SERVER() {
  // @@protoc_insertion_point(destructor:GS_REGISTER_SERVER)
  SharedDtor();
}

void GS_REGISTER_SERVER::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GS_REGISTER_SERVER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS_REGISTER_SERVER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS_REGISTER_SERVER_descriptor_;
}

const GS_REGISTER_SERVER& GS_REGISTER_SERVER::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GS_REGISTER_SERVER> GS_REGISTER_SERVER_default_instance_;

GS_REGISTER_SERVER* GS_REGISTER_SERVER::New(::google::protobuf::Arena* arena) const {
  GS_REGISTER_SERVER* n = new GS_REGISTER_SERVER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS_REGISTER_SERVER::Clear() {
// @@protoc_insertion_point(message_clear_start:GS_REGISTER_SERVER)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GS_REGISTER_SERVER, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GS_REGISTER_SERVER*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(serverid_, port_);
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GS_REGISTER_SERVER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GS_REGISTER_SERVER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (tag == 8) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_servertype;
        break;
      }

      // required int32 servertype = 2;
      case 2: {
        if (tag == 16) {
         parse_servertype:
          set_has_servertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required bytes ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GS_REGISTER_SERVER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GS_REGISTER_SERVER)
  return false;
#undef DO_
}

void GS_REGISTER_SERVER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GS_REGISTER_SERVER)
  // required int32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 servertype = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->servertype(), output);
  }

  // required bytes ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ip(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GS_REGISTER_SERVER)
}

::google::protobuf::uint8* GS_REGISTER_SERVER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GS_REGISTER_SERVER)
  // required int32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 servertype = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->servertype(), target);
  }

  // required bytes ip = 3;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  // required int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GS_REGISTER_SERVER)
  return target;
}

size_t GS_REGISTER_SERVER::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GS_REGISTER_SERVER)
  size_t total_size = 0;

  if (has_serverid()) {
    // required int32 serverid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  if (has_servertype()) {
    // required int32 servertype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servertype());
  }

  if (has_ip()) {
    // required bytes ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  if (has_port()) {
    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t GS_REGISTER_SERVER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GS_REGISTER_SERVER)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 serverid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());

    // required int32 servertype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servertype());

    // required bytes ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());

    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS_REGISTER_SERVER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GS_REGISTER_SERVER)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GS_REGISTER_SERVER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS_REGISTER_SERVER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GS_REGISTER_SERVER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GS_REGISTER_SERVER)
    UnsafeMergeFrom(*source);
  }
}

void GS_REGISTER_SERVER::MergeFrom(const GS_REGISTER_SERVER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GS_REGISTER_SERVER)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GS_REGISTER_SERVER::UnsafeMergeFrom(const GS_REGISTER_SERVER& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GS_REGISTER_SERVER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GS_REGISTER_SERVER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS_REGISTER_SERVER::CopyFrom(const GS_REGISTER_SERVER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GS_REGISTER_SERVER)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GS_REGISTER_SERVER::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GS_REGISTER_SERVER::Swap(GS_REGISTER_SERVER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS_REGISTER_SERVER::InternalSwap(GS_REGISTER_SERVER* other) {
  std::swap(serverid_, other->serverid_);
  std::swap(servertype_, other->servertype_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS_REGISTER_SERVER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS_REGISTER_SERVER_descriptor_;
  metadata.reflection = GS_REGISTER_SERVER_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS_REGISTER_SERVER

// required int32 serverid = 1;
bool GS_REGISTER_SERVER::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GS_REGISTER_SERVER::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
void GS_REGISTER_SERVER::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GS_REGISTER_SERVER::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
::google::protobuf::int32 GS_REGISTER_SERVER::serverid() const {
  // @@protoc_insertion_point(field_get:GS_REGISTER_SERVER.serverid)
  return serverid_;
}
void GS_REGISTER_SERVER::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:GS_REGISTER_SERVER.serverid)
}

// required int32 servertype = 2;
bool GS_REGISTER_SERVER::has_servertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GS_REGISTER_SERVER::set_has_servertype() {
  _has_bits_[0] |= 0x00000002u;
}
void GS_REGISTER_SERVER::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000002u;
}
void GS_REGISTER_SERVER::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
::google::protobuf::int32 GS_REGISTER_SERVER::servertype() const {
  // @@protoc_insertion_point(field_get:GS_REGISTER_SERVER.servertype)
  return servertype_;
}
void GS_REGISTER_SERVER::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
  // @@protoc_insertion_point(field_set:GS_REGISTER_SERVER.servertype)
}

// required bytes ip = 3;
bool GS_REGISTER_SERVER::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GS_REGISTER_SERVER::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void GS_REGISTER_SERVER::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void GS_REGISTER_SERVER::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& GS_REGISTER_SERVER::ip() const {
  // @@protoc_insertion_point(field_get:GS_REGISTER_SERVER.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS_REGISTER_SERVER::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GS_REGISTER_SERVER.ip)
}
void GS_REGISTER_SERVER::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GS_REGISTER_SERVER.ip)
}
void GS_REGISTER_SERVER::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GS_REGISTER_SERVER.ip)
}
::std::string* GS_REGISTER_SERVER::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:GS_REGISTER_SERVER.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GS_REGISTER_SERVER::release_ip() {
  // @@protoc_insertion_point(field_release:GS_REGISTER_SERVER.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GS_REGISTER_SERVER::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:GS_REGISTER_SERVER.ip)
}

// required int32 port = 4;
bool GS_REGISTER_SERVER::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GS_REGISTER_SERVER::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void GS_REGISTER_SERVER::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void GS_REGISTER_SERVER::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 GS_REGISTER_SERVER::port() const {
  // @@protoc_insertion_point(field_get:GS_REGISTER_SERVER.port)
  return port_;
}
void GS_REGISTER_SERVER::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:GS_REGISTER_SERVER.port)
}

inline const GS_REGISTER_SERVER* GS_REGISTER_SERVER::internal_default_instance() {
  return &GS_REGISTER_SERVER_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SG_REGISTER_SERVICE::kServicetypeFieldNumber;
const int SG_REGISTER_SERVICE::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SG_REGISTER_SERVICE::SG_REGISTER_SERVICE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SG_REGISTER_SERVICE)
}

void SG_REGISTER_SERVICE::InitAsDefaultInstance() {
}

SG_REGISTER_SERVICE::SG_REGISTER_SERVICE(const SG_REGISTER_SERVICE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SG_REGISTER_SERVICE)
}

void SG_REGISTER_SERVICE::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&servicetype_, 0, reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&servicetype_) + sizeof(serverid_));
}

SG_REGISTER_SERVICE::~SG_REGISTER_SERVICE() {
  // @@protoc_insertion_point(destructor:SG_REGISTER_SERVICE)
  SharedDtor();
}

void SG_REGISTER_SERVICE::SharedDtor() {
}

void SG_REGISTER_SERVICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG_REGISTER_SERVICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG_REGISTER_SERVICE_descriptor_;
}

const SG_REGISTER_SERVICE& SG_REGISTER_SERVICE::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SG_REGISTER_SERVICE> SG_REGISTER_SERVICE_default_instance_;

SG_REGISTER_SERVICE* SG_REGISTER_SERVICE::New(::google::protobuf::Arena* arena) const {
  SG_REGISTER_SERVICE* n = new SG_REGISTER_SERVICE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SG_REGISTER_SERVICE::Clear() {
// @@protoc_insertion_point(message_clear_start:SG_REGISTER_SERVICE)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SG_REGISTER_SERVICE, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SG_REGISTER_SERVICE*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(servicetype_, serverid_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SG_REGISTER_SERVICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SG_REGISTER_SERVICE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 servicetype = 1;
      case 1: {
        if (tag == 8) {
          set_has_servicetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicetype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SG_REGISTER_SERVICE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SG_REGISTER_SERVICE)
  return false;
#undef DO_
}

void SG_REGISTER_SERVICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SG_REGISTER_SERVICE)
  // required int32 servicetype = 1;
  if (has_servicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servicetype(), output);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SG_REGISTER_SERVICE)
}

::google::protobuf::uint8* SG_REGISTER_SERVICE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SG_REGISTER_SERVICE)
  // required int32 servicetype = 1;
  if (has_servicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servicetype(), target);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SG_REGISTER_SERVICE)
  return target;
}

size_t SG_REGISTER_SERVICE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SG_REGISTER_SERVICE)
  size_t total_size = 0;

  if (has_servicetype()) {
    // required int32 servicetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servicetype());
  }

  if (has_serverid()) {
    // required int32 serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  return total_size;
}
size_t SG_REGISTER_SERVICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SG_REGISTER_SERVICE)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 servicetype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servicetype());

    // required int32 serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG_REGISTER_SERVICE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SG_REGISTER_SERVICE)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SG_REGISTER_SERVICE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SG_REGISTER_SERVICE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SG_REGISTER_SERVICE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SG_REGISTER_SERVICE)
    UnsafeMergeFrom(*source);
  }
}

void SG_REGISTER_SERVICE::MergeFrom(const SG_REGISTER_SERVICE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SG_REGISTER_SERVICE)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SG_REGISTER_SERVICE::UnsafeMergeFrom(const SG_REGISTER_SERVICE& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servicetype()) {
      set_servicetype(from.servicetype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SG_REGISTER_SERVICE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SG_REGISTER_SERVICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG_REGISTER_SERVICE::CopyFrom(const SG_REGISTER_SERVICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SG_REGISTER_SERVICE)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SG_REGISTER_SERVICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG_REGISTER_SERVICE::Swap(SG_REGISTER_SERVICE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SG_REGISTER_SERVICE::InternalSwap(SG_REGISTER_SERVICE* other) {
  std::swap(servicetype_, other->servicetype_);
  std::swap(serverid_, other->serverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SG_REGISTER_SERVICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG_REGISTER_SERVICE_descriptor_;
  metadata.reflection = SG_REGISTER_SERVICE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SG_REGISTER_SERVICE

// required int32 servicetype = 1;
bool SG_REGISTER_SERVICE::has_servicetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SG_REGISTER_SERVICE::set_has_servicetype() {
  _has_bits_[0] |= 0x00000001u;
}
void SG_REGISTER_SERVICE::clear_has_servicetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void SG_REGISTER_SERVICE::clear_servicetype() {
  servicetype_ = 0;
  clear_has_servicetype();
}
::google::protobuf::int32 SG_REGISTER_SERVICE::servicetype() const {
  // @@protoc_insertion_point(field_get:SG_REGISTER_SERVICE.servicetype)
  return servicetype_;
}
void SG_REGISTER_SERVICE::set_servicetype(::google::protobuf::int32 value) {
  set_has_servicetype();
  servicetype_ = value;
  // @@protoc_insertion_point(field_set:SG_REGISTER_SERVICE.servicetype)
}

// required int32 serverid = 2;
bool SG_REGISTER_SERVICE::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SG_REGISTER_SERVICE::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
void SG_REGISTER_SERVICE::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SG_REGISTER_SERVICE::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
::google::protobuf::int32 SG_REGISTER_SERVICE::serverid() const {
  // @@protoc_insertion_point(field_get:SG_REGISTER_SERVICE.serverid)
  return serverid_;
}
void SG_REGISTER_SERVICE::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:SG_REGISTER_SERVICE.serverid)
}

inline const SG_REGISTER_SERVICE* SG_REGISTER_SERVICE::internal_default_instance() {
  return &SG_REGISTER_SERVICE_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GS_CLIENT_DISCONNECT::kSessionidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GS_CLIENT_DISCONNECT::GS_CLIENT_DISCONNECT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GS_CLIENT_DISCONNECT)
}

void GS_CLIENT_DISCONNECT::InitAsDefaultInstance() {
}

GS_CLIENT_DISCONNECT::GS_CLIENT_DISCONNECT(const GS_CLIENT_DISCONNECT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GS_CLIENT_DISCONNECT)
}

void GS_CLIENT_DISCONNECT::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
}

GS_CLIENT_DISCONNECT::~GS_CLIENT_DISCONNECT() {
  // @@protoc_insertion_point(destructor:GS_CLIENT_DISCONNECT)
  SharedDtor();
}

void GS_CLIENT_DISCONNECT::SharedDtor() {
}

void GS_CLIENT_DISCONNECT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS_CLIENT_DISCONNECT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS_CLIENT_DISCONNECT_descriptor_;
}

const GS_CLIENT_DISCONNECT& GS_CLIENT_DISCONNECT::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GS_CLIENT_DISCONNECT> GS_CLIENT_DISCONNECT_default_instance_;

GS_CLIENT_DISCONNECT* GS_CLIENT_DISCONNECT::New(::google::protobuf::Arena* arena) const {
  GS_CLIENT_DISCONNECT* n = new GS_CLIENT_DISCONNECT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GS_CLIENT_DISCONNECT::Clear() {
// @@protoc_insertion_point(message_clear_start:GS_CLIENT_DISCONNECT)
  sessionid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GS_CLIENT_DISCONNECT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GS_CLIENT_DISCONNECT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sessionid = 1;
      case 1: {
        if (tag == 8) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GS_CLIENT_DISCONNECT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GS_CLIENT_DISCONNECT)
  return false;
#undef DO_
}

void GS_CLIENT_DISCONNECT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GS_CLIENT_DISCONNECT)
  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GS_CLIENT_DISCONNECT)
}

::google::protobuf::uint8* GS_CLIENT_DISCONNECT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GS_CLIENT_DISCONNECT)
  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GS_CLIENT_DISCONNECT)
  return target;
}

size_t GS_CLIENT_DISCONNECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GS_CLIENT_DISCONNECT)
  size_t total_size = 0;

  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS_CLIENT_DISCONNECT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GS_CLIENT_DISCONNECT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GS_CLIENT_DISCONNECT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GS_CLIENT_DISCONNECT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GS_CLIENT_DISCONNECT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GS_CLIENT_DISCONNECT)
    UnsafeMergeFrom(*source);
  }
}

void GS_CLIENT_DISCONNECT::MergeFrom(const GS_CLIENT_DISCONNECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GS_CLIENT_DISCONNECT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GS_CLIENT_DISCONNECT::UnsafeMergeFrom(const GS_CLIENT_DISCONNECT& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GS_CLIENT_DISCONNECT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GS_CLIENT_DISCONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS_CLIENT_DISCONNECT::CopyFrom(const GS_CLIENT_DISCONNECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GS_CLIENT_DISCONNECT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GS_CLIENT_DISCONNECT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS_CLIENT_DISCONNECT::Swap(GS_CLIENT_DISCONNECT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GS_CLIENT_DISCONNECT::InternalSwap(GS_CLIENT_DISCONNECT* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GS_CLIENT_DISCONNECT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS_CLIENT_DISCONNECT_descriptor_;
  metadata.reflection = GS_CLIENT_DISCONNECT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GS_CLIENT_DISCONNECT

// required uint64 sessionid = 1;
bool GS_CLIENT_DISCONNECT::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GS_CLIENT_DISCONNECT::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void GS_CLIENT_DISCONNECT::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GS_CLIENT_DISCONNECT::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 GS_CLIENT_DISCONNECT::sessionid() const {
  // @@protoc_insertion_point(field_get:GS_CLIENT_DISCONNECT.sessionid)
  return sessionid_;
}
void GS_CLIENT_DISCONNECT::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:GS_CLIENT_DISCONNECT.sessionid)
}

inline const GS_CLIENT_DISCONNECT* GS_CLIENT_DISCONNECT::internal_default_instance() {
  return &GS_CLIENT_DISCONNECT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SG_KICK_CLIENT::kSessionidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SG_KICK_CLIENT::SG_KICK_CLIENT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SG_KICK_CLIENT)
}

void SG_KICK_CLIENT::InitAsDefaultInstance() {
}

SG_KICK_CLIENT::SG_KICK_CLIENT(const SG_KICK_CLIENT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SG_KICK_CLIENT)
}

void SG_KICK_CLIENT::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
}

SG_KICK_CLIENT::~SG_KICK_CLIENT() {
  // @@protoc_insertion_point(destructor:SG_KICK_CLIENT)
  SharedDtor();
}

void SG_KICK_CLIENT::SharedDtor() {
}

void SG_KICK_CLIENT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG_KICK_CLIENT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG_KICK_CLIENT_descriptor_;
}

const SG_KICK_CLIENT& SG_KICK_CLIENT::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SG_KICK_CLIENT> SG_KICK_CLIENT_default_instance_;

SG_KICK_CLIENT* SG_KICK_CLIENT::New(::google::protobuf::Arena* arena) const {
  SG_KICK_CLIENT* n = new SG_KICK_CLIENT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SG_KICK_CLIENT::Clear() {
// @@protoc_insertion_point(message_clear_start:SG_KICK_CLIENT)
  sessionid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SG_KICK_CLIENT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SG_KICK_CLIENT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sessionid = 1;
      case 1: {
        if (tag == 8) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SG_KICK_CLIENT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SG_KICK_CLIENT)
  return false;
#undef DO_
}

void SG_KICK_CLIENT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SG_KICK_CLIENT)
  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SG_KICK_CLIENT)
}

::google::protobuf::uint8* SG_KICK_CLIENT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SG_KICK_CLIENT)
  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SG_KICK_CLIENT)
  return target;
}

size_t SG_KICK_CLIENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SG_KICK_CLIENT)
  size_t total_size = 0;

  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG_KICK_CLIENT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SG_KICK_CLIENT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SG_KICK_CLIENT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SG_KICK_CLIENT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SG_KICK_CLIENT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SG_KICK_CLIENT)
    UnsafeMergeFrom(*source);
  }
}

void SG_KICK_CLIENT::MergeFrom(const SG_KICK_CLIENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SG_KICK_CLIENT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SG_KICK_CLIENT::UnsafeMergeFrom(const SG_KICK_CLIENT& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SG_KICK_CLIENT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SG_KICK_CLIENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG_KICK_CLIENT::CopyFrom(const SG_KICK_CLIENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SG_KICK_CLIENT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SG_KICK_CLIENT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG_KICK_CLIENT::Swap(SG_KICK_CLIENT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SG_KICK_CLIENT::InternalSwap(SG_KICK_CLIENT* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SG_KICK_CLIENT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG_KICK_CLIENT_descriptor_;
  metadata.reflection = SG_KICK_CLIENT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SG_KICK_CLIENT

// required uint64 sessionid = 1;
bool SG_KICK_CLIENT::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SG_KICK_CLIENT::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void SG_KICK_CLIENT::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SG_KICK_CLIENT::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 SG_KICK_CLIENT::sessionid() const {
  // @@protoc_insertion_point(field_get:SG_KICK_CLIENT.sessionid)
  return sessionid_;
}
void SG_KICK_CLIENT::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:SG_KICK_CLIENT.sessionid)
}

inline const SG_KICK_CLIENT* SG_KICK_CLIENT::internal_default_instance() {
  return &SG_KICK_CLIENT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kIpFieldNumber;
const int ServerInfo::kPortFieldNumber;
const int ServerInfo::kSidFieldNumber;
const int ServerInfo::kBanclientFieldNumber;
const int ServerInfo::kSvrtypeFieldNumber;
const int ServerInfo::kLineSceneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerInfo)
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&line_scene_type_) -
    reinterpret_cast<char*>(&port_) + sizeof(line_scene_type_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerInfo> ServerInfo_default_instance_;

ServerInfo* ServerInfo::New(::google::protobuf::Arena* arena) const {
  ServerInfo* n = new ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(port_, line_scene_type_);
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sid;
        break;
      }

      // optional int32 sid = 3;
      case 3: {
        if (tag == 24) {
         parse_sid:
          set_has_sid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_banclient;
        break;
      }

      // optional bool banclient = 4;
      case 4: {
        if (tag == 32) {
         parse_banclient:
          set_has_banclient();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banclient_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_svrtype;
        break;
      }

      // optional int32 svrtype = 5;
      case 5: {
        if (tag == 40) {
         parse_svrtype:
          set_has_svrtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrtype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_line_scene_type;
        break;
      }

      // optional int32 line_scene_type = 6;
      case 6: {
        if (tag == 48) {
         parse_line_scene_type:
          set_has_line_scene_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_scene_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerInfo)
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // optional bool banclient = 4;
  if (has_banclient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->banclient(), output);
  }

  // optional int32 svrtype = 5;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->svrtype(), output);
  }

  // optional int32 line_scene_type = 6;
  if (has_line_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->line_scene_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerInfo)
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // optional bool banclient = 4;
  if (has_banclient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->banclient(), target);
  }

  // optional int32 svrtype = 5;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->svrtype(), target);
  }

  // optional int32 line_scene_type = 6;
  if (has_line_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->line_scene_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerInfo)
  return target;
}

size_t ServerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ServerInfo)
  size_t total_size = 0;

  if (has_ip()) {
    // required bytes ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional int32 sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional bool banclient = 4;
    if (has_banclient()) {
      total_size += 1 + 1;
    }

    // optional int32 svrtype = 5;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svrtype());
    }

    // optional int32 line_scene_type = 6;
    if (has_line_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_scene_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerInfo)
    UnsafeMergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerInfo::UnsafeMergeFrom(const ServerInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_banclient()) {
      set_banclient(from.banclient());
    }
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_line_scene_type()) {
      set_line_scene_type(from.line_scene_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(sid_, other->sid_);
  std::swap(banclient_, other->banclient_);
  std::swap(svrtype_, other->svrtype_);
  std::swap(line_scene_type_, other->line_scene_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerInfo

// required bytes ip = 1;
bool ServerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:ServerInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerInfo.ip)
}
void ServerInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerInfo.ip)
}
void ServerInfo::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerInfo.ip)
}
::std::string* ServerInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ServerInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:ServerInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.ip)
}

// required int32 port = 2;
bool ServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:ServerInfo.port)
  return port_;
}
void ServerInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.port)
}

// optional int32 sid = 3;
bool ServerInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerInfo::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
::google::protobuf::int32 ServerInfo::sid() const {
  // @@protoc_insertion_point(field_get:ServerInfo.sid)
  return sid_;
}
void ServerInfo::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.sid)
}

// optional bool banclient = 4;
bool ServerInfo::has_banclient() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerInfo::set_has_banclient() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerInfo::clear_has_banclient() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerInfo::clear_banclient() {
  banclient_ = false;
  clear_has_banclient();
}
bool ServerInfo::banclient() const {
  // @@protoc_insertion_point(field_get:ServerInfo.banclient)
  return banclient_;
}
void ServerInfo::set_banclient(bool value) {
  set_has_banclient();
  banclient_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.banclient)
}

// optional int32 svrtype = 5;
bool ServerInfo::has_svrtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerInfo::set_has_svrtype() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerInfo::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerInfo::clear_svrtype() {
  svrtype_ = 0;
  clear_has_svrtype();
}
::google::protobuf::int32 ServerInfo::svrtype() const {
  // @@protoc_insertion_point(field_get:ServerInfo.svrtype)
  return svrtype_;
}
void ServerInfo::set_svrtype(::google::protobuf::int32 value) {
  set_has_svrtype();
  svrtype_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.svrtype)
}

// optional int32 line_scene_type = 6;
bool ServerInfo::has_line_scene_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerInfo::set_has_line_scene_type() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerInfo::clear_has_line_scene_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerInfo::clear_line_scene_type() {
  line_scene_type_ = 0;
  clear_has_line_scene_type();
}
::google::protobuf::int32 ServerInfo::line_scene_type() const {
  // @@protoc_insertion_point(field_get:ServerInfo.line_scene_type)
  return line_scene_type_;
}
void ServerInfo::set_line_scene_type(::google::protobuf::int32 value) {
  set_has_line_scene_type();
  line_scene_type_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.line_scene_type)
}

inline const ServerInfo* ServerInfo::internal_default_instance() {
  return &ServerInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServerInfos::kGameserversFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServerInfos::GameServerInfos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameServerInfos)
}

void GameServerInfos::InitAsDefaultInstance() {
}

GameServerInfos::GameServerInfos(const GameServerInfos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameServerInfos)
}

void GameServerInfos::SharedCtor() {
  _cached_size_ = 0;
}

GameServerInfos::~GameServerInfos() {
  // @@protoc_insertion_point(destructor:GameServerInfos)
  SharedDtor();
}

void GameServerInfos::SharedDtor() {
}

void GameServerInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerInfos_descriptor_;
}

const GameServerInfos& GameServerInfos::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameServerInfos> GameServerInfos_default_instance_;

GameServerInfos* GameServerInfos::New(::google::protobuf::Arena* arena) const {
  GameServerInfos* n = new GameServerInfos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameServerInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerInfos)
  gameservers_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameServerInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameServerInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerInfo gameservers = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_gameservers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gameservers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_gameservers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameServerInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameServerInfos)
  return false;
#undef DO_
}

void GameServerInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameServerInfos)
  // repeated .ServerInfo gameservers = 1;
  for (unsigned int i = 0, n = this->gameservers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gameservers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameServerInfos)
}

::google::protobuf::uint8* GameServerInfos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameServerInfos)
  // repeated .ServerInfo gameservers = 1;
  for (unsigned int i = 0, n = this->gameservers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->gameservers(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerInfos)
  return target;
}

size_t GameServerInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerInfos)
  size_t total_size = 0;

  // repeated .ServerInfo gameservers = 1;
  {
    unsigned int count = this->gameservers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameservers(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameServerInfos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameServerInfos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServerInfos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameServerInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameServerInfos)
    UnsafeMergeFrom(*source);
  }
}

void GameServerInfos::MergeFrom(const GameServerInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameServerInfos)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameServerInfos::UnsafeMergeFrom(const GameServerInfos& from) {
  GOOGLE_DCHECK(&from != this);
  gameservers_.MergeFrom(from.gameservers_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameServerInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameServerInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerInfos::CopyFrom(const GameServerInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerInfos)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameServerInfos::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->gameservers())) return false;
  return true;
}

void GameServerInfos::Swap(GameServerInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameServerInfos::InternalSwap(GameServerInfos* other) {
  gameservers_.UnsafeArenaSwap(&other->gameservers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameServerInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerInfos_descriptor_;
  metadata.reflection = GameServerInfos_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameServerInfos

// repeated .ServerInfo gameservers = 1;
int GameServerInfos::gameservers_size() const {
  return gameservers_.size();
}
void GameServerInfos::clear_gameservers() {
  gameservers_.Clear();
}
const ::ServerInfo& GameServerInfos::gameservers(int index) const {
  // @@protoc_insertion_point(field_get:GameServerInfos.gameservers)
  return gameservers_.Get(index);
}
::ServerInfo* GameServerInfos::mutable_gameservers(int index) {
  // @@protoc_insertion_point(field_mutable:GameServerInfos.gameservers)
  return gameservers_.Mutable(index);
}
::ServerInfo* GameServerInfos::add_gameservers() {
  // @@protoc_insertion_point(field_add:GameServerInfos.gameservers)
  return gameservers_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerInfo >*
GameServerInfos::mutable_gameservers() {
  // @@protoc_insertion_point(field_mutable_list:GameServerInfos.gameservers)
  return &gameservers_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerInfo >&
GameServerInfos::gameservers() const {
  // @@protoc_insertion_point(field_list:GameServerInfos.gameservers)
  return gameservers_;
}

inline const GameServerInfos* GameServerInfos::internal_default_instance() {
  return &GameServerInfos_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LUA_SCRIPT::kScriptContentFieldNumber;
const int LUA_SCRIPT::kClientsockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LUA_SCRIPT::LUA_SCRIPT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:LUA_SCRIPT)
}

void LUA_SCRIPT::InitAsDefaultInstance() {
}

LUA_SCRIPT::LUA_SCRIPT(const LUA_SCRIPT& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LUA_SCRIPT)
}

void LUA_SCRIPT::SharedCtor() {
  _cached_size_ = 0;
  script_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientsock_ = 0;
}

LUA_SCRIPT::~LUA_SCRIPT() {
  // @@protoc_insertion_point(destructor:LUA_SCRIPT)
  SharedDtor();
}

void LUA_SCRIPT::SharedDtor() {
  script_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LUA_SCRIPT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LUA_SCRIPT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LUA_SCRIPT_descriptor_;
}

const LUA_SCRIPT& LUA_SCRIPT::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LUA_SCRIPT> LUA_SCRIPT_default_instance_;

LUA_SCRIPT* LUA_SCRIPT::New(::google::protobuf::Arena* arena) const {
  LUA_SCRIPT* n = new LUA_SCRIPT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LUA_SCRIPT::Clear() {
// @@protoc_insertion_point(message_clear_start:LUA_SCRIPT)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_script_content()) {
      script_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    clientsock_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LUA_SCRIPT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LUA_SCRIPT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes script_content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientsock;
        break;
      }

      // required int32 clientsock = 2;
      case 2: {
        if (tag == 16) {
         parse_clientsock:
          set_has_clientsock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientsock_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LUA_SCRIPT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LUA_SCRIPT)
  return false;
#undef DO_
}

void LUA_SCRIPT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LUA_SCRIPT)
  // required bytes script_content = 1;
  if (has_script_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->script_content(), output);
  }

  // required int32 clientsock = 2;
  if (has_clientsock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clientsock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LUA_SCRIPT)
}

::google::protobuf::uint8* LUA_SCRIPT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LUA_SCRIPT)
  // required bytes script_content = 1;
  if (has_script_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->script_content(), target);
  }

  // required int32 clientsock = 2;
  if (has_clientsock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clientsock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LUA_SCRIPT)
  return target;
}

size_t LUA_SCRIPT::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LUA_SCRIPT)
  size_t total_size = 0;

  if (has_script_content()) {
    // required bytes script_content = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->script_content());
  }

  if (has_clientsock()) {
    // required int32 clientsock = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientsock());
  }

  return total_size;
}
size_t LUA_SCRIPT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LUA_SCRIPT)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes script_content = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->script_content());

    // required int32 clientsock = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientsock());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LUA_SCRIPT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LUA_SCRIPT)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LUA_SCRIPT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LUA_SCRIPT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LUA_SCRIPT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LUA_SCRIPT)
    UnsafeMergeFrom(*source);
  }
}

void LUA_SCRIPT::MergeFrom(const LUA_SCRIPT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LUA_SCRIPT)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LUA_SCRIPT::UnsafeMergeFrom(const LUA_SCRIPT& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_content()) {
      set_has_script_content();
      script_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_content_);
    }
    if (from.has_clientsock()) {
      set_clientsock(from.clientsock());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LUA_SCRIPT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LUA_SCRIPT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LUA_SCRIPT::CopyFrom(const LUA_SCRIPT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LUA_SCRIPT)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LUA_SCRIPT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LUA_SCRIPT::Swap(LUA_SCRIPT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LUA_SCRIPT::InternalSwap(LUA_SCRIPT* other) {
  script_content_.Swap(&other->script_content_);
  std::swap(clientsock_, other->clientsock_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LUA_SCRIPT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LUA_SCRIPT_descriptor_;
  metadata.reflection = LUA_SCRIPT_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LUA_SCRIPT

// required bytes script_content = 1;
bool LUA_SCRIPT::has_script_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LUA_SCRIPT::set_has_script_content() {
  _has_bits_[0] |= 0x00000001u;
}
void LUA_SCRIPT::clear_has_script_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void LUA_SCRIPT::clear_script_content() {
  script_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script_content();
}
const ::std::string& LUA_SCRIPT::script_content() const {
  // @@protoc_insertion_point(field_get:LUA_SCRIPT.script_content)
  return script_content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LUA_SCRIPT::set_script_content(const ::std::string& value) {
  set_has_script_content();
  script_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LUA_SCRIPT.script_content)
}
void LUA_SCRIPT::set_script_content(const char* value) {
  set_has_script_content();
  script_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LUA_SCRIPT.script_content)
}
void LUA_SCRIPT::set_script_content(const void* value, size_t size) {
  set_has_script_content();
  script_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LUA_SCRIPT.script_content)
}
::std::string* LUA_SCRIPT::mutable_script_content() {
  set_has_script_content();
  // @@protoc_insertion_point(field_mutable:LUA_SCRIPT.script_content)
  return script_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LUA_SCRIPT::release_script_content() {
  // @@protoc_insertion_point(field_release:LUA_SCRIPT.script_content)
  clear_has_script_content();
  return script_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LUA_SCRIPT::set_allocated_script_content(::std::string* script_content) {
  if (script_content != NULL) {
    set_has_script_content();
  } else {
    clear_has_script_content();
  }
  script_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_content);
  // @@protoc_insertion_point(field_set_allocated:LUA_SCRIPT.script_content)
}

// required int32 clientsock = 2;
bool LUA_SCRIPT::has_clientsock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LUA_SCRIPT::set_has_clientsock() {
  _has_bits_[0] |= 0x00000002u;
}
void LUA_SCRIPT::clear_has_clientsock() {
  _has_bits_[0] &= ~0x00000002u;
}
void LUA_SCRIPT::clear_clientsock() {
  clientsock_ = 0;
  clear_has_clientsock();
}
::google::protobuf::int32 LUA_SCRIPT::clientsock() const {
  // @@protoc_insertion_point(field_get:LUA_SCRIPT.clientsock)
  return clientsock_;
}
void LUA_SCRIPT::set_clientsock(::google::protobuf::int32 value) {
  set_has_clientsock();
  clientsock_ = value;
  // @@protoc_insertion_point(field_set:LUA_SCRIPT.clientsock)
}

inline const LUA_SCRIPT* LUA_SCRIPT::internal_default_instance() {
  return &LUA_SCRIPT_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestPing::kTimeFieldNumber;
const int TestPing::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestPing::TestPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestPing)
}

void TestPing::InitAsDefaultInstance() {
}

TestPing::TestPing(const TestPing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestPing)
}

void TestPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_, 0, reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&time_) + sizeof(serverid_));
}

TestPing::~TestPing() {
  // @@protoc_insertion_point(destructor:TestPing)
  SharedDtor();
}

void TestPing::SharedDtor() {
}

void TestPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestPing_descriptor_;
}

const TestPing& TestPing::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TestPing> TestPing_default_instance_;

TestPing* TestPing::New(::google::protobuf::Arena* arena) const {
  TestPing* n = new TestPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestPing::Clear() {
// @@protoc_insertion_point(message_clear_start:TestPing)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestPing, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestPing*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, serverid_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (tag == 8) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestPing)
  return false;
#undef DO_
}

void TestPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestPing)
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestPing)
}

::google::protobuf::uint8* TestPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TestPing)
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestPing)
  return target;
}

size_t TestPing::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TestPing)
  size_t total_size = 0;

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_serverid()) {
    // required int32 serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  return total_size;
}
size_t TestPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestPing)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required int32 serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestPing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestPing)
    UnsafeMergeFrom(*source);
  }
}

void TestPing::MergeFrom(const TestPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestPing)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TestPing::UnsafeMergeFrom(const TestPing& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TestPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPing::CopyFrom(const TestPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestPing)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TestPing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TestPing::Swap(TestPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestPing::InternalSwap(TestPing* other) {
  std::swap(time_, other->time_);
  std::swap(serverid_, other->serverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestPing_descriptor_;
  metadata.reflection = TestPing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestPing

// required uint64 time = 1;
bool TestPing::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestPing::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void TestPing::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestPing::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 TestPing::time() const {
  // @@protoc_insertion_point(field_get:TestPing.time)
  return time_;
}
void TestPing::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:TestPing.time)
}

// required int32 serverid = 2;
bool TestPing::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TestPing::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
void TestPing::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TestPing::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
::google::protobuf::int32 TestPing::serverid() const {
  // @@protoc_insertion_point(field_get:TestPing.serverid)
  return serverid_;
}
void TestPing::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:TestPing.serverid)
}

inline const TestPing* TestPing::internal_default_instance() {
  return &TestPing_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestPingReply::kTimeFieldNumber;
const int TestPingReply::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestPingReply::TestPingReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestPingReply)
}

void TestPingReply::InitAsDefaultInstance() {
}

TestPingReply::TestPingReply(const TestPingReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestPingReply)
}

void TestPingReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_, 0, reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&time_) + sizeof(serverid_));
}

TestPingReply::~TestPingReply() {
  // @@protoc_insertion_point(destructor:TestPingReply)
  SharedDtor();
}

void TestPingReply::SharedDtor() {
}

void TestPingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestPingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestPingReply_descriptor_;
}

const TestPingReply& TestPingReply::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TestPingReply> TestPingReply_default_instance_;

TestPingReply* TestPingReply::New(::google::protobuf::Arena* arena) const {
  TestPingReply* n = new TestPingReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestPingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TestPingReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestPingReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestPingReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, serverid_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestPingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestPingReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (tag == 8) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestPingReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestPingReply)
  return false;
#undef DO_
}

void TestPingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestPingReply)
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestPingReply)
}

::google::protobuf::uint8* TestPingReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TestPingReply)
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestPingReply)
  return target;
}

size_t TestPingReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TestPingReply)
  size_t total_size = 0;

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_serverid()) {
    // required int32 serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  return total_size;
}
size_t TestPingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestPingReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required int32 serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestPingReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestPingReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestPingReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestPingReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestPingReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestPingReply)
    UnsafeMergeFrom(*source);
  }
}

void TestPingReply::MergeFrom(const TestPingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestPingReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TestPingReply::UnsafeMergeFrom(const TestPingReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TestPingReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPingReply::CopyFrom(const TestPingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestPingReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TestPingReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TestPingReply::Swap(TestPingReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestPingReply::InternalSwap(TestPingReply* other) {
  std::swap(time_, other->time_);
  std::swap(serverid_, other->serverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestPingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestPingReply_descriptor_;
  metadata.reflection = TestPingReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestPingReply

// required uint64 time = 1;
bool TestPingReply::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestPingReply::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void TestPingReply::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestPingReply::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 TestPingReply::time() const {
  // @@protoc_insertion_point(field_get:TestPingReply.time)
  return time_;
}
void TestPingReply::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:TestPingReply.time)
}

// required int32 serverid = 2;
bool TestPingReply::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TestPingReply::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
void TestPingReply::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TestPingReply::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
::google::protobuf::int32 TestPingReply::serverid() const {
  // @@protoc_insertion_point(field_get:TestPingReply.serverid)
  return serverid_;
}
void TestPingReply::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:TestPingReply.serverid)
}

inline const TestPingReply* TestPingReply::internal_default_instance() {
  return &TestPingReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarChangeGame::kSessionidFieldNumber;
const int AvatarChangeGame::kGameidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarChangeGame::AvatarChangeGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarChangeGame)
}

void AvatarChangeGame::InitAsDefaultInstance() {
}

AvatarChangeGame::AvatarChangeGame(const AvatarChangeGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AvatarChangeGame)
}

void AvatarChangeGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sessionid_, 0, reinterpret_cast<char*>(&gameid_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(gameid_));
}

AvatarChangeGame::~AvatarChangeGame() {
  // @@protoc_insertion_point(destructor:AvatarChangeGame)
  SharedDtor();
}

void AvatarChangeGame::SharedDtor() {
}

void AvatarChangeGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarChangeGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarChangeGame_descriptor_;
}

const AvatarChangeGame& AvatarChangeGame::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AvatarChangeGame> AvatarChangeGame_default_instance_;

AvatarChangeGame* AvatarChangeGame::New(::google::protobuf::Arena* arena) const {
  AvatarChangeGame* n = new AvatarChangeGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarChangeGame::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarChangeGame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AvatarChangeGame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AvatarChangeGame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sessionid_, gameid_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AvatarChangeGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AvatarChangeGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sessionid = 1;
      case 1: {
        if (tag == 8) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarChangeGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarChangeGame)
  return false;
#undef DO_
}

void AvatarChangeGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarChangeGame)
  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // required int32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AvatarChangeGame)
}

::google::protobuf::uint8* AvatarChangeGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AvatarChangeGame)
  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // required int32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarChangeGame)
  return target;
}

size_t AvatarChangeGame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarChangeGame)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required uint64 sessionid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  if (has_gameid()) {
    // required int32 gameid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gameid());
  }

  return total_size;
}
size_t AvatarChangeGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarChangeGame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 sessionid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());

    // required int32 gameid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gameid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarChangeGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AvatarChangeGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AvatarChangeGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarChangeGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AvatarChangeGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AvatarChangeGame)
    UnsafeMergeFrom(*source);
  }
}

void AvatarChangeGame::MergeFrom(const AvatarChangeGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarChangeGame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AvatarChangeGame::UnsafeMergeFrom(const AvatarChangeGame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AvatarChangeGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AvatarChangeGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarChangeGame::CopyFrom(const AvatarChangeGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarChangeGame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AvatarChangeGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AvatarChangeGame::Swap(AvatarChangeGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarChangeGame::InternalSwap(AvatarChangeGame* other) {
  std::swap(sessionid_, other->sessionid_);
  std::swap(gameid_, other->gameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarChangeGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarChangeGame_descriptor_;
  metadata.reflection = AvatarChangeGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarChangeGame

// required uint64 sessionid = 1;
bool AvatarChangeGame::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AvatarChangeGame::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void AvatarChangeGame::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AvatarChangeGame::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 AvatarChangeGame::sessionid() const {
  // @@protoc_insertion_point(field_get:AvatarChangeGame.sessionid)
  return sessionid_;
}
void AvatarChangeGame::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:AvatarChangeGame.sessionid)
}

// required int32 gameid = 2;
bool AvatarChangeGame::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AvatarChangeGame::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
void AvatarChangeGame::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AvatarChangeGame::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
::google::protobuf::int32 AvatarChangeGame::gameid() const {
  // @@protoc_insertion_point(field_get:AvatarChangeGame.gameid)
  return gameid_;
}
void AvatarChangeGame::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:AvatarChangeGame.gameid)
}

inline const AvatarChangeGame* AvatarChangeGame::internal_default_instance() {
  return &AvatarChangeGame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarInfo::kSessionidFieldNumber;
const int AvatarInfo::kAvatarIDFieldNumber;
const int AvatarInfo::kLevelFieldNumber;
const int AvatarInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarInfo::AvatarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_servermessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarInfo)
}

void AvatarInfo::InitAsDefaultInstance() {
}

AvatarInfo::AvatarInfo(const AvatarInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AvatarInfo)
}

void AvatarInfo::SharedCtor() {
  _cached_size_ = 0;
  avatarid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessionid_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(state_));
}

AvatarInfo::~AvatarInfo() {
  // @@protoc_insertion_point(destructor:AvatarInfo)
  SharedDtor();
}

void AvatarInfo::SharedDtor() {
  avatarid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarInfo_descriptor_;
}

const AvatarInfo& AvatarInfo::default_instance() {
  protobuf_InitDefaults_servermessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AvatarInfo> AvatarInfo_default_instance_;

AvatarInfo* AvatarInfo::New(::google::protobuf::Arena* arena) const {
  AvatarInfo* n = new AvatarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AvatarInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AvatarInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(sessionid_, state_);
    if (has_avatarid()) {
      avatarid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AvatarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sessionid = 1;
      case 1: {
        if (tag == 8) {
          set_has_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatarID;
        break;
      }

      // required bytes avatarID = 2;
      case 2: {
        if (tag == 18) {
         parse_avatarID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarInfo)
  return false;
#undef DO_
}

void AvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarInfo)
  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // required bytes avatarID = 2;
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->avatarid(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AvatarInfo)
}

::google::protobuf::uint8* AvatarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AvatarInfo)
  // required uint64 sessionid = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // required bytes avatarID = 2;
  if (has_avatarid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->avatarid(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvatarInfo)
  return target;
}

size_t AvatarInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarInfo)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required uint64 sessionid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  if (has_avatarid()) {
    // required bytes avatarID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarid());
  }

  if (has_level()) {
    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_state()) {
    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  return total_size;
}
size_t AvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 sessionid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());

    // required bytes avatarID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarid());

    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AvatarInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AvatarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AvatarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AvatarInfo)
    UnsafeMergeFrom(*source);
  }
}

void AvatarInfo::MergeFrom(const AvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AvatarInfo::UnsafeMergeFrom(const AvatarInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_avatarid()) {
      set_has_avatarid();
      avatarid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarid_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarInfo::CopyFrom(const AvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AvatarInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AvatarInfo::Swap(AvatarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarInfo::InternalSwap(AvatarInfo* other) {
  std::swap(sessionid_, other->sessionid_);
  avatarid_.Swap(&other->avatarid_);
  std::swap(level_, other->level_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarInfo_descriptor_;
  metadata.reflection = AvatarInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarInfo

// required uint64 sessionid = 1;
bool AvatarInfo::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AvatarInfo::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void AvatarInfo::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AvatarInfo::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
::google::protobuf::uint64 AvatarInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:AvatarInfo.sessionid)
  return sessionid_;
}
void AvatarInfo::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:AvatarInfo.sessionid)
}

// required bytes avatarID = 2;
bool AvatarInfo::has_avatarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AvatarInfo::set_has_avatarid() {
  _has_bits_[0] |= 0x00000002u;
}
void AvatarInfo::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AvatarInfo::clear_avatarid() {
  avatarid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatarid();
}
const ::std::string& AvatarInfo::avatarid() const {
  // @@protoc_insertion_point(field_get:AvatarInfo.avatarID)
  return avatarid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarInfo::set_avatarid(const ::std::string& value) {
  set_has_avatarid();
  avatarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AvatarInfo.avatarID)
}
void AvatarInfo::set_avatarid(const char* value) {
  set_has_avatarid();
  avatarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AvatarInfo.avatarID)
}
void AvatarInfo::set_avatarid(const void* value, size_t size) {
  set_has_avatarid();
  avatarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AvatarInfo.avatarID)
}
::std::string* AvatarInfo::mutable_avatarid() {
  set_has_avatarid();
  // @@protoc_insertion_point(field_mutable:AvatarInfo.avatarID)
  return avatarid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarInfo::release_avatarid() {
  // @@protoc_insertion_point(field_release:AvatarInfo.avatarID)
  clear_has_avatarid();
  return avatarid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarInfo::set_allocated_avatarid(::std::string* avatarid) {
  if (avatarid != NULL) {
    set_has_avatarid();
  } else {
    clear_has_avatarid();
  }
  avatarid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatarid);
  // @@protoc_insertion_point(field_set_allocated:AvatarInfo.avatarID)
}

// required int32 level = 3;
bool AvatarInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AvatarInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void AvatarInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void AvatarInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 AvatarInfo::level() const {
  // @@protoc_insertion_point(field_get:AvatarInfo.level)
  return level_;
}
void AvatarInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:AvatarInfo.level)
}

// required int32 state = 4;
bool AvatarInfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AvatarInfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
void AvatarInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void AvatarInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 AvatarInfo::state() const {
  // @@protoc_insertion_point(field_get:AvatarInfo.state)
  return state_;
}
void AvatarInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:AvatarInfo.state)
}

inline const AvatarInfo* AvatarInfo::internal_default_instance() {
  return &AvatarInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
